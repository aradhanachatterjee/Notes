[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Notes",
    "section": "",
    "text": "Notes",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "pages/Stats2/Quiz2_keyterms.html",
    "href": "pages/Stats2/Quiz2_keyterms.html",
    "title": "Quiz 2 - Key Terms",
    "section": "",
    "text": "X - CRV, with CDF F_X and PDF f_X\nY = g(X), with CDF F_Y, such that F_y(y) = P(Y \\leq y) = P(g(X) \\leq y) = P(X \\in \\{x:g(x) \\leq y\\})\nFor monotonic, differentiable functions Y=g(X):\nf_Y(y) = \\frac{1}{\\left | g'(g^{-1}(y)) \\right|} \\cdot f_X(g^{-1}(y))"
  },
  {
    "objectID": "pages/Stats2/Quiz2_keyterms.html#functions-of-a-continuous-random-variable",
    "href": "pages/Stats2/Quiz2_keyterms.html#functions-of-a-continuous-random-variable",
    "title": "Quiz 2 - Key Terms",
    "section": "",
    "text": "X - CRV, with CDF F_X and PDF f_X\nY = g(X), with CDF F_Y, such that F_y(y) = P(Y \\leq y) = P(g(X) \\leq y) = P(X \\in \\{x:g(x) \\leq y\\})\nFor monotonic, differentiable functions Y=g(X):\nf_Y(y) = \\frac{1}{\\left | g'(g^{-1}(y)) \\right|} \\cdot f_X(g^{-1}(y))"
  },
  {
    "objectID": "pages/DBMS/w4.html",
    "href": "pages/DBMS/w4.html",
    "title": "Week 4",
    "section": "",
    "text": "Relational Algebra\n\nProcedural and Algebra based\n\nTuple Relational Calculus\n\nNon-Procedural (Declarative) and Predicate Calculus based\n\nDomain Relational Calculus\n\nNon-Procedural (Declarative) and Predicate Calculus based\n\n\n\n\n\nRelational algebra is a procedural query language which takes relations as input and returns relation as output.\nIt was created by Edgar F. Codd at IBM in 1970.\nSix basic operators of relational algebra are:\n\nSelect (\\sigma)\nProject (\\Pi)\nUnion (\\cup)\nSet Difference (-)\nCartesian Product (\\times)\nRename (\\rho)\n\n\n\n\n\n\nNotation: \\sigma_{p}(r)\np is called the selection predicate\nDefinition: \n  \\sigma_{p}(r) = \\{t \\mid t \\in r \\text{ and } p(t) \\}\n  \nwhere p is a formula in propositional calculus consisting of terms connected by: \\land (and), \\lor (or), and \\lnot (not).\nEach term is one of:\n&lt; attribute &gt; op &lt; attribute &gt; or &lt; constant &gt;\nwhere op is one of: =, \\neq, &lt;, \\leq, &gt;, \\geq\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nα\nβ\n5\n7\n\n\nβ\nβ\n12\n3\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\n\\sigma_{A=B\\wedge D&gt;5}(r)\n\n\n\n\n\n\nNotation: \\Pi_{A_1, A_2, \\ldots, A_k}(r)\nwhere A_1, A_2, \\ldots, A_k are attributes of relation r\nThe result is defined as the relation of k columns obtained by deleting columns other than A_1, A_2, \\ldots, A_k from r\nDuplicate rows are automatically eliminated, since the result is a set\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nα\n10\n1\n\n\nα\n20\n1\n\n\nβ\n30\n1\n\n\nβ\n40\n2\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nC\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\nβ\n2\n\n\n\n\n\n\n\\Pi_{A, C}(r)\n\n\n\n\n\n\nNotation: r \\cup s\nDefined as: r \\cup s = \\{t \\mid t \\in r \\text{ or } t \\in s \\}\nFor r \\cup s to be valid\n\nr and s must have the same arity (same number of attributes)\nThe attribute domains must be compatible (same type)\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\nβ\n3\n\n\n\n\n\n\n\nr \\cup s\n\n\n\n\n\n\nNotation: r - s\nDefined as: r - s = \\{t \\mid t \\in r \\text{ and } t \\notin s \\}\nSet differences must be taken between compatible relations\n\nr and s must have the same arity\nThe attribute domains must be compatible\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\n\n\n\n\nr - s\n\n\n\n\n\n\nNotation: r \\cap s\nDefined as: r \\cap s = \\{t \\mid t \\in r \\text{ and } t \\in s \\}\nAssume:\n\nr, s have the same arity\nAttributes of r and s are compatible\n\nNote: r \\cap s = r - (r - s)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\n\n\n\n\nr \\cap s\n\n\n\n\n\n\nNotation: r \\times s\nDefined as: r \\times s = \\{t_1, t_2 \\mid t_1 \\in r \\text{ and } t_2 \\in s \\}\nAssume that attributes of r and s are disjoint (no common attributes)\nIf attributes are not disjoint, use rename operation to make them disjoint\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\nr\n\n\n\n\n\n\nC\nD\nE\n\n\n\n\nα\n10\na\n\n\nβ\n10\na\n\n\nβ\n20\nb\n\n\nγ\n10\nb\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nα\n1\nα\n10\na\n\n\nα\n1\nβ\n10\na\n\n\nα\n1\nβ\n20\nb\n\n\nα\n1\nγ\n10\nb\n\n\nβ\n2\nα\n10\na\n\n\nβ\n2\nβ\n10\na\n\n\nβ\n2\nβ\n20\nb\n\n\nβ\n2\nγ\n10\nb\n\n\n\n\n\n\nr \\times s\n\n\n\n\n\n\nAllows us to name, and therefore to refer to, the result of a relational-algebra expression\nAllows us to refer to a relation by more than one name\nExample:\n\\rho_{X}(E)\nreturns the relation E under the name X\nIf a relational-algebra expression E has arity n, then \n  \\rho_{X(A_1, A_2, \\ldots, A_n)}(E)\n   returns the result of the expression E under the name X, and with the attributes renamed to \n  A_1, A_2, \\ldots, A_n\n  \n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\nr\n\n\n\n\n\n\nr.A\nr.B\ns.A\ns.B\n\n\n\n\nα\n1\nα\n1\n\n\nα\n1\nβ\n2\n\n\nβ\n2\nα\n1\n\n\nβ\n2\nβ\n2\n\n\n\n\n\n\nr \\times \\rho_{s}(r)\n\n\n\n\n\n\nThe division operation is applied to two relations\nR(Z) \\div S(X), where X is a subset of Z. Let Y = Z - X (hence Z = X \\cup Y); that is, let Y be the set of attributes of R that are not in S\nThe result of the division operation is a relation T(Y) that includes a tuple t if tuples t_R appear in R with t_R[Y] = t, and with\n\nt_R[X] = t_S for all tuples t_S in S\n\nFor a tuple t to appear in the result T of the division operation, the values in t must appear in R with all possible combinations of values in S\nDivision is a derived operation, and can be expressed in terms of the basic operations of relational algebra\nr \\div s \\equiv \\Pi_{R - S}(r) - \\Pi_{R - S}(r)((\\Pi_{R - S}(r) \\times s) - \\Pi_{R-S,S}(r))\n\n\n\n\n\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\nR\n\n\n\n\n\n\nSubject\n\n\n\n\nProlog\n\n\n\n\n\n\nS\n\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\nLewis\n\n\n\n\n\n\nR \\mid S\n\n\n\n\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\nR\n\n\n\n\n\n\nSubject\n\n\n\n\nDatabases\n\n\nProlog\n\n\n\n\n\n\nS\n\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\n\n\n\n\nR \\mid S\n\n\n\n\n\n\nPredicate Logic or Predicate Calculus is an extension of Propositional Logic or Boolean Algebra.\nIt adds the concept of predicates and quantifiers to better capture the meaning of statements that cannot be adequately expressed using propositional logic.\nTuple Relational Calculus and Domain Relational Calculus are based on Predicate Calculus.\n\n\n\n\nConsider the statement, “x is greater than 3”. It has two parts. The first part, the variable x, is the subject of the statement. The second part, “is greater than 3”, is the predicate. It refers to a property that the subject of the statement can have.\nThe statement “x is greater than 3” can be denoted by P(x) where P denotes the predicate “is greater than 3” and x is the variable.\nThe predicate P can be considered as a function. It tells the truth value of the statement P(x) at x. Once a value has been assigned to the variable x, the statement P(x) becomes a proposition and has a truth or false value.\nIn general, a statement involving n variables x_1, x_2, x_3, \\ldots , x_n and a predicate P can be denoted by P(x_1, x_2, x_3, \\ldots , x_n). Here P is also referred to as n-place predicate or a n-ary predicate.\n\n\n\n\nIn predicate logic, predicates are used alongside quantifiers to express the extent to which a predicate is true over a range of elements. Using quantifiers to create such propositions is called quantification. There are two types of quantifiers:\n\nUniversal Quantifier\nExistential Quantifier\n\n\n\n\nUniversal Quantification: Mathematical statements sometimes assert that a property is true for all the values of a variable in a particular domain, called the domain of discourse\n\nSuch a statement is expressed using universal quantification.\nThe universal quantification of P(x) for a particular domain is the proposition that asserts that P(x) is true for all values of x in this domain\nThe domain is very important here since it decides the possible values of x\nFormally, The universal quantification of P(x) is the statement “P(x) for all values of x in the domain”\nThe notation \\forall P(x) denotes the universal quantification of P(x). Here \\forall is called the universal quantifier. \\forall P(x) is read as “for all x P(x)”.\nExample: Let P(x) be the statement “x + 2 &gt; x”. What is the truth value of the statement \\forall x P(x)?\nSolution: As x + 2 is greater than x for any real number, so P(x) \\equiv T for all x or \\forall x P(x) \\equiv T\n\n\n\n\nExistential Quantification: Some mathematical statements assert that there is an element with a certain property. Such statements are expressed by existential quantification. Existential quantification can be used to form a proposition that is true if and only if P(x) is true for at least one value of x in the domain.\n\nFormally, the existential quantification of P(x) is the statement “There exists an element x in the domain such that P(x)”.\nThe notation \\exists P(x) denotes the existential quantification of P(x). Here \\exists is called the existential quantifier. \\exists P(x) is read as “There is at least one x such that P(x)”.\nExample: Let P(x) be the statement “x^2 = 4”. What is the truth value of the statement \\exists x P(x)?\nSolution: The statement x^2 = 4 is true for x = 2 and x = -2. So, \\exists x P(x) \\equiv T\n\n\n\n\nTRC is a non-procedural query language, where each query is of the form\n\n\\{t \\mid P(t)\\}\n\nwhere t = resulting tuples, P(t) = known as predicate and these are the conditions that are used to fetch t. P(t) may have various conditions connected by logical connectives like AND (\\land), OR (\\lor), and NOT (\\lnot).\nIt also uses quantifiers: \\exists t \\in r(Q(t)) = “there exists” a tuple t in relation r such that Q(t) is true. \\forall t \\in r(Q(t)) = “for all” tuples t in relation r, Q(t) is true.\n\n\n\n\nSet of attributes and constants\nSet of comparison operators: (=, \\neq, &lt;, \\leq, &gt;, \\geq)\nSet of logical connectives: and (\\land), or(\\lor), not (\\lnot)\nImplication (\\implies) : x \\implies y, if x then y\nSet of quantifiers:\n\n\\exists t \\in r(Q(t)) \\equiv “there exists” a tuple t in relation r such that Q(t) is true.\n\\forall t \\in r(Q(t)) \\equiv Q is true “for all” tuples t in relation r\n\n\n\n\n\nStudent\n\n\nFname\nLname\nAge\nCourse\n\n\n\n\nDavid\nSharma\n27\nDBMS\n\n\nAaron\nLilly\n17\nJava\n\n\nSahil\nKhan\n19\nPython\n\n\nSachin\nRao\n20\nDBMS\n\n\nVarun\nGeorge\n23\nJava\n\n\nSimi\nVerma\n22\nJava\n\n\n\nObtain the first name of students whose age is greater than 21.\nSolution:\n\n  \\{t.Fname \\mid Student(t) \\land t.Age &gt; 21\\}\n   \n  \\{t.Fname \\mid t \\in Student \\land t.Age &gt; 21\\}\n   \n  \\{t \\mid \\exists s \\in Student(s.Age &gt; 21 \\land t.Fname = s.Fname)\\}\n  \n\n\n\n\n\nIt is possible to write tuple calculus expressions that generate infinite relations\nFor example, \\{t \\mid \\lnot t \\in r\\} results in an infinite relation if the domain of any attribute of relation r is infinite\nTo guard against the problem, we restrict the set of allowable expressions to safe expressions\nAn expression \\{t \\mid P(t)\\} in the tuple relational calculus is safe if every component of t appears in one of the relations, tuples, or constants that appear in P.\n\nNOTE: this is more than just a syntax condition\nE.g. \\{t \\mid t[A] = 5 \\lor \\text{true}\\} is not safe — it defines an infinite set with attribute values that do not appear in any relation or tuples or constants in P\n\n\n\n\n\n\nA non-procedural query language equivalent in power to tuple relational calculus\nEach query is of the form\n\n  \\{&lt; x_1, x_2, \\ldots, x_n &gt; \\mid P(x_1, x_2, \\ldots, x_n)\\}\n  \n\nx_1, x_2, \\ldots, x_n represent domain variables\nP represents a formula similar to that of the predicate calculus\n\n\n\n\n\n\n\nR = (A, B)\n\nRelational Algebra: \\sigma_{A = 5}(r)\nTuple Relational Calculus: \\{t \\mid t \\in r \\land A = 5\\}\nDomain Relational Calculus: \\{&lt; a, b &gt; \\mid &lt;a, b&gt; \\in r \\land a = 5\\}\n\n\n\n\nR = (A, B)\n\nRelational Algebra: \\Pi_{A}(r)\nTuple Relational Calculus: \\{t \\mid t \\exists p \\in r(t[A]=p[A])\\}\nDomain Relational Calculus: \\{&lt; a &gt; \\mid \\exists b(&lt;a, b&gt; \\in r)\\}\n\n\n\n\nR = (A, B)\n\nRelational Algebra: \\Pi_{A}(\\sigma_{B = 5}(r))\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r(t[A] = p[A] \\land p[B] = 5)\\}\nDomain Relational Calculus: \\{&lt; a &gt; \\mid \\exists b(&lt;a, b&gt; \\in r \\land b = 5)\\}\n\n\n\n\nR = (A, B, C), S = (A, B, C)\n\nRelational Algebra: r \\cup s\nTuple Relational Calculus: \\{t \\mid t \\in r \\lor t \\in s\\}\nDomain Relational Calculus: \\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\lor &lt;a, b, c&gt; \\in s\\}\n\n\n\n\nR = (A, B, C), S = (A, B, C)\n\nRelational Algebra: r - s\nTuple Relational Calculus: \\{t \\mid t \\in r \\land t \\notin s\\}\nDomain Relational Calculus: \\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\land &lt;a, b, c&gt; \\notin s\\}\n\n\n\n\nR = (A, B, C), S = (A, B, C)\n\nRelational Algebra: r \\cap s\nTuple Relational Calculus: \\{t \\mid t \\in r \\land t \\in s\\}\nDomain Relational Calculus: \\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\land &lt;a, b, c&gt; \\in s\\}\n\n\n\n\nR = (A, B), S = (C, D)\n\nRelational Algebra: r \\times s\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r \\exists q \\in s(t[A] = p[A] \\land t[B] = p[B] \\land t[C] = q[C] \\land t[D] = q[D])\\}\nDomain Relational Calculus: \\{&lt; a, b, c, d &gt; \\mid (&lt;a, b&gt; \\in r \\land &lt;c, d&gt; \\in s)\\}\n\n\n\n\nR = (A, B, C, D), S = (B, D, E)\n\nRelational Algebra: r \\bowtie s \n\\Pi_{r.A, r.B, r.C, r.D, s.E}(\\sigma_{r.B = s.B \\land r.D = s.D}(r \\times s))\n\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r \\exists q \\in s(t[A] = p[A] \\land t[B] = p[B] \\land t[C] = p[C] \\land t[D] = p[D] \\land t[E] = q[E] \\land p[B] = q[B] \\land p[D]=q[D])\\}\nDomain Relational Calculus: \\{&lt; a, b, c, d, e &gt; \\mid &lt;a, b, c, d&gt; \\in r \\land &lt;b, d, e&gt; \\in s\\}\n\n\n\n\nR = (A, B), S = (B)\n\nRelational Algebra: r \\div s\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r(\\forall q \\in s(p[B] = q[B] \\implies t[A] = p[A]))\\}\nDomain Relational Calculus: \\{&lt; a &gt; \\mid &lt; a &gt; \\in r \\land \\forall &lt;b&gt;(&lt; b &gt; \\in s \\implies &lt; a, b &gt; \\in r)\\}",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#relational-algebra",
    "href": "pages/DBMS/w4.html#relational-algebra",
    "title": "Week 4",
    "section": "",
    "text": "Relational algebra is a procedural query language which takes relations as input and returns relation as output.\nIt was created by Edgar F. Codd at IBM in 1970.\nSix basic operators of relational algebra are:\n\nSelect (\\sigma)\nProject (\\Pi)\nUnion (\\cup)\nSet Difference (-)\nCartesian Product (\\times)\nRename (\\rho)",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#select-operation",
    "href": "pages/DBMS/w4.html#select-operation",
    "title": "Week 4",
    "section": "",
    "text": "Notation: \\sigma_{p}(r)\np is called the selection predicate\nDefinition: \n  \\sigma_{p}(r) = \\{t \\mid t \\in r \\text{ and } p(t) \\}\n  \nwhere p is a formula in propositional calculus consisting of terms connected by: \\land (and), \\lor (or), and \\lnot (not).\nEach term is one of:\n&lt; attribute &gt; op &lt; attribute &gt; or &lt; constant &gt;\nwhere op is one of: =, \\neq, &lt;, \\leq, &gt;, \\geq\n\n\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nα\nβ\n5\n7\n\n\nβ\nβ\n12\n3\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\n\\sigma_{A=B\\wedge D&gt;5}(r)",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#project-operation",
    "href": "pages/DBMS/w4.html#project-operation",
    "title": "Week 4",
    "section": "",
    "text": "Notation: \\Pi_{A_1, A_2, \\ldots, A_k}(r)\nwhere A_1, A_2, \\ldots, A_k are attributes of relation r\nThe result is defined as the relation of k columns obtained by deleting columns other than A_1, A_2, \\ldots, A_k from r\nDuplicate rows are automatically eliminated, since the result is a set\n\n\n\n\n\n\n\n\nA\nB\nC\n\n\n\n\nα\n10\n1\n\n\nα\n20\n1\n\n\nβ\n30\n1\n\n\nβ\n40\n2\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nC\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\nβ\n2\n\n\n\n\n\n\n\\Pi_{A, C}(r)",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#union-operation",
    "href": "pages/DBMS/w4.html#union-operation",
    "title": "Week 4",
    "section": "",
    "text": "Notation: r \\cup s\nDefined as: r \\cup s = \\{t \\mid t \\in r \\text{ or } t \\in s \\}\nFor r \\cup s to be valid\n\nr and s must have the same arity (same number of attributes)\nThe attribute domains must be compatible (same type)\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\nβ\n3\n\n\n\n\n\n\n\nr \\cup s",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#difference-operation",
    "href": "pages/DBMS/w4.html#difference-operation",
    "title": "Week 4",
    "section": "",
    "text": "Notation: r - s\nDefined as: r - s = \\{t \\mid t \\in r \\text{ and } t \\notin s \\}\nSet differences must be taken between compatible relations\n\nr and s must have the same arity\nThe attribute domains must be compatible\n\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\n\n\n\n\nr - s",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#intersection-operation",
    "href": "pages/DBMS/w4.html#intersection-operation",
    "title": "Week 4",
    "section": "",
    "text": "Notation: r \\cap s\nDefined as: r \\cap s = \\{t \\mid t \\in r \\text{ and } t \\in s \\}\nAssume:\n\nr, s have the same arity\nAttributes of r and s are compatible\n\nNote: r \\cap s = r - (r - s)\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\nr\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\n\n\n\n\nr \\cap s",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#cartesian-product-operation",
    "href": "pages/DBMS/w4.html#cartesian-product-operation",
    "title": "Week 4",
    "section": "",
    "text": "Notation: r \\times s\nDefined as: r \\times s = \\{t_1, t_2 \\mid t_1 \\in r \\text{ and } t_2 \\in s \\}\nAssume that attributes of r and s are disjoint (no common attributes)\nIf attributes are not disjoint, use rename operation to make them disjoint\n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\nr\n\n\n\n\n\n\nC\nD\nE\n\n\n\n\nα\n10\na\n\n\nβ\n10\na\n\n\nβ\n20\nb\n\n\nγ\n10\nb\n\n\n\n\n\n\ns\n\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nα\n1\nα\n10\na\n\n\nα\n1\nβ\n10\na\n\n\nα\n1\nβ\n20\nb\n\n\nα\n1\nγ\n10\nb\n\n\nβ\n2\nα\n10\na\n\n\nβ\n2\nβ\n10\na\n\n\nβ\n2\nβ\n20\nb\n\n\nβ\n2\nγ\n10\nb\n\n\n\n\n\n\nr \\times s",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#rename-operation",
    "href": "pages/DBMS/w4.html#rename-operation",
    "title": "Week 4",
    "section": "",
    "text": "Allows us to name, and therefore to refer to, the result of a relational-algebra expression\nAllows us to refer to a relation by more than one name\nExample:\n\\rho_{X}(E)\nreturns the relation E under the name X\nIf a relational-algebra expression E has arity n, then \n  \\rho_{X(A_1, A_2, \\ldots, A_n)}(E)\n   returns the result of the expression E under the name X, and with the attributes renamed to \n  A_1, A_2, \\ldots, A_n\n  \n\n\n\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\nr\n\n\n\n\n\n\nr.A\nr.B\ns.A\ns.B\n\n\n\n\nα\n1\nα\n1\n\n\nα\n1\nβ\n2\n\n\nβ\n2\nα\n1\n\n\nβ\n2\nβ\n2\n\n\n\n\n\n\nr \\times \\rho_{s}(r)",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#division-operation",
    "href": "pages/DBMS/w4.html#division-operation",
    "title": "Week 4",
    "section": "",
    "text": "The division operation is applied to two relations\nR(Z) \\div S(X), where X is a subset of Z. Let Y = Z - X (hence Z = X \\cup Y); that is, let Y be the set of attributes of R that are not in S\nThe result of the division operation is a relation T(Y) that includes a tuple t if tuples t_R appear in R with t_R[Y] = t, and with\n\nt_R[X] = t_S for all tuples t_S in S\n\nFor a tuple t to appear in the result T of the division operation, the values in t must appear in R with all possible combinations of values in S\nDivision is a derived operation, and can be expressed in terms of the basic operations of relational algebra\nr \\div s \\equiv \\Pi_{R - S}(r) - \\Pi_{R - S}(r)((\\Pi_{R - S}(r) \\times s) - \\Pi_{R-S,S}(r))\n\n\n\n\n\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\nR\n\n\n\n\n\n\nSubject\n\n\n\n\nProlog\n\n\n\n\n\n\nS\n\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\nLewis\n\n\n\n\n\n\nR \\mid S\n\n\n\n\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\nR\n\n\n\n\n\n\nSubject\n\n\n\n\nDatabases\n\n\nProlog\n\n\n\n\n\n\nS\n\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\n\n\n\n\nR \\mid S",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#predicate-logic",
    "href": "pages/DBMS/w4.html#predicate-logic",
    "title": "Week 4",
    "section": "",
    "text": "Predicate Logic or Predicate Calculus is an extension of Propositional Logic or Boolean Algebra.\nIt adds the concept of predicates and quantifiers to better capture the meaning of statements that cannot be adequately expressed using propositional logic.\nTuple Relational Calculus and Domain Relational Calculus are based on Predicate Calculus.",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#predicate",
    "href": "pages/DBMS/w4.html#predicate",
    "title": "Week 4",
    "section": "",
    "text": "Consider the statement, “x is greater than 3”. It has two parts. The first part, the variable x, is the subject of the statement. The second part, “is greater than 3”, is the predicate. It refers to a property that the subject of the statement can have.\nThe statement “x is greater than 3” can be denoted by P(x) where P denotes the predicate “is greater than 3” and x is the variable.\nThe predicate P can be considered as a function. It tells the truth value of the statement P(x) at x. Once a value has been assigned to the variable x, the statement P(x) becomes a proposition and has a truth or false value.\nIn general, a statement involving n variables x_1, x_2, x_3, \\ldots , x_n and a predicate P can be denoted by P(x_1, x_2, x_3, \\ldots , x_n). Here P is also referred to as n-place predicate or a n-ary predicate.",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#quantifiers",
    "href": "pages/DBMS/w4.html#quantifiers",
    "title": "Week 4",
    "section": "",
    "text": "In predicate logic, predicates are used alongside quantifiers to express the extent to which a predicate is true over a range of elements. Using quantifiers to create such propositions is called quantification. There are two types of quantifiers:\n\nUniversal Quantifier\nExistential Quantifier",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#universal-quantifier",
    "href": "pages/DBMS/w4.html#universal-quantifier",
    "title": "Week 4",
    "section": "",
    "text": "Universal Quantification: Mathematical statements sometimes assert that a property is true for all the values of a variable in a particular domain, called the domain of discourse\n\nSuch a statement is expressed using universal quantification.\nThe universal quantification of P(x) for a particular domain is the proposition that asserts that P(x) is true for all values of x in this domain\nThe domain is very important here since it decides the possible values of x\nFormally, The universal quantification of P(x) is the statement “P(x) for all values of x in the domain”\nThe notation \\forall P(x) denotes the universal quantification of P(x). Here \\forall is called the universal quantifier. \\forall P(x) is read as “for all x P(x)”.\nExample: Let P(x) be the statement “x + 2 &gt; x”. What is the truth value of the statement \\forall x P(x)?\nSolution: As x + 2 is greater than x for any real number, so P(x) \\equiv T for all x or \\forall x P(x) \\equiv T",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#existential-quantifier",
    "href": "pages/DBMS/w4.html#existential-quantifier",
    "title": "Week 4",
    "section": "",
    "text": "Existential Quantification: Some mathematical statements assert that there is an element with a certain property. Such statements are expressed by existential quantification. Existential quantification can be used to form a proposition that is true if and only if P(x) is true for at least one value of x in the domain.\n\nFormally, the existential quantification of P(x) is the statement “There exists an element x in the domain such that P(x)”.\nThe notation \\exists P(x) denotes the existential quantification of P(x). Here \\exists is called the existential quantifier. \\exists P(x) is read as “There is at least one x such that P(x)”.\nExample: Let P(x) be the statement “x^2 = 4”. What is the truth value of the statement \\exists x P(x)?\nSolution: The statement x^2 = 4 is true for x = 2 and x = -2. So, \\exists x P(x) \\equiv T",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#tuple-relational-calculus",
    "href": "pages/DBMS/w4.html#tuple-relational-calculus",
    "title": "Week 4",
    "section": "",
    "text": "TRC is a non-procedural query language, where each query is of the form\n\n\\{t \\mid P(t)\\}\n\nwhere t = resulting tuples, P(t) = known as predicate and these are the conditions that are used to fetch t. P(t) may have various conditions connected by logical connectives like AND (\\land), OR (\\lor), and NOT (\\lnot).\nIt also uses quantifiers: \\exists t \\in r(Q(t)) = “there exists” a tuple t in relation r such that Q(t) is true. \\forall t \\in r(Q(t)) = “for all” tuples t in relation r, Q(t) is true.",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#predicate-calculus-formula",
    "href": "pages/DBMS/w4.html#predicate-calculus-formula",
    "title": "Week 4",
    "section": "",
    "text": "Set of attributes and constants\nSet of comparison operators: (=, \\neq, &lt;, \\leq, &gt;, \\geq)\nSet of logical connectives: and (\\land), or(\\lor), not (\\lnot)\nImplication (\\implies) : x \\implies y, if x then y\nSet of quantifiers:\n\n\\exists t \\in r(Q(t)) \\equiv “there exists” a tuple t in relation r such that Q(t) is true.\n\\forall t \\in r(Q(t)) \\equiv Q is true “for all” tuples t in relation r\n\n\n\n\n\nStudent\n\n\nFname\nLname\nAge\nCourse\n\n\n\n\nDavid\nSharma\n27\nDBMS\n\n\nAaron\nLilly\n17\nJava\n\n\nSahil\nKhan\n19\nPython\n\n\nSachin\nRao\n20\nDBMS\n\n\nVarun\nGeorge\n23\nJava\n\n\nSimi\nVerma\n22\nJava\n\n\n\nObtain the first name of students whose age is greater than 21.\nSolution:\n\n  \\{t.Fname \\mid Student(t) \\land t.Age &gt; 21\\}\n   \n  \\{t.Fname \\mid t \\in Student \\land t.Age &gt; 21\\}\n   \n  \\{t \\mid \\exists s \\in Student(s.Age &gt; 21 \\land t.Fname = s.Fname)\\}",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#safety-of-expressions",
    "href": "pages/DBMS/w4.html#safety-of-expressions",
    "title": "Week 4",
    "section": "",
    "text": "It is possible to write tuple calculus expressions that generate infinite relations\nFor example, \\{t \\mid \\lnot t \\in r\\} results in an infinite relation if the domain of any attribute of relation r is infinite\nTo guard against the problem, we restrict the set of allowable expressions to safe expressions\nAn expression \\{t \\mid P(t)\\} in the tuple relational calculus is safe if every component of t appears in one of the relations, tuples, or constants that appear in P.\n\nNOTE: this is more than just a syntax condition\nE.g. \\{t \\mid t[A] = 5 \\lor \\text{true}\\} is not safe — it defines an infinite set with attribute values that do not appear in any relation or tuples or constants in P",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#domain-relational-calculus",
    "href": "pages/DBMS/w4.html#domain-relational-calculus",
    "title": "Week 4",
    "section": "",
    "text": "A non-procedural query language equivalent in power to tuple relational calculus\nEach query is of the form\n\n  \\{&lt; x_1, x_2, \\ldots, x_n &gt; \\mid P(x_1, x_2, \\ldots, x_n)\\}\n  \n\nx_1, x_2, \\ldots, x_n represent domain variables\nP represents a formula similar to that of the predicate calculus",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/DBMS/w4.html#equivalence-of-relational-algebra-tuple-relational-calculus-and-domain-relational-calculus",
    "href": "pages/DBMS/w4.html#equivalence-of-relational-algebra-tuple-relational-calculus-and-domain-relational-calculus",
    "title": "Week 4",
    "section": "",
    "text": "R = (A, B)\n\nRelational Algebra: \\sigma_{A = 5}(r)\nTuple Relational Calculus: \\{t \\mid t \\in r \\land A = 5\\}\nDomain Relational Calculus: \\{&lt; a, b &gt; \\mid &lt;a, b&gt; \\in r \\land a = 5\\}\n\n\n\n\nR = (A, B)\n\nRelational Algebra: \\Pi_{A}(r)\nTuple Relational Calculus: \\{t \\mid t \\exists p \\in r(t[A]=p[A])\\}\nDomain Relational Calculus: \\{&lt; a &gt; \\mid \\exists b(&lt;a, b&gt; \\in r)\\}\n\n\n\n\nR = (A, B)\n\nRelational Algebra: \\Pi_{A}(\\sigma_{B = 5}(r))\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r(t[A] = p[A] \\land p[B] = 5)\\}\nDomain Relational Calculus: \\{&lt; a &gt; \\mid \\exists b(&lt;a, b&gt; \\in r \\land b = 5)\\}\n\n\n\n\nR = (A, B, C), S = (A, B, C)\n\nRelational Algebra: r \\cup s\nTuple Relational Calculus: \\{t \\mid t \\in r \\lor t \\in s\\}\nDomain Relational Calculus: \\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\lor &lt;a, b, c&gt; \\in s\\}\n\n\n\n\nR = (A, B, C), S = (A, B, C)\n\nRelational Algebra: r - s\nTuple Relational Calculus: \\{t \\mid t \\in r \\land t \\notin s\\}\nDomain Relational Calculus: \\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\land &lt;a, b, c&gt; \\notin s\\}\n\n\n\n\nR = (A, B, C), S = (A, B, C)\n\nRelational Algebra: r \\cap s\nTuple Relational Calculus: \\{t \\mid t \\in r \\land t \\in s\\}\nDomain Relational Calculus: \\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\land &lt;a, b, c&gt; \\in s\\}\n\n\n\n\nR = (A, B), S = (C, D)\n\nRelational Algebra: r \\times s\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r \\exists q \\in s(t[A] = p[A] \\land t[B] = p[B] \\land t[C] = q[C] \\land t[D] = q[D])\\}\nDomain Relational Calculus: \\{&lt; a, b, c, d &gt; \\mid (&lt;a, b&gt; \\in r \\land &lt;c, d&gt; \\in s)\\}\n\n\n\n\nR = (A, B, C, D), S = (B, D, E)\n\nRelational Algebra: r \\bowtie s \n\\Pi_{r.A, r.B, r.C, r.D, s.E}(\\sigma_{r.B = s.B \\land r.D = s.D}(r \\times s))\n\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r \\exists q \\in s(t[A] = p[A] \\land t[B] = p[B] \\land t[C] = p[C] \\land t[D] = p[D] \\land t[E] = q[E] \\land p[B] = q[B] \\land p[D]=q[D])\\}\nDomain Relational Calculus: \\{&lt; a, b, c, d, e &gt; \\mid &lt;a, b, c, d&gt; \\in r \\land &lt;b, d, e&gt; \\in s\\}\n\n\n\n\nR = (A, B), S = (B)\n\nRelational Algebra: r \\div s\nTuple Relational Calculus: \\{t \\mid \\exists p \\in r(\\forall q \\in s(p[B] = q[B] \\implies t[A] = p[A]))\\}\nDomain Relational Calculus: \\{&lt; a &gt; \\mid &lt; a &gt; \\in r \\land \\forall &lt;b&gt;(&lt; b &gt; \\in s \\implies &lt; a, b &gt; \\in r)\\}",
    "crumbs": [
      "DBMS",
      "Week 4"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html",
    "href": "pages/PDSA/w2.html",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Example of validating SIM cards against Aadhaar data\n\nNaive approach takes thousands of years\n\nSmarter solution takes a few minutes\n\n\nTwo main resources of interest\n\nRunning time - how long the algorithm takes\nSpace - memory requirement\n\nTime depends on processing power\n\nImpossible to change for given hardware\nEnhancing hardware has only a limited impact at a practical level\n\nStorage is limited by available memory\n\nEasier to configure, augment\n\nTypically, we focus on time rather than space\n\n\n\n\n\nRunning time depends on input size\n\nLarger arrays will take longer to sort\n\nMeasure time efficiency as a function of input size\n\nInput size n\nRunning time t(n)\n\nDifferent inputs of the same size n can have different running times\n\nExample 1: SIM cards vs Aadhaar cards - n \\approx 10^9 - number of cards - Naive algorithm: t(n) \\approx n^2 - Clever algorithm: t(n) \\approx n \\log_{2} n - log_{2}n - number of times you need to divide n by 2 to reach 1 - log_{2}n = k \\implies n = 2^k\n\n\n\n\n\nWhen comparing t(n), focus on the order of magnitude\n\nIgnore constants factors\n\nf(n) = n^3 eventually grows faster than g(n) = 5000n^2\n\nFor small values of n, f(n) &lt; g(n)\nAfter n=5000, f(n) overtakes g(n)\n\nAsymptotic complexity\n\nWhat happens in the limit as n becomes large\n\nTypical growth functions\n\nIs t(n) proportional to \\log n, …, n^2, n^3, …, 2^n?\n\nNote: \\log n means \\log_{2}n by default\n\nLogarithmic, polynomial, exponential, …\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput size\n\\log n\nn\nn \\log n\nn^2\nn^3\n2^n\nn!\n\n\n\n\n10\n3.3\n10\n33\n100\n1000\n1000\n10^6\n\n\n100\n6.6\n100\n660\n10^4\n10^6\n10^{30}\n10^{157}\n\n\n1000\n10\n1000\n10^4\n10^6\n10^9\n-\n-\n\n\n10^4\n13\n10^4\n10^5\n10^8\n10^{12}\n-\n-\n\n\n10^5\n17\n10^5\n10^6\n10^{10}\n-\n-\n-\n\n\n10^6\n20\n10^6\n10^7\n10^{12}\n-\n-\n-\n\n\n10^7\n23\n10^7\n10^8\n-\n-\n-\n-\n\n\n10^8\n27\n10^8\n10^9\n-\n-\n-\n-\n\n\n10^9\n30\n10^9\n10^{10}\n-\n-\n-\n-\n\n\n10^{10}\n33\n10^{10}\n10^{11}\n-\n-\n-\n-\n\n\n\n\n\n\n\nAnalysis should be independent of the underlying hardware\n\nDon’t use actual time\nMeasure in terms of basic operations\n\nTypical basic operations\n\nCompare two values\nAssign a value to a variable\n\nExchange a pair of values?\n\n\n(x,y)=(y,x)\n\nt=x\nx=y\ny=t\n\n\n\nIf we ignore constants, focus on orders of magnitude, both are within a factor of 3\nNeed not be very precise about defining basic operations\n\n\n\n\n\n\nTypically a natural parameter\n\nSize of a list/array that we want to search or sort\nNumber of objects we want to rearrange\nNumber of vertices and number of edges in a graph\n\nWhat about numeric problems? Is n a prime?\n\nMagnitude of n is not the correct measure\nArithmetic operations are performed digit by digit\n\nAddition with carry, subtraction with borrow, multiplication, long division…\n\nNumber of digits is a natural measure of input size\n\nSame as log_{b}n, when we write n in base b\n\n\n\n\n\n\n\nPerformance varies across input instances\n\nBy luck, the value we are searching for is the first element we examine in an array\n\nIdeally, want the “average” behaviour\n\nDifficult to compute\nAverage over what? Are all inputs equally likely?\nNeed a probability distribution over inputs\n\nInstead, worst case input\n\nInput that forces algorithm to take the longest time\n\nSearch for a value that is not present in an unsorted list\nMust scan all elements\n\nPessimistic - worst case may be rare\nUpper bound for worst case guarantees good performance\n\n\n\n\n\n\nTwo important parameters when measuring algorithm performance\n\nRunning time, memory requirement (space)\nWe mainly focus on time\n\nRunning time t(n) is a function of input size n\n\nCompare algorithms by their order of magnitude\nAsymptotic complexity, as n becomes large\n\nFrom running time, we can estimate feasible input sizes\nWe focus on worst case inputs\n\nPessimistic, but easier to compute than average case\nUpper bound on worst case gives us an overall guarantee of performance"
  },
  {
    "objectID": "pages/PDSA/w2.html#measuring-performance",
    "href": "pages/PDSA/w2.html#measuring-performance",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Example of validating SIM cards against Aadhaar data\n\nNaive approach takes thousands of years\n\nSmarter solution takes a few minutes\n\n\nTwo main resources of interest\n\nRunning time - how long the algorithm takes\nSpace - memory requirement\n\nTime depends on processing power\n\nImpossible to change for given hardware\nEnhancing hardware has only a limited impact at a practical level\n\nStorage is limited by available memory\n\nEasier to configure, augment\n\nTypically, we focus on time rather than space"
  },
  {
    "objectID": "pages/PDSA/w2.html#input-size",
    "href": "pages/PDSA/w2.html#input-size",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Running time depends on input size\n\nLarger arrays will take longer to sort\n\nMeasure time efficiency as a function of input size\n\nInput size n\nRunning time t(n)\n\nDifferent inputs of the same size n can have different running times\n\nExample 1: SIM cards vs Aadhaar cards - n \\approx 10^9 - number of cards - Naive algorithm: t(n) \\approx n^2 - Clever algorithm: t(n) \\approx n \\log_{2} n - log_{2}n - number of times you need to divide n by 2 to reach 1 - log_{2}n = k \\implies n = 2^k"
  },
  {
    "objectID": "pages/PDSA/w2.html#orders-of-magnitude",
    "href": "pages/PDSA/w2.html#orders-of-magnitude",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "When comparing t(n), focus on the order of magnitude\n\nIgnore constants factors\n\nf(n) = n^3 eventually grows faster than g(n) = 5000n^2\n\nFor small values of n, f(n) &lt; g(n)\nAfter n=5000, f(n) overtakes g(n)\n\nAsymptotic complexity\n\nWhat happens in the limit as n becomes large\n\nTypical growth functions\n\nIs t(n) proportional to \\log n, …, n^2, n^3, …, 2^n?\n\nNote: \\log n means \\log_{2}n by default\n\nLogarithmic, polynomial, exponential, …\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput size\n\\log n\nn\nn \\log n\nn^2\nn^3\n2^n\nn!\n\n\n\n\n10\n3.3\n10\n33\n100\n1000\n1000\n10^6\n\n\n100\n6.6\n100\n660\n10^4\n10^6\n10^{30}\n10^{157}\n\n\n1000\n10\n1000\n10^4\n10^6\n10^9\n-\n-\n\n\n10^4\n13\n10^4\n10^5\n10^8\n10^{12}\n-\n-\n\n\n10^5\n17\n10^5\n10^6\n10^{10}\n-\n-\n-\n\n\n10^6\n20\n10^6\n10^7\n10^{12}\n-\n-\n-\n\n\n10^7\n23\n10^7\n10^8\n-\n-\n-\n-\n\n\n10^8\n27\n10^8\n10^9\n-\n-\n-\n-\n\n\n10^9\n30\n10^9\n10^{10}\n-\n-\n-\n-\n\n\n10^{10}\n33\n10^{10}\n10^{11}\n-\n-\n-\n-"
  },
  {
    "objectID": "pages/PDSA/w2.html#measuring-running-time",
    "href": "pages/PDSA/w2.html#measuring-running-time",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Analysis should be independent of the underlying hardware\n\nDon’t use actual time\nMeasure in terms of basic operations\n\nTypical basic operations\n\nCompare two values\nAssign a value to a variable\n\nExchange a pair of values?\n\n\n(x,y)=(y,x)\n\nt=x\nx=y\ny=t\n\n\n\nIf we ignore constants, focus on orders of magnitude, both are within a factor of 3\nNeed not be very precise about defining basic operations"
  },
  {
    "objectID": "pages/PDSA/w2.html#what-is-the-input-size",
    "href": "pages/PDSA/w2.html#what-is-the-input-size",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Typically a natural parameter\n\nSize of a list/array that we want to search or sort\nNumber of objects we want to rearrange\nNumber of vertices and number of edges in a graph\n\nWhat about numeric problems? Is n a prime?\n\nMagnitude of n is not the correct measure\nArithmetic operations are performed digit by digit\n\nAddition with carry, subtraction with borrow, multiplication, long division…\n\nNumber of digits is a natural measure of input size\n\nSame as log_{b}n, when we write n in base b"
  },
  {
    "objectID": "pages/PDSA/w2.html#which-inputs-should-we-consider",
    "href": "pages/PDSA/w2.html#which-inputs-should-we-consider",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Performance varies across input instances\n\nBy luck, the value we are searching for is the first element we examine in an array\n\nIdeally, want the “average” behaviour\n\nDifficult to compute\nAverage over what? Are all inputs equally likely?\nNeed a probability distribution over inputs\n\nInstead, worst case input\n\nInput that forces algorithm to take the longest time\n\nSearch for a value that is not present in an unsorted list\nMust scan all elements\n\nPessimistic - worst case may be rare\nUpper bound for worst case guarantees good performance"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary",
    "href": "pages/PDSA/w2.html#summary",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Two important parameters when measuring algorithm performance\n\nRunning time, memory requirement (space)\nWe mainly focus on time\n\nRunning time t(n) is a function of input size n\n\nCompare algorithms by their order of magnitude\nAsymptotic complexity, as n becomes large\n\nFrom running time, we can estimate feasible input sizes\nWe focus on worst case inputs\n\nPessimistic, but easier to compute than average case\nUpper bound on worst case gives us an overall guarantee of performance"
  },
  {
    "objectID": "pages/PDSA/w2.html#orders-of-magnitude-1",
    "href": "pages/PDSA/w2.html#orders-of-magnitude-1",
    "title": "PDSA - Week 2",
    "section": "Orders of magnitude",
    "text": "Orders of magnitude\n\nWhen comparing t(n), focus on orders of magnitude\n\nIgnore constant factors\n\nf(n)=n^3 eventually dominates g(n)=5000n^2\nHow do we compare functions with respect to orders of magnitude?"
  },
  {
    "objectID": "pages/PDSA/w2.html#upper-bounds",
    "href": "pages/PDSA/w2.html#upper-bounds",
    "title": "PDSA - Week 2",
    "section": "Upper bounds",
    "text": "Upper bounds\n\nf(x) is said to be O(g(x)) if we can find constants c and x_0 such that c \\cdot g(x) is an upper bound for f(x) for x beyond x_0\nf(x) \\leq cg(x) for every x \\geq x_0"
  },
  {
    "objectID": "pages/PDSA/w2.html#examples",
    "href": "pages/PDSA/w2.html#examples",
    "title": "PDSA - Week 2",
    "section": "Examples",
    "text": "Examples\n\n100n+5 is O(n^2)\n\n100n+5 \\leq 100n+n=101n, for n \\geq 5\n101n \\leq 101n^2\nChoose n_0=5 and c=101\n\nAlternatively\n\n100n+5 \\leq 100n +5n =105n, for n \\geq 1\n105n \\leq 105n^2\nChoose n_0=1 and c=105\n\nChoice of c and n_0 is not unique\n100n^2 + 20n +5 is O(n^2)\n\n100n^2 + 20n +5 \\leq 100n^2 + 20n^2 +5n^2, for n \\geq 1\n100n^2 + 20n^2 +5n^2 \\leq 125n^2, for n \\geq 1\nChoose n_0=1 and c=125\n\nWhat matters is the highest term\n\n20n+5 is dominated by 100n^2\n\nn^3 is not O(n^2)\n\nNo matter what c we choose, cn^2 will be dominated by n^3 for n \\geq c"
  },
  {
    "objectID": "pages/PDSA/w2.html#useful-properties",
    "href": "pages/PDSA/w2.html#useful-properties",
    "title": "PDSA - Week 2",
    "section": "Useful properties",
    "text": "Useful properties\n\nIf f_{1}(n) is O(g_{1}(n)) and f_{2}(n) is O(g_{2}(n)), then f_{1}(n)+f_{2}(n) is O(\\max(g_{1}(n),g_{2}(n)))\nProof\n\nf_{1}(n) \\leq c_{1}g_{1}(n) for n \\geq n_{1}\nf_{2}(n) \\leq c_{2}g_{2}(n) for n \\geq n_{2}\nLet c_{3} = \\max(c_{1},c_{2}), n_{3} = \\max(n_{1},n_{2})\nFor n \\geq n_{3}, f_{1}(n)+f_{2}(n)\n\n\\leq c_{1}g_{1}(n)+c_{2}g_{2}(n)\n\\leq c_{3}g_{1}(n)+c_{3}g_{2}(n)\n\\leq 2c_{3}(\\max(g_{1}(n),g_{2}(n)))\n\n\nAlgorithm has two phases\n\nPhase A takes time O(g_{A}(n))\nPhase B takes time O(g_{B}(n))\n\nAlgorithm as a whole takes time \\max(O(g_{A}(n),g_{B}(n)))\nLeast efficient phase is the upper bound for the whole algorithm"
  },
  {
    "objectID": "pages/PDSA/w2.html#lower-bounds",
    "href": "pages/PDSA/w2.html#lower-bounds",
    "title": "PDSA - Week 2",
    "section": "Lower bounds",
    "text": "Lower bounds\n\nf(x) is said to be \\Omega(g(x)) if we can find constants c and x_0 such that c \\cdot g(x) is a lower bound for f(x) for x beyond x_0\n\nf(x) \\geq cg(x) for every x \\geq x_0\n\nn^3 is \\Omega(n^2)\n\nn^3 &gt; n^2 for all n, so n_0=1, c=1\n\nTypically we establish lower bounds for a problem rather than an individual algorithm\n\nIf we sort a list by comparing elements and swapping them, we require \\Omega(n \\log n) comparisons\nThis is independent of the sorting algorithm"
  },
  {
    "objectID": "pages/PDSA/w2.html#tight-bounds",
    "href": "pages/PDSA/w2.html#tight-bounds",
    "title": "PDSA - Week 2",
    "section": "Tight bounds",
    "text": "Tight bounds\n\nf(x) is said to be \\Theta(g(x)) if f(x) is both O(g(x)) and \\Omega(g(x))\n\nFind constants c_1, c_2, x_0 such that c_{1}g(x) \\leq f(x) \\leq c_{2}g(x) for every x \\geq x_0\n\n\\frac{n(n-1)}{2} is \\Theta(n^2)\n\nUpper bound\n\n\\frac{n(n-1)}{2} = \\frac{n^2}{2} - \\frac{n}{2} \\leq \\frac{n^2}{2} for all n \\geq 0\n\nLower bound\n\n\\frac{n(n-1)}{2} = \\frac{n^2}{2} - \\frac{n}{2} \\geq \\frac{n^2}{2} - (\\frac{n}{2} \\times \\frac{n}{2}) \\geq \\frac{n^2}{4} for n \\geq 2\n\nChoose n_0 = 2, c_1 = \\frac{1}{4}, c_2 = \\frac{1}{2}"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary-1",
    "href": "pages/PDSA/w2.html#summary-1",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nf(n) is O(g(n)) means f(n) is bounded above by g(n)\n\nUseful to describe asymptotic worst case running time\n\nf(n) is \\Omega(g(n)) means f(n) is bounded below by g(n)\n\nTypically used for a problem as a whole, rather than an individual algorithm\n\nf(n) is \\Theta(g(n)) means f(n) is bounded both above and below by g(n)\n\nWe have found an optimal algorithm for the problem"
  },
  {
    "objectID": "pages/PDSA/w2.html#example-1",
    "href": "pages/PDSA/w2.html#example-1",
    "title": "PDSA - Week 2",
    "section": "Example 1",
    "text": "Example 1\n\n\nFind the maximum element in a list\n\nInput size is the length of the list\nSingle loop scans all elements\nAlways takes n steps\nOverall time is O(n)\n\n\ndef maxElement(L):\n    maxval = L[0]\n    for i in range(len(L)):\n        if L[i] &gt; maxval:\n            maxval = L[i]\n    return maxval"
  },
  {
    "objectID": "pages/PDSA/w2.html#example-2",
    "href": "pages/PDSA/w2.html#example-2",
    "title": "PDSA - Week 2",
    "section": "Example 2",
    "text": "Example 2\n\n\nCheck whether a list contains duplicates\n\nInput size is the length of the list\nNested loop scans all pairs of elements\nA duplicate may be found in the very first iteration\nWorst case - no duplicates, both loops run fully\nTime is (n-1)+(n-2)+...+1=\\frac{n(n-1)}{2}\nOverall time is O(n^2)\n\n\ndef noDuplicates(L):\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            if L[i] == L[j]:\n                return False\n    return True"
  },
  {
    "objectID": "pages/PDSA/w2.html#example-3",
    "href": "pages/PDSA/w2.html#example-3",
    "title": "PDSA - Week 2",
    "section": "Example 3",
    "text": "Example 3\n\n\nMatrix multiplication\n\nMatrix is represented as a list of lists\n\n\\begin{pmatrix}1 & 2 & 3\\\\4 & 5 & 6\\end{pmatrix}\n[[1, 2, 3], [4, 5, 6]]\n\nInput matrices have size m \\times n, n \\times p\nOutput matrix is m \\times p\nThree nested loops\nOverall time is O(mnp) - O(n^3) if both are n \\times n\n\n\ndef matrixMultiply(A, B):\n    (m, n, p) = (len(A), len(B), len(B[0]))\n    C = [[0 for i in range(p)]\n            for j in range(m)]\n    for i in range(m):\n        for j in range(p):\n            for k in range(n):\n                C[i][j] = C[i][j] + A[i][k] * B[k][j]\n    return C"
  },
  {
    "objectID": "pages/PDSA/w2.html#example-4",
    "href": "pages/PDSA/w2.html#example-4",
    "title": "PDSA - Week 2",
    "section": "Example 4",
    "text": "Example 4\n\n\nNumber of bits in binary representation of n\n\n\\log n steps for n to reach 1\nFor number theoretic problems, input size is number of digits\nThis algorithm is linear in input size\n\n\ndef numberOfBits(n):\n    count = 1\n    while n &gt; 1:\n        count += 1\n        n = n // 2\n    return count"
  },
  {
    "objectID": "pages/PDSA/w2.html#example-5",
    "href": "pages/PDSA/w2.html#example-5",
    "title": "PDSA - Week 2",
    "section": "Example 5",
    "text": "Example 5\nTowers of Hanoi\n\nThree pegs A, B, C\nMove n disks from A to B, use C as transit peg\nNever place a larger disk on a smaller one\nRecursive solution\n\nMove n-1 disks from A to C, use B as transit peg\nMove the largest disk from A to B\nMove n-1 disks from C to B, use A as transit peg\n\nRecurrence\n\nM(n) - number of moves to transfer n disks\nM(1) = 1\nM(n) = M(n-1) + 1 + M(n-1) = 2M(n-1)+1\n\nUnwind and solve \\begin{aligned}\n    M( n) & =\\ 2M( n-1) +1\\\\\n     & =\\ 2( 2M( n-2) +1) +1=\\ 2^{2} M( n-2) +( 2+1)\\\\\n     & =\\ 2^{2}( 2M( n-3) +1) +( 2+1) =\\ 2^{3} M( n-3) \\ +\\ ( 4+2+1)\\\\\n     & \\dotsc \\\\\n     & =\\ 2^{k} M( n-k) +\\left( 2^{k} -1\\right)\\\\\n     & \\dotsc \\\\\n     & =\\ 2^{n-1} M( 1) +\\left( 2^{n-1} -1\\right)\\\\\n     & =\\ 2^{n-1} +2^{n-1} -1\\\\\n     & =\\ 2^{n} -1\n    \\end{aligned}"
  },
  {
    "objectID": "pages/PDSA/w2.html#example-5-contd.",
    "href": "pages/PDSA/w2.html#example-5-contd.",
    "title": "PDSA - Week 2",
    "section": "Example 5 (contd.)",
    "text": "Example 5 (contd.)\n\nRecurrence\n\nM(n) - number of moves to transfer n disks\nM(1) = 1\nM(n) = M(n-1) + 1 + M(n-1) = 2M(n-1)+1\n\nUnwind and solve \\begin{aligned}\n    M( n) & =\\ 2M( n-1) +1\\\\\n     & =\\ 2( 2M( n-2) +1) +1=\\ 2^{2} M( n-2) +( 2+1)\\\\\n     & =\\ 2^{2}( 2M( n-3) +1) +( 2+1) =\\ 2^{3} M( n-3) \\ +\\ ( 4+2+1)\\\\\n     & \\dotsc \\\\\n     & =\\ 2^{k} M( n-k) +\\left( 2^{k} -1\\right)\\\\\n     & \\dotsc \\\\\n     & =\\ 2^{n-1} M( 1) +\\left( 2^{n-1} -1\\right)\\\\\n     & =\\ 2^{n-1} +2^{n-1} -1\\\\\n     & =\\ 2^{n} -1\n    \\end{aligned}"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary-2",
    "href": "pages/PDSA/w2.html#summary-2",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nIterative programs\n\nFocus on loops\n\nRecursive programs\n\nWrite and solve a recurrence\n\nNeed to be clear about accounting for “basic” operations"
  },
  {
    "objectID": "pages/PDSA/w2.html#search-problem",
    "href": "pages/PDSA/w2.html#search-problem",
    "title": "PDSA - Week 2",
    "section": "Search problem",
    "text": "Search problem\n\n\n\nIs a value v present in a list l?\nNaive solution scans the list\nInput size n, the length of the list\nWorst case is when v is not in l\nWorst case complexity is O(n)\n\n\ndef naivesearch(v, l):\n    for x in l:\n        if v == x:\n            return True\n    return False"
  },
  {
    "objectID": "pages/PDSA/w2.html#searching-a-sorted-list",
    "href": "pages/PDSA/w2.html#searching-a-sorted-list",
    "title": "PDSA - Week 2",
    "section": "Searching a sorted list",
    "text": "Searching a sorted list\n\n\n\nWhat if l is sorted in ascending order?\nCompare v with the midpoint of l\n\nIf midpoint is v, the value is found\nIf v is less than midpoint, search the first half\nIf v greater than midpoint, search the second half\nStop when the interval to search becomes empty\n\n\n\ndef binarysearch(v, l):\n    if l == []:\n        return False\n    m = len(l) // 2\n    if v == l[m]:\n        return True\n    if v &lt; l[m]:\n        return binarysearch(v, l[:m])\n    else:\n        return binarysearch(v, l[m+1:])"
  },
  {
    "objectID": "pages/PDSA/w2.html#binary-search",
    "href": "pages/PDSA/w2.html#binary-search",
    "title": "PDSA - Week 2",
    "section": "Binary search",
    "text": "Binary search\n\nHow long does this take?\n\nEach call halves the interval to search\nStop when the interval becomes empty\n\n\\log n - number of times to divide n by 2 to reach 1\n\n1//2 =0, so next call reaches empty interval\n\nO(\\log n) steps"
  },
  {
    "objectID": "pages/PDSA/w2.html#alternative-calculation",
    "href": "pages/PDSA/w2.html#alternative-calculation",
    "title": "PDSA - Week 2",
    "section": "Alternative calculation",
    "text": "Alternative calculation\n\n\n\nT(n): the time to search a list of length n\n\nIf n=0, we exit, so T(0) = 1\nIf n&gt;0, T(n)=T(n//2)+1\n\nRecurrence for T(n)\n\nT(0) = 1\nT(n) = T(n//2) + 1, n&gt;0\n\nSolve by “unwinding” \n\\begin{aligned}\n    T( n) & =\\ T( n//2) +1\\\\\n     & =\\ ( T( n//4) +1) +1=\\ T\\left( n//2^{2}\\right) +\\underbrace{1+1}_{2}\\\\\n     & =\\ \\dotsc \\\\\n     & =\\ T\\left( n//2^{k}\\right) +\\underbrace{1+\\dots +1} _{k}\\\\\n     & =\\ T( 1) +k,\\ \\text{for} \\ k=\\log n\\\\\n     & =\\ ( T( 0) +1) +\\log n\\\\\n     & =\\ 2+\\log n\n    \\end{aligned}\n\n\n\ndef bsearch(v, l):\n    if l == []:\n        return False\n    m = len(l) // 2\n    if v == l[m]:\n        return True\n    if v &lt; l[m]:\n        return bsearch(v, l[:m])\n    else:\n        return bsearch(v, l[m+1:])"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary-3",
    "href": "pages/PDSA/w2.html#summary-3",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nSearch in an unsorted list takes time O(n)\n\nNeed to scan the entire list\nWorst case is when the value is not in the list\n\nFor a sorted list, binary search takes time O(\\log n)\n\nHalve the interval to search each time\n\nIn a sorted list, we can determine that v is absent by examining just \\log n values!"
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list",
    "href": "pages/PDSA/w2.html#sorting-a-list",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n\n\n\nSorting a list makes many other computations easier\n\nBinary search\nFinding the median\nChecking for duplicates\nBuilding a histogram\n\nHow do we sort a list?\nYou are the TA for a course\n\nInstructor has a pile of evaluated exam papers\nPapers in random order of marks\nYour task is to arrange the papers in descending order of marks\n\n\n\n\nStrategy 1\n\nScan the entire pile and find the paper with the minimum marks\nMove this paper to a new pile\nRepeat with the remaining papers\n\nAdd the paper with the next minimum marks to the second pile each time\n\nEventually, the new pile is sorted in descending order of marks"
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-1",
    "href": "pages/PDSA/w2.html#sorting-a-list-1",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n\n\n\nYou are the TA for a course\n\nInstructor has a pile of evaluated exam papers\nPapers in random order of marks\nYour task is to arrange the papers in descending order of marks\n\n\n\n\nStrategy 2\n\nMove the first paper to a new pile\nSecond paper\n\nLower marks than the first paper? Place it below the first paper in new pile\nHigher marks than the first paper? Place it above the first paper in new pile\n\nThird paper\n\nInsert into correct position with respect to the first two papers\n\nDo this for the remaining papers\n\nInsert each one into the correct position in the second pile"
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-2",
    "href": "pages/PDSA/w2.html#sorting-a-list-2",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n\n\n\nYou are the TA for a course\n\nInstructor has a pile of evaluated exam papers\nPapers in random order of marks\nYour task is to arrange the papers in descending order of marks\n\n\n\n\nStrategy 2\n\nMove the first paper to a new pile\nSecond paper\n\nLower marks than the first paper? Place it below the first paper in new pile\nHigher marks than the first paper? Place it above the first paper in new pile\n\nThird paper\n\nInsert into correct position with respect to the first two papers\n\nDo this for the remaining papers\n\nInsert each one into the correct position in the second pile",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-3",
    "href": "pages/PDSA/w2.html#sorting-a-list-3",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-4",
    "href": "pages/PDSA/w2.html#sorting-a-list-4",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n74",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-5",
    "href": "pages/PDSA/w2.html#sorting-a-list-5",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 74",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-6",
    "href": "pages/PDSA/w2.html#sorting-a-list-6",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-7",
    "href": "pages/PDSA/w2.html#sorting-a-list-7",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 55 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#selection-sort",
    "href": "pages/PDSA/w2.html#selection-sort",
    "title": "PDSA - Week 2",
    "section": "Selection Sort",
    "text": "Selection Sort\n\n\n\nSelect the next element in sorted order\nAppend it to the final sorted list\nAvoid using a second list\n\nSwap the minimum element into the first position\nSwap the second minimum element into the second position\n…\n\nEventually the list is rearranged in place in ascending order\n\n\ndef SelectionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        mpos = i\n        # mpos: position of minimum in L[i:]\n        for j in range(i+1,n):\n            if L[j] &lt; L[mpos]:\n            mpos = j\n        # L[mpos] : smallest value in L[i:]\n        # Exchange L[mpos] and L[i]\n        (L[i],L[mpos]) = (L[mpos],L[i])\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2.html#analysis-of-selection-sort",
    "href": "pages/PDSA/w2.html#analysis-of-selection-sort",
    "title": "PDSA - Week 2",
    "section": "Analysis of Selection Sort",
    "text": "Analysis of Selection Sort\n\n\n\nCorrectness follows from the invariant\nEfficiency\n\nOuter loop runs n times\nInner loop runs n-i times to find minimum in L[i:]\nT(n) = n + (n-1) + (n-2) + \\ldots + 1\nT(n) = \\frac{n(n+1)}{2}\n\nSelection sort is O(n^2)\n\n\ndef SelectionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        mpos = i\n        # mpos: position of minimum in L[i:]\n        for j in range(i+1,n):\n            if L[j] &lt; L[mpos]:\n            mpos = j\n        # L[mpos] : smallest value in L[i:]\n        # Exchange L[mpos] and L[i]\n        (L[i],L[mpos]) = (L[mpos],L[i])\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary-4",
    "href": "pages/PDSA/w2.html#summary-4",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nSelection sort is an intuitive algorithm to sort a list\nRepeatedly find the minimum (or maximum) and append to sorted list\nWorst case complexity is O(n^2)\n\nEvery input takes this much time\nNo advantage even if list is arranged carefully before sorting"
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-8",
    "href": "pages/PDSA/w2.html#sorting-a-list-8",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-9",
    "href": "pages/PDSA/w2.html#sorting-a-list-9",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 64 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-10",
    "href": "pages/PDSA/w2.html#sorting-a-list-10",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n74",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-11",
    "href": "pages/PDSA/w2.html#sorting-a-list-11",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 74",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-12",
    "href": "pages/PDSA/w2.html#sorting-a-list-12",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-13",
    "href": "pages/PDSA/w2.html#sorting-a-list-13",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 55 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-14",
    "href": "pages/PDSA/w2.html#sorting-a-list-14",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#sorting-a-list-15",
    "href": "pages/PDSA/w2.html#sorting-a-list-15",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 64 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#insertion-sort",
    "href": "pages/PDSA/w2.html#insertion-sort",
    "title": "PDSA - Week 2",
    "section": "Insertion Sort",
    "text": "Insertion Sort\n\n\n\nStart building a new sorted list\nPick next element and insert it into the sorted list\nAn iterative formulation\n\nAssume L[:i] is sorted\nInsert L[i] in L[:i]\n\nA recursive formulation\n\nInductively sort L[:i]\nInsert L[i] in L[:i]\n\n\n\ndef InsertionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        # Move L[i] to correct position in L[:i]\n        j = i\n        while(j &gt; 0 and L[j] &lt; L[j-1]):\n            (L[j],L[j-1]) = (L[j-1],L[j])\n            j = j-1\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2.html#analysis-of-iterative-insertion-sort",
    "href": "pages/PDSA/w2.html#analysis-of-iterative-insertion-sort",
    "title": "PDSA - Week 2",
    "section": "Analysis of iterative Insertion Sort",
    "text": "Analysis of iterative Insertion Sort\n\n\n\nCorrectness follows from the invariant\nEfficiency\n\nOuter loop iterates n times\nInner loop: i steps to insert L[i] in L[:i]\nT(n) = 0 + 1 + · · · + (n − 1)\nT(n) = \\frac{n(n-1)}{2}\n\nInsertion sort is O(n^2)\n\n\ndef InsertionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        # Move L[i] to correct position in L[:i]\n        j = i\n        while(j &gt; 0 and L[j] &lt; L[j-1]):\n            (L[j],L[j-1]) = (L[j-1],L[j])\n            j = j-1\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2.html#analysis-of-recursive-insertion-sort",
    "href": "pages/PDSA/w2.html#analysis-of-recursive-insertion-sort",
    "title": "PDSA - Week 2",
    "section": "Analysis of recursive Insertion Sort",
    "text": "Analysis of recursive Insertion Sort\n\n\n\nFor input of size n, let\n\nTI(n) be the time taken by Insert\nTS(n) be the time taken by ISort\n\nFirst calculate TI(n) for Insert\n\nTI(0) = 1\nTI(n) = TI(n − 1) + 1\nUnwind to get TI(n) = n\n\nSet up a recurrence for TS(n)\n\nTS(0) = 1\nTS(n) = TS(n − 1) + TI(n − 1)\n\nUnwind to get 1 + 2 + · · · + n − 1\n\n\ndef Insert(L,v):\n    n = len(L)\n    if n == 0:\n        return([v])\n    if v &gt;= L[-1]:\n        return(L+[v])\n    else:\n        return(Insert(L[:-1],v)+L[-1:])\n\ndef ISort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    L = Insert(ISort(L[:-1]),L[-1])\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary-5",
    "href": "pages/PDSA/w2.html#summary-5",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nInsertion sort is another intuitive algorithm to sort a list\nCreate a new sorted list\nRepeatedly insert elements into the sorted list\nWorst case complexity is O(n^2)\n\nUnlike selection sort, not all cases take time n^2\nIf list is already sorted, Insert stops in 1 step\nOverall time can be close to O(n)"
  },
  {
    "objectID": "pages/PDSA/w2.html#beating-the-on2-barrier",
    "href": "pages/PDSA/w2.html#beating-the-on2-barrier",
    "title": "PDSA - Week 2",
    "section": "Beating the O(n^2) barrier",
    "text": "Beating the O(n^2) barrier\n\nBoth selection sort and insertion sort take time O(n^2)\nThis is infeasible for n &gt; 10000\nHow can we bring the complexity below O(n^2)?\n\n. . .\nStrategy 3\n\nDivide the list into two halves\nSeparately sort the left and right half\nCombine the two sorted halves to get a fully sorted list"
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n\nCombine two sorted lists A and B into a single sorted list C\n\nCompare first elements of A and B\nMove the smaller of the two to C\nRepeat till you exhaust A and B\n\nMerging A and B"
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists-1",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists-1",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists-2",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists-2",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists-3",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists-3",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists-4",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists-4",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists-5",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists-5",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55 64",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists-6",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists-6",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55 64 74",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#combining-two-sorted-lists-7",
    "href": "pages/PDSA/w2.html#combining-two-sorted-lists-7",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55 64 74 89",
    "crumbs": [
      "PDSA",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2.html#merge-sort",
    "href": "pages/PDSA/w2.html#merge-sort",
    "title": "PDSA - Week 2",
    "section": "Merge sort",
    "text": "Merge sort\n\n\n\nLet n be the length of L\nSort A[:n//2]\nSort A[n//2:]\nMerge the sorted halves into B\nHow do we sort A[:n//2] and A[n//2:]?\n\nRecursively, same strategy!\n\n\n\n\nDivide and conquer\n\nBreak up the problem into disjoint parts\nSolve each part separately\nCombine the solutions efficiently"
  },
  {
    "objectID": "pages/PDSA/w2.html#merging-sorted-lists",
    "href": "pages/PDSA/w2.html#merging-sorted-lists",
    "title": "PDSA - Week 2",
    "section": "Merging sorted lists",
    "text": "Merging sorted lists\n\n\n\nCombine two sorted lists A and B into C\n\nIf A is empty, copy B into C\nIf B is empty, copy A into C\nOtherwise, compare first elements of A and B\n\nMove the smaller of the two to C\n\nRepeat till all elements of A and B have been moved\n\n\n\ndef merge(A,B):\n    (m,n) = (len(A),len(B))\n    (C,i,j,k) = ([],0,0,0)\n    while k &lt; m+n:\n        if i == m:\n            C.extend(B[j:])\n            k = k + (n-j)\n        elif j == n:\n            C.extend(A[i:])\n            k = k + (m-i)\n        elif A[i] &lt; B[j]:\n            C.append(A[i])\n            (i,k) = (i+1,k+1)\n        else:\n            C.append(B[j])\n            (j,k) = (j+1,k+1)\n    return(C)"
  },
  {
    "objectID": "pages/PDSA/w2.html#merge-sort-1",
    "href": "pages/PDSA/w2.html#merge-sort-1",
    "title": "PDSA - Week 2",
    "section": "Merge sort",
    "text": "Merge sort\n\n\n\nTo sort A into B, both of length n\nIf n \\leq 1, nothing to be done\nOtherwise\n\nSort A[:n//2] into L\nSort A[n//2:] into R\nMerge L and R into B\n\n\n\ndef mergesort(A):\n    n = len(A)\n    if n &lt;= 1:\n        return(A)\n    L = mergesort(A[:n//2])\n    R = mergesort(A[n//2:])\n    B = merge(L,R)\n    return(B)"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary-6",
    "href": "pages/PDSA/w2.html#summary-6",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nMerge sort using divide and conquer to sort a list\nDivide the list into two halves\nSort each half\nMerge the sorted halves\nNext, we have to check that the complexity is less than O(n^2)"
  },
  {
    "objectID": "pages/PDSA/w2.html#merge-sort-2",
    "href": "pages/PDSA/w2.html#merge-sort-2",
    "title": "PDSA - Week 2",
    "section": "Merge sort",
    "text": "Merge sort\n\n\n\nTo sort A into B, both of length n\nIf n \\leq 1, nothing to be done\nOtherwise\n\nSort A[:n//2] into L\nSort A[n//2:] into R\nMerge L and R into B\n\n\n\n\nMerging two sorted lists A and B into C\n\nIf A is empty, copy B into C\nIf B is empty, copy A into C\nOtherwise, compare first elements of A and B\n\nMove the smaller of the two to C\n\nRepeat till all elements of A and B have been moved"
  },
  {
    "objectID": "pages/PDSA/w2.html#analysing-merge",
    "href": "pages/PDSA/w2.html#analysing-merge",
    "title": "PDSA - Week 2",
    "section": "Analysing merge",
    "text": "Analysing merge\n\n\n\nMerge A of length m, B of length n\nOutput list C has length m + n\nIn each iteration we add (at least) one element to C\nHence merge takes time O(m + n)\nRecall that m + n \\leq 2(max(m, n))\nIf m \\approx n, merge take time O(n)\n\n\ndef merge(A,B):\n    (m,n) = (len(A),len(B))\n    (C,i,j,k) = ([],0,0,0)\n    while k &lt; m+n:\n        if i == m:\n            C.extend(B[j:])\n            k = k + (n-j)\n        elif j == n:\n            C.extend(A[i:])\n            k = k + (m-i)\n        elif A[i] &lt; B[j]:\n            C.append(A[i])\n            (i,k) = (i+1,k+1)\n        else:\n            C.append(B[j])\n            (j,k) = (j+1,k+1)\n    return(C)"
  },
  {
    "objectID": "pages/PDSA/w2.html#analysing-mergesort",
    "href": "pages/PDSA/w2.html#analysing-mergesort",
    "title": "PDSA - Week 2",
    "section": "Analysing mergesort",
    "text": "Analysing mergesort\n\n\n\nLet T(n) be the time taken for input of size n\n\nFor simplicity, assume n = 2^k for some k\n\nRecurrence\n\nT(0) = T(1) = 1\nT(n) = 2T(\\frac{n}{2}) + n\n\nSolve two subproblems of size \\frac{n}{2}\nMerge the solutions in time \\frac{n}{2} + \\frac{n}{2} = n\n\n\nUnwind the recurrence to solve\n\n\ndef mergesort(A):\n    n = len(A)\n    if n &lt;= 1:\n        return(A)\n    L = mergesort(A[:n//2])\n    R = mergesort(A[n//2:])\n    B = merge(L,R)\n    return(B)"
  },
  {
    "objectID": "pages/PDSA/w2.html#analysing-mergesort-1",
    "href": "pages/PDSA/w2.html#analysing-mergesort-1",
    "title": "PDSA - Week 2",
    "section": "Analysing mergesort",
    "text": "Analysing mergesort\n\n\n\nRecurrence\n\nT(0) = T(1) = 1\nT(n) = 2T(\\frac{n}{2}) + n\n\nT(n) = 2T(\\frac{n}{2}) + n\n\n= 2[2T(\\frac{n}{4}) + \\frac{n}{2}] + n = 2^2T(\\frac{n}{2^2}) + 2n\n= 2^{2}[2T(\\frac{n}{2^3}) + \\frac{n}{2^2}] + 2n = 2^3T(\\frac{n}{2^3}) + 3n\n\\ldots\n= 2^kT(\\frac{n}{2^k}) + kn\n\nWhen k = \\log n, T(\\frac{n}{2^k})=T(1)=1\nT(n) = 2^{\\log n}T(1) + n\\log n = n + n\\log n\nHence merge sort is O(n\\log n)\n\n\ndef mergesort(A):\n    n = len(A)\n    if n &lt;= 1:\n        return(A)\n    L = mergesort(A[:n//2])\n    R = mergesort(A[n//2:])\n    B = merge(L,R)\n    return(B)"
  },
  {
    "objectID": "pages/PDSA/w2.html#summary-7",
    "href": "pages/PDSA/w2.html#summary-7",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nMerge sort takes time O(n \\log n) so can be used effectively on large inputs\nVariations on merge are possible\n\nUnion of two sorted lists — discard duplicates, if A[i] == B[j] move just one copy to C and increment both i and j\nIntersection of two sorted lists — when A[i] == B[j], move one copy to C, otherwise discard the smaller of A[i], B[j]\nList difference — elements in A but not in B\n\nMerge needs to create a new list to hold the merged elements\n\nNo obvious way to efficiently merge two lists in place\nExtra storage can be costly\n\nInherently recursive\n\nRecursive calls and returns are expensive"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html",
    "href": "pages/DBMS/w3-slides.html",
    "title": "Week 3 Slides",
    "section": "",
    "text": "!pip3 install ipython-sql\n%load_ext sql\n%reload_ext sql"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#select-distinct",
    "href": "pages/DBMS/w3-slides.html#select-distinct",
    "title": "Week 3 Slides",
    "section": "Select distinct",
    "text": "Select distinct\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has capacity less than 100 (removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT DISTINCT building\nFROM classroom\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#select-all",
    "href": "pages/DBMS/w3-slides.html#select-all",
    "title": "Week 3 Slides",
    "section": "Select all",
    "text": "Select all\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has a capacity of less than 100 (without removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT ALL building\nFROM classroom C\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\nWatson\n\n\n\n\n\n\nNote that duplicate retention is the default and hence it is a common practice to skip all immediately after select."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#cartesian-product",
    "href": "pages/DBMS/w3-slides.html#cartesian-product",
    "title": "Week 3 Slides",
    "section": "Cartesian product",
    "text": "Cartesian product\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFind the list of all students of departments which have a budget &lt; $0.1million\n\nSELECT name, budget\nFROM student, department\nWHERE student.dept_name = department.dept_name AND budget &lt; 100000;\n\n\n\n\n\nname\nbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query first generates every possible student-department pair, which is the Cartesian product of the student and department relations. Then, it filters out all the rows with student.dept_name = department.dept_name and department.budget &lt; 100000.\nThe common attribute dept_name in the resulting table is renamed using the relation name - student.dept_name and department.dept_name."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#rename-as-operation",
    "href": "pages/DBMS/w3-slides.html#rename-as-operation",
    "title": "Week 3 Slides",
    "section": "Rename AS Operation",
    "text": "Rename AS Operation\n\nThe same query above can be framed by renaming the tables as follows:\n\nSELECT S.name AS studentname, budget AS deptbudget\nFROM student AS S, department AS D\nWHERE S.dept_name = D.dept_name AND budget &lt; 100000;\n\n\n\n\n\nstudentname\ndeptbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query renames the relations student and department as S and D respectively\nIt also displays the attribute name as StudentName and budget as DeptBudget\nNote that the budget attribute does not have any prefix because it occurs only in the department relation."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#where-and-and-or",
    "href": "pages/DBMS/w3-slides.html#where-and-and-or",
    "title": "Week 3 Slides",
    "section": "Where: AND and OR",
    "text": "Where: AND and OR\n\nFrom the instructor and department relations, find out the names of all instructors whose department is Finance or whose department is in any of the following buildings: Watson, Taylor.\n\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\nSELECT name\nFROM instructor I, department D\nWHERE I.dept_name = D.dept_name\nAND (I.dept_name = 'Finance' OR building IN ('Watson', 'Taylor'));\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nEinstein\n\n\nGold\n\n\nKatz\n\n\nSingh\n\n\nCrick\n\n\nBrandt\n\n\nKim"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#string-operations",
    "href": "pages/DBMS/w3-slides.html#string-operations",
    "title": "Week 3 Slides",
    "section": "String Operations",
    "text": "String Operations\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the titles of all courses whose course_id has three alphabets indicating the department.\n\nSELECT title\nFROM course\nWHERE course_id LIKE '___-%';\n\n\n\n\n\ntitle\n\n\n\n\nIntro. to Biology\n\n\nGenetics\n\n\nComputational Biology\n\n\nInvestment Banking\n\n\nWorld History\n\n\nPhysical Principles\n\n\n\n\n\n\nThe course_id of each department either has 2 or 3 alphabets in the beginning, followed by a hypher and then followed by 3 digits. The above query returns the names of all courses whose course_id has 3 alphabets in the beginning."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#order-by",
    "href": "pages/DBMS/w3-slides.html#order-by",
    "title": "Week 3 Slides",
    "section": "Order By",
    "text": "Order By\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation in the table, obtain the list of all students in alphabetic order of departments and within each department, in decreasing order of total credits.\n\nSELECT name, dept_name, tot_cred\nFROM student\nORDER BY dept_name ASC, tot_cred DESC;\n\n\n\n\n\nname\ndept_name\ntot_cred\n\n\n\n\nTanaka\nBiology\n120\n\n\nZhang\nComp. Sci.\n102\n\n\nBrown\nComp. Sci.\n58\n\n\nWilliams\nComp. Sci.\n54\n\n\nShankar\nComp. Sci.\n32\n\n\nBourikas\nElec. Eng.\n98\n\n\nAoi\nElec. Eng.\n60\n\n\nChavez\nFinance\n110\n\n\nBrandt\nHistory\n80\n\n\nSanchez\nMusic\n38\n\n\nPeltier\nPhysics\n56\n\n\nLevy\nPhysics\n46\n\n\nSnow\nPhysics\n0\n\n\n\n\n\n\nThe list is first sorted in alphabetic order of dept name.\nWithin each dept, it is sorted in decreasing order of total credits."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#in-operator",
    "href": "pages/DBMS/w3-slides.html#in-operator",
    "title": "Week 3 Slides",
    "section": "In Operator",
    "text": "In Operator\n\n\n\n\n\nID\ncourse_id\nsec_id\nsemester\nyear\n\n\n\n\n10101\nCS-101\n1\nFall\n2017\n\n\n10101\nCS-315\n1\nSpring\n2018\n\n\n10101\nCS-347\n1\nFall\n2017\n\n\n12121\nFIN-201\n1\nSpring\n2018\n\n\n15151\nMU-199\n1\nSpring\n2018\n\n\n22222\nPHY-101\n1\nFall\n2017\n\n\n32343\nHIS-351\n1\nSpring\n2018\n\n\n45565\nCS-101\n1\nSpring\n2018\n\n\n45565\nCS-319\n1\nSpring\n2018\n\n\n76766\nBIO-101\n1\nSummer\n2017\n\n\n76766\nBIO-301\n1\nSummer\n2018\n\n\n83821\nCS-190\n1\nSpring\n2017\n\n\n83821\nCS-190\n2\nSpring\n2017\n\n\n83821\nCS-319\n2\nSpring\n2018\n\n\n98345\nEE-181\n1\nSpring\n2017\n\n\n\n\n\n\nFrom the teaches relation, find the IDs of all courses taught in the Fall or Spring of 2018.\n\nSELECT course_id\nFROM teaches\nWHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319\n\n\nCS-319\n\n\n\n\n\n\nNote: We can use distinct to remove duplicates.\n\nSELECT DISTINCT course_id\nFROM teaches\nWHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#set-operations-2-intersect",
    "href": "pages/DBMS/w3-slides.html#set-operations-2-intersect",
    "title": "Week 3 Slides",
    "section": "Set Operations (2): intersect",
    "text": "Set Operations (2): intersect\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the names of all instructors who taught in either the Computer Science department or the Finance department and whose salary is &lt; 80000.\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance')\nINTERSECT\nSELECT name\nFROM instructor\nWHERE salary &lt; 80000;\n\n\n\n\n\nname\n\n\n\n\nKatz\n\n\nSrinivasan\n\n\n\n\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance') AND salary &lt; 80000;\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nKatz"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#set-operations-3-except",
    "href": "pages/DBMS/w3-slides.html#set-operations-3-except",
    "title": "Week 3 Slides",
    "section": "Set Operations (3): except",
    "text": "Set Operations (3): except\n\nFrom the instructor relation, find the names of all instructors who taught in the Computer Science department or the Finance department and whose salary is either &gt;= 90000 or &lt;= 70000.\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance')\nEXCEPT\nSELECT name\nFROM instructor\nWHERE salary &lt; 90000 AND salary &gt; 70000;\n\n\n\n\n\nname\n\n\n\n\nBrandt\n\n\nSrinivasan\n\n\nWu\n\n\n\n\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance') AND (salary &gt;= 90000 OR salary &lt;= 70000);\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nBrandt"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#aggregate-functions-avg",
    "href": "pages/DBMS/w3-slides.html#aggregate-functions-avg",
    "title": "Week 3 Slides",
    "section": "Aggregate functions: avg",
    "text": "Aggregate functions: avg\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\nFrom the classroom relation, find the names and the average capacity of each building whose average capacity is greater than 25.\n\nSELECT building, AVG(capacity)\nFROM classroom\nGROUP BY building\nHAVING AVG(capacity) &gt; 25;\n\n\n\n\n\nbuilding\nAVG(capacity)\n\n\n\n\nPackard\n500.0\n\n\nTaylor\n70.0\n\n\nWatson\n40.0"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#aggregate-functions-2-min",
    "href": "pages/DBMS/w3-slides.html#aggregate-functions-2-min",
    "title": "Week 3 Slides",
    "section": "Aggregate functions (2): min",
    "text": "Aggregate functions (2): min\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the least salary drawn by any instructor among all the instructors.\n\nSELECT MIN(salary) AS least_salary\nFROM instructor;\n\n\n\n\n\nleast_salary\n\n\n\n\n40000"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#aggregate-functions-3-max",
    "href": "pages/DBMS/w3-slides.html#aggregate-functions-3-max",
    "title": "Week 3 Slides",
    "section": "Aggregate functions (3): max",
    "text": "Aggregate functions (3): max\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation, find the maximum credits obtained by any student among all the students.\n\nSELECT MAX(tot_cred) AS max_credits\nFROM student;\n\n\n\n\n\nmax_credits\n\n\n\n\n120"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#aggregate-functions-4-count",
    "href": "pages/DBMS/w3-slides.html#aggregate-functions-4-count",
    "title": "Week 3 Slides",
    "section": "Aggregate functions (4): count",
    "text": "Aggregate functions (4): count\n\n\n\n\n\ncourse_id\nsec_id\nsemester\nyear\nbuilding\nroom_number\ntime_slot_id\n\n\n\n\nBIO-101\n1\nSummer\n2017\nPainter\n514\nB\n\n\nBIO-301\n1\nSummer\n2018\nPainter\n514\nA\n\n\nCS-101\n1\nFall\n2017\nPackard\n101\nH\n\n\nCS-101\n1\nSpring\n2018\nPackard\n101\nF\n\n\nCS-190\n1\nSpring\n2017\nTaylor\n3128\nE\n\n\nCS-190\n2\nSpring\n2017\nTaylor\n3128\nA\n\n\nCS-315\n1\nSpring\n2018\nWatson\n120\nD\n\n\nCS-319\n1\nSpring\n2018\nWatson\n100\nB\n\n\nCS-319\n2\nSpring\n2018\nTaylor\n3128\nC\n\n\nCS-347\n1\nFall\n2017\nTaylor\n3128\nA\n\n\nEE-181\n1\nSpring\n2017\nTaylor\n3128\nC\n\n\nFIN-201\n1\nSpring\n2018\nPackard\n101\nB\n\n\nHIS-351\n1\nSpring\n2018\nPainter\n514\nC\n\n\nMU-199\n1\nSpring\n2018\nPackard\n101\nD\n\n\nPHY-101\n1\nFall\n2017\nWatson\n100\nA\n\n\n\n\n\n\nFrom the section relation, find the number of courses run in each building.\n\nSELECT building, COUNT(course_id) AS course_count\nFROM section\nGROUP BY building;\n\n\n\n\n\nbuilding\ncourse_count\n\n\n\n\nPackard\n4\n\n\nPainter\n3\n\n\nTaylor\n5\n\n\nWatson\n3"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#aggregate-functions-5-sum",
    "href": "pages/DBMS/w3-slides.html#aggregate-functions-5-sum",
    "title": "Week 3 Slides",
    "section": "Aggregate functions (5): sum",
    "text": "Aggregate functions (5): sum\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the total credits offered by each department.\n\nSELECT dept_name, SUM(credits) AS sum_credits\nFROM course\nGROUP BY dept_name;\n\n\n\n\n\ndept_name\nsum_credits\n\n\n\n\nBiology\n11\n\n\nComp. Sci.\n17\n\n\nElec. Eng.\n3\n\n\nFinance\n3\n\n\nHistory\n3\n\n\nMusic\n3\n\n\nPhysics\n4"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#nested-subqueries",
    "href": "pages/DBMS/w3-slides.html#nested-subqueries",
    "title": "Week 3 Slides",
    "section": "Nested Subqueries",
    "text": "Nested Subqueries\n\nSQL provides a mechanism for nesting of subqueries\nA subquery is a select-from-where expression that is nested within another query\nThe nesting can be done in the following SQL query \\[ \\text{select } A_1, A_2, ..., A_n \\] \\[ \\text{from } r_1, r_2, ..., r_m \\] \\[ \\text{where } P \\] as follows:\n\n\\(A_i\\) can be a subquery that generates a single value\n\\(r_i\\) can be replaced by any valid subquery\n\\(P\\) can be replaced with an expressionm of the form:\n\\(B \\text{ &lt;operation&gt;}\\) (subquery)\nwhere \\(B\\) is an attribute and \\(\\text{&lt;operation&gt;}\\) to be defined later."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#subqueries-in-the-where-clause",
    "href": "pages/DBMS/w3-slides.html#subqueries-in-the-where-clause",
    "title": "Week 3 Slides",
    "section": "Subqueries in the Where Clause",
    "text": "Subqueries in the Where Clause\n\nTypical use of subqueries is to perform tests:\n\nFor set membership\nFor set comparisons\nFor set cardinality"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#set-membership",
    "href": "pages/DBMS/w3-slides.html#set-membership",
    "title": "Week 3 Slides",
    "section": "Set Membership",
    "text": "Set Membership\n\nFind courses offered in Fall 2009 and in Spring 2010 (intersect example)\n\nselect distinct course_id\nfrom section\nwhere semester = 'Fall' and year = 2017 and\ncourse_id in (select course_id\n              from section\n              where semester = 'Spring' and year = 2018);\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-347\n\n\nPHY-101"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#set-membership-2",
    "href": "pages/DBMS/w3-slides.html#set-membership-2",
    "title": "Week 3 Slides",
    "section": "Set Membership (2)",
    "text": "Set Membership (2)\n\nFind the total number of (distinct) students who have taken course sections taught by instructor with ID ‘10101’\n\nselect count(distinct ID)\nfrom takes\nwhere (course_id, sec_id, semester, year) in\n    (select course_id, sec_id, semester, year\n    from teaches\n    where teaches.ID = '10101');\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#set-comparison---some-clause",
    "href": "pages/DBMS/w3-slides.html#set-comparison---some-clause",
    "title": "Week 3 Slides",
    "section": "Set Comparison - “some” Clause",
    "text": "Set Comparison - “some” Clause\n\nFind the names of instructors with salary greater than that of some (at least one) instructor in the Biology department\n\nselect distinct T.name\nfrom instructor T, instructor S\nwhere T.salary &gt; S.salary and S.dept_name = 'Biology';\n\nSame query using some clause\n\nselect name\nfrom instructor\nwhere salary &gt; some (select salary\n                    from instructor\n                    where dept_name = 'Biology');"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#definition-of-some-clause",
    "href": "pages/DBMS/w3-slides.html#definition-of-some-clause",
    "title": "Week 3 Slides",
    "section": "Definition of “some” Clause",
    "text": "Definition of “some” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) some \\(r \\Leftrightarrow \\exists t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nsome represents existential quantification\n\n(5 &lt; some {0, 5, 6}) = True\n(5 &lt; some {0, 5}) = False\n(5 = some {0, 5}) = True\n(5 \\(\\neq\\) some {0, 5}) = False\n(= some) \\(\\equiv\\) in\nHowever, (\\(\\neq\\) some) \\(\\equiv\\) not in"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#set-comparison---all-clause",
    "href": "pages/DBMS/w3-slides.html#set-comparison---all-clause",
    "title": "Week 3 Slides",
    "section": "Set Comparison - “all” Clause",
    "text": "Set Comparison - “all” Clause\n\nFind the names of all instructors with salary greater than that of all instructors in the Biology department\n\nselect name\nfrom instructor\nwhere salary &gt; all (select salary\n                    from instructor\n                    where dept_name = 'Biology');"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#definition-of-all-clause",
    "href": "pages/DBMS/w3-slides.html#definition-of-all-clause",
    "title": "Week 3 Slides",
    "section": "Definition of “all” Clause",
    "text": "Definition of “all” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) all \\(r \\Leftrightarrow \\forall t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nall represents universal quantification\n\n(5 &lt; all {0, 5, 6}) = False\n(5 &lt; all {6, 10}) = True\n(5 = all {0, 5}) = False\n(5 \\(\\neq\\) all {4, 6}) = True\n(\\(\\neq\\) all) \\(\\equiv\\) not in\nHowever, (\\(=\\) all) !\\(\\equiv\\) in"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#test-for-empty-relations-exists",
    "href": "pages/DBMS/w3-slides.html#test-for-empty-relations-exists",
    "title": "Week 3 Slides",
    "section": "Test for Empty Relations: “exists”",
    "text": "Test for Empty Relations: “exists”\n\nThe exists constucrt returns the value true if the argument subquery is non-empty\n\nexists $r r $\nnot exists $r r = $"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#use-of-exists-clause",
    "href": "pages/DBMS/w3-slides.html#use-of-exists-clause",
    "title": "Week 3 Slides",
    "section": "Use of “exists” clause",
    "text": "Use of “exists” clause\n\nYet another way of specifying the query “Find all courses taught in both the Fall 2009 semester and in the Spring 2010 semester”\n\nselect course_id\nfrom section as S\nwhere semester = 'Fall' and year = 2009 and\nexists (select *\n        from section as T\n        where semester = 'Spring' and year = 2010 and\n        S.course_id = T.course_id);\n\nCorrelation name - variable S in the outer query\nCorrelated subquery - subquery that references the correlation name (the inner query)"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#use-of-not-exists-clause",
    "href": "pages/DBMS/w3-slides.html#use-of-not-exists-clause",
    "title": "Week 3 Slides",
    "section": "Use of “not exists” clause",
    "text": "Use of “not exists” clause\n\nFind all students who have taken all courses offered in the Biology department.\n\nselect distinct S.ID, S.name\nfrom student as S\nwhere not exists ((select course_id\n                    from course\n                    where dept_name = 'Biology')\n                    except\n                    (select T.course_id\n                    from takes as T\n                    where S.ID = T.ID));\n\nFirst nested query lists all courses offered in Biology\nSecond nested query lists all courses a particular student took\nNote: \\(X-Y = \\emptyset \\Leftrightarrow X \\subseteq Y\\)\nNote: Cannot write this query using \\(=\\) all and its variants"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#test-for-absence-of-duplicate-tuples-unique",
    "href": "pages/DBMS/w3-slides.html#test-for-absence-of-duplicate-tuples-unique",
    "title": "Week 3 Slides",
    "section": "Test for Absence of Duplicate Tuples: “unique”",
    "text": "Test for Absence of Duplicate Tuples: “unique”\n\nThe unique construct tests whether a subquery has any duplicate tuples in its result\nThe unique construct evaluates to true if the subquery result has no duplicate tuples\nFind all courses that were offered at most once in 2009\n\nselect T.course_id\nfrom course as T\nwhere unique (select R.course_id\n              from section as R\n              where R.course_id = T.course_id\n              and R.year = 2009);"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#subqueries-in-the-from-clause",
    "href": "pages/DBMS/w3-slides.html#subqueries-in-the-from-clause",
    "title": "Week 3 Slides",
    "section": "Subqueries in the From Clause",
    "text": "Subqueries in the From Clause\n\nSQL allows a subquery expression to be used in the from clause\nFind the average instructors’ salaries of those departments where the average salary is greater than $42,000\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary) as avg_salary\n      from instructor\n      group by dept_name)\nwhere avg_salary &gt; 42000;\n\nNote that we do not need to use the having clause\nAnother way to write the same query is:\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary)\n      from instructor\n      group by dept_name) as dept_avg (dept_name, avg_salary)\nwhere avg_salary &gt; 42000;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#with-clause",
    "href": "pages/DBMS/w3-slides.html#with-clause",
    "title": "Week 3 Slides",
    "section": "With Clause",
    "text": "With Clause\n\nThe with clause provides a way of defining a temporary relation whose definition is available only to the query in which the with clause occurs\nFind all departments with the maximum budget\n\nwith max_budget(value) as\n    (select max(budget)\n    from department)\nselect department.dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#complex-queries-using-with-clause",
    "href": "pages/DBMS/w3-slides.html#complex-queries-using-with-clause",
    "title": "Week 3 Slides",
    "section": "Complex Queries using With Clause",
    "text": "Complex Queries using With Clause\n\nFind all departments where the total salary is greater than the average of the total salary at all departments\n\nwith dept_total(dept_name, value) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name,\ndept_total_avg(value) as\n    (select avg(value)\n    from dept_total)\nselect dept_name\nfrom dept_total, dept_total_avg\nwhere dept_total.value &gt; dept_total_avg.value;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#scalar-subquery",
    "href": "pages/DBMS/w3-slides.html#scalar-subquery",
    "title": "Week 3 Slides",
    "section": "Scalar Subquery",
    "text": "Scalar Subquery\n\nA scalar subquery is a subquery that returns a single value\nList all departments along with the number of instructors in each department\n\nselect dept_name,\n    (select count(*)\n    from instructor\n    where instructor.dept_name = department.dept_name)\n    as num_instructors\n    from department;\n\nRuntime error if the subquery returns more than one result tuple"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#modification-of-the-database",
    "href": "pages/DBMS/w3-slides.html#modification-of-the-database",
    "title": "Week 3 Slides",
    "section": "Modification of the Database",
    "text": "Modification of the Database\n\nDeletion of tuples from a given relation\nInsertion of new tuples into a given relation\nUpdating of values in some tuples in a given relation"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#deletion",
    "href": "pages/DBMS/w3-slides.html#deletion",
    "title": "Week 3 Slides",
    "section": "Deletion",
    "text": "Deletion\n\nDelete all instructors\ndelete from instructor;\nDelete all instructors from the Finance department\ndelete from instructor\nwhere dept_name = 'Finance';\nDelete all tuples in the instructor relation for those instructors associated with a department located in the Watson building\ndelete from instructor\nwhere dept_name in (select dept_name\n                    from department\n                    where building = 'Watson');\nDelete all instructors whose salary is less than the average of all instructors’ salaries\ndelete from instructor\nwhere salary &lt; (select avg(salary)\n                from instructor);\nProblem: as we delete tuples, the average salary changes\nSolution used in SQL:\n\nFirst compute avg(salary) and find all tuples to be deleted\nNext, delete all tuples found above (without recomputing avg or retesting the tuples)"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#insertion",
    "href": "pages/DBMS/w3-slides.html#insertion",
    "title": "Week 3 Slides",
    "section": "Insertion",
    "text": "Insertion\n\nAdd a new typle to course\ninsert into course\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nor equivalently\ninsert into course (course_id, title, dept_name, credits)\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nAdd a new tuple to student with tot_creds set to null\ninsert into student\nvalues ('3003', 'Green', 'Finance', null);\nAdd all instructors to the student relation with tot_creds set to 0\ninsert into student\nselect ID, name, dept_name, 0\nfrom instructor;\nThe select-from-where statement is evaluated fully before any of its results are inserted into the relation\nOtherwise queries like\ninsert into table1 select * from table1;\nwould result in an infinite loop"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#updates",
    "href": "pages/DBMS/w3-slides.html#updates",
    "title": "Week 3 Slides",
    "section": "Updates",
    "text": "Updates\n\nIncrease the salary of all instructors whose salary is over $100,00 by 3% and all others by 5%\n\nWith two update statements\nupdate instructor\n    set salary = salary * 1.03\n    where salary &gt; 100000;\nupdate instructor\n    set salary = salary * 1.05\n    where salary &lt;= 100000;\n\nThe order is important\nCan be done better using the case statement"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#case-statement-for-conditional-updates",
    "href": "pages/DBMS/w3-slides.html#case-statement-for-conditional-updates",
    "title": "Week 3 Slides",
    "section": "Case Statement for Conditional Updates",
    "text": "Case Statement for Conditional Updates\n\nSame query as above using the case statement\nupdate instructor\n    set salary = case\n                when salary &lt;= 100000\n                then salary * 1.05\n                else salary * 1.03\n                end;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#updates-with-scalar-subqueries",
    "href": "pages/DBMS/w3-slides.html#updates-with-scalar-subqueries",
    "title": "Week 3 Slides",
    "section": "Updates with Scalar Subqueries",
    "text": "Updates with Scalar Subqueries\n\nRecompute and update tot_creds value for all students\nupdate student\nset tot_creds = (select sum(credits)\n                from takes, course\n                where takes.course_id = course.course_id and\n                S.ID = takes.ID and\n                takes.grade &lt;&gt; 'F' and\n                takes.grade is not null);\nSet tot_creds to null for all students who have not taken any courses\nInstead of sum(credits), use:\n    case\n    when sum(credits) is not null then sum(credits)\n    else 0\nend;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#join-relations",
    "href": "pages/DBMS/w3-slides.html#join-relations",
    "title": "Week 3 Slides",
    "section": "Join Relations",
    "text": "Join Relations\n\nJoin operations take two relations and return as result another relation\nA join operation is a Cartesian product which requires that tuples in the two relations match (under some condition)\nIt also specifies the attributes that are present in the result of the join\nThe join operations are typically used as subquery expressions in the from clause"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#types-of-joins-between-relations",
    "href": "pages/DBMS/w3-slides.html#types-of-joins-between-relations",
    "title": "Week 3 Slides",
    "section": "Types of Joins between Relations",
    "text": "Types of Joins between Relations\n\nCross join\nInner join\n\nEqui-join\n\nNatural join\n\n\nOuter join\n\nLeft outer join\nRight outer join\nFull outer join\n\nSelf-join"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#cross-join",
    "href": "pages/DBMS/w3-slides.html#cross-join",
    "title": "Week 3 Slides",
    "section": "Cross Join",
    "text": "Cross Join\n\nCROSS JOIN returns the Cartesian product of rows from tables in the join\n\nExplicit\nselect *\nfrom employee cross join department;\nImplicit\nselect *\nfrom employee, department;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#join-operations---example",
    "href": "pages/DBMS/w3-slides.html#join-operations---example",
    "title": "Week 3 Slides",
    "section": "Join Operations - Example",
    "text": "Join Operations - Example\n\nRelation course\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\n\n\n\n\nRelation prereq\n\n\n\n\n\n\ncourse_id\nprereq_id\n\n\n\n\nBIO-301\nBIO-101\n\n\nCS-190\nCS-101\n\n\nCS-347\nCS-101\n\n\n\n\n\n\nObserve that\n\nprereq information is missing for course CS-315, and\ncourse information is missing for CS-347"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#inner-join",
    "href": "pages/DBMS/w3-slides.html#inner-join",
    "title": "Week 3 Slides",
    "section": "Inner Join",
    "text": "Inner Join\n\ncourse inner join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nIf specified as natural, the join is on all attributes with the same name\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#outer-join",
    "href": "pages/DBMS/w3-slides.html#outer-join",
    "title": "Week 3 Slides",
    "section": "Outer Join",
    "text": "Outer Join\n\nAn extension of the join operation that avoids loss of information\nComputes the join and then adds tuples from one relation that does not match tuples in the other relation to the result of the join\nUses null values, which is None in Python"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#left-outer-join",
    "href": "pages/DBMS/w3-slides.html#left-outer-join",
    "title": "Week 3 Slides",
    "section": "Left Outer Join",
    "text": "Left Outer Join\n\ncourse left outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#right-outer-join",
    "href": "pages/DBMS/w3-slides.html#right-outer-join",
    "title": "Week 3 Slides",
    "section": "Right Outer Join",
    "text": "Right Outer Join\n\ncourse right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#joined-relations",
    "href": "pages/DBMS/w3-slides.html#joined-relations",
    "title": "Week 3 Slides",
    "section": "Joined Relations",
    "text": "Joined Relations\n\nJoin operations take two relations and return as a result another relation\nThese additional operations are typically used as subquery expressions in the from clause\nJoin condition – defines which tuples in the two relations match, and what attributes are present in the result of the join\n  natural\n  on &lt;predicate&gt;\n  using (attr1, attr2, ...)\nJoin type – defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated\n  inner join\n  left outer join\n  right outer join\n  full outer join"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#full-outer-join",
    "href": "pages/DBMS/w3-slides.html#full-outer-join",
    "title": "Week 3 Slides",
    "section": "Full Outer Join",
    "text": "Full Outer Join\n\ncourse full outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#joining-relations---examples",
    "href": "pages/DBMS/w3-slides.html#joining-relations---examples",
    "title": "Week 3 Slides",
    "section": "Joining Relations - Examples",
    "text": "Joining Relations - Examples\n\ncourse inner join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nWhat is the difference between the above (equi-join) and the natural join?\ncourse left outer join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\n\n\n\n\ncourse natural right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-347\nNone\nNone\nNone\nCS-101\n\n\n\n\n\n\ncourse full outer join prereq using (course_id)\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\n\n\nCS-347\nNone\nNone\nNone\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#views",
    "href": "pages/DBMS/w3-slides.html#views",
    "title": "Week 3 Slides",
    "section": "Views",
    "text": "Views\n\nIn some cases, it is not desirable for all users to see the entire logical model (that is, all the actual relations stored in the database.)\nConsider a person who needs to know an instructors name and department, but not the salary. This person should see a relation described, in SQL, by:\nselect ID, name, dept_name\nfrom instructor;\nA view provides a mechanism to hide certain data from the view of certain users\nAny relation that is not of the conceptual model but is made visible to a user as a “virtual relation” is called a view."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#view-definition",
    "href": "pages/DBMS/w3-slides.html#view-definition",
    "title": "Week 3 Slides",
    "section": "View Definition",
    "text": "View Definition\n\nA view is defined using the create view statement which has the form\ncreate view v as &lt; query expression &gt;\nwhere &lt; query expression &gt; is any legal SQL expression\nThe view name is represented by v\nOnce a view is defined, the view name can be used to refer to the virtual relation that the view generates\nView definition is not the same as creating a new relation by evaluating the query expression\n\nRather, a view definition causes the saving of an expression; the expression is substituted into queries using the view"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#example-views",
    "href": "pages/DBMS/w3-slides.html#example-views",
    "title": "Week 3 Slides",
    "section": "Example Views",
    "text": "Example Views\n\nA view of instructors without their salary\ncreate view faculty as\nselect ID, name, dept_name\nfrom instructor;\nA view of all instructors in the Biology department\nselect name\n    from faculty\n    where dept_name = 'Biology';\nCreate a view of department salary totals\ncreate view departments_total_salary(dept_name, total_salary) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#views-defined-using-other-views",
    "href": "pages/DBMS/w3-slides.html#views-defined-using-other-views",
    "title": "Week 3 Slides",
    "section": "Views Defined Using Other Views",
    "text": "Views Defined Using Other Views\n    create view physics_fall_2009 as\n        select course.course_id, sec_id, building, room_number\n        from course, section\n        where course.course_id = section.course_id\n            and course.dept_name = 'Physics'\n            and section.semester = 'Fall'\n            and section.year = 2009;\n    create view physics_fall_2009_watson as\n        select course_id, room_number\n        from physics_fall_2009\n        where building = 'Watson';\n\nOne view may be used in the expression defining another view\nA view relation \\(v_1\\) is said to depend directly on a view relation \\(v_2\\) if \\(v_2\\) is used in the expression defining \\(v_1\\)\nA view relation \\(v_1\\) is said to depend on view relation \\(v_2\\) if either \\(v_1\\) depends directly on \\(v_2\\) or there is a path of dependencies from \\(v_1\\) to \\(v_2\\)\nA view relation v is said to be recursive if it depends on itself"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#view-expansion",
    "href": "pages/DBMS/w3-slides.html#view-expansion",
    "title": "Week 3 Slides",
    "section": "View Expansion",
    "text": "View Expansion\n\nExpand use of a view in a query/another view\n\n    create view physics_fall_2009_watson as\n        (select course_id, room_number\n        from (select course.course_id, building, room_number\n            from course, section\n            where course.course_id = section.course_id\n                and course.dept_name = 'Physics'\n                and section.semester = 'Fall'\n                and section.year = 2009)\n        where building = 'Watson');\n\nA way to define the meaning of views defined in terms of other views\nLet view \\(v_1\\) be defined by an expression \\(e_1\\) that may itself contain uses of view relations\nView expansion of an expression repeats the following replacement step:\nrepeat\n\nFind any view relation \\(v_i\\) in \\(e_1\\)\nReplace the view relation \\(v_i\\) by the expression defining \\(v_i\\)\n\nuntil no more view relations are present in \\(e_1\\)\nAs long as the view definitions are not recursive, this loop will terminate"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#view-defined-using-other-views",
    "href": "pages/DBMS/w3-slides.html#view-defined-using-other-views",
    "title": "Week 3 Slides",
    "section": "View Defined Using Other Views",
    "text": "View Defined Using Other Views\n\nOne view may be used in the expression defining another view\nA view relation \\(v_1\\) is said to depend directly on a view relation \\(v_2\\) if \\(v_2\\) is used in the expression defining \\(v_1\\)\nA view relation \\(v_1\\) is said to depend on view relation \\(v_2\\) if either \\(v_1\\) depends directly on \\(v_2\\) or there is a path of dependencies from \\(v_1\\) to \\(v_2\\)\nA view relation v is said to be recursive if it depends on itself"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#view-expansion-1",
    "href": "pages/DBMS/w3-slides.html#view-expansion-1",
    "title": "Week 3 Slides",
    "section": "View Expansion*",
    "text": "View Expansion*\n\nA way to define the meaning of views defined in terms of other views\nLet view \\(v_1\\) be defined by an expression \\(e_1\\) that may itself contain uses of view relations\nView expansion of an expression repeats the following replacement step:\nrepeat\n\nFind any view relation \\(v_i\\) in \\(e_1\\)\nReplace the view relation \\(v_i\\) by the expression defining \\(v_i\\)\n\nuntil no more view relations are present in \\(e_1\\)\nAs long as the view definitions are not recursive, this loop will terminate"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#update-of-a-view",
    "href": "pages/DBMS/w3-slides.html#update-of-a-view",
    "title": "Week 3 Slides",
    "section": "Update of a View",
    "text": "Update of a View\n\nAdd a new tuple to faculty view which we defined earlier\n    insert into faculty values (’30765’, ’Green’, ’Music’);\nThis insertion must be represented by the insertion of the tuple\n  (’30765’, ’Green’, ’Music’, null)\ninto the instructor relation"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#some-updates-cannot-be-translated-uniquely",
    "href": "pages/DBMS/w3-slides.html#some-updates-cannot-be-translated-uniquely",
    "title": "Week 3 Slides",
    "section": "Some Updates cannot be Translated Uniquely",
    "text": "Some Updates cannot be Translated Uniquely\n\n    create view instructor_info as\n        select ID, name, building\n        from instructor, department\n        where instructor.dept_name = department.dept_name;\n    insert into instructor info values ('69987', 'White', 'Taylor');\n\nwhich department, if multiple departments in Taylor?\nwhat if no department is in Taylor?\n\nMost SQL implementations allow updates only on simple views\n\nThe from clause has only one database relation\nThe select clause contains only attribute names of the relation, and does not have any expressions aggregates, or distinct specification\nAny attribute not listed in the select clause can be set to null\nThe query does not have a group by or having clause"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#and-some-not-at-all",
    "href": "pages/DBMS/w3-slides.html#and-some-not-at-all",
    "title": "Week 3 Slides",
    "section": "And Some Not at All",
    "text": "And Some Not at All\n\n    create view history_instructors as\n        select *\n        from instructor\n        where dept_name = 'History';\nWhat happens if we insert (’25566’, ’Brown’, ’Biology’, 100000) into history_instructors?"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#materialized-views",
    "href": "pages/DBMS/w3-slides.html#materialized-views",
    "title": "Week 3 Slides",
    "section": "Materialized Views",
    "text": "Materialized Views\n\nMaterializing a view: create a physical table containing all the tuples in the result of the query defining the view\nIf relations used in the query are updated, the materialized view result becomes out of date\n\nNeed to maintain the view, by updating the view whenever the underlying relations are updated"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#transactions",
    "href": "pages/DBMS/w3-slides.html#transactions",
    "title": "Week 3 Slides",
    "section": "Transactions",
    "text": "Transactions\n\nUnit of work\nAtomic transaction\n\neither fully executed or rolled back as if it never happened\n\nIsolation from concurrent transactions\nTransactions begin implicitly\n\nEnd by commit work or rollback work\n\nBut default on most databases: each SQL statement commits automatically\n\nCan turn off auto-commit for a session (for example, using API)\nIn SQL:1999, can use: begin atomic … end\n\nNot supported on most databases"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#integrity-constraints",
    "href": "pages/DBMS/w3-slides.html#integrity-constraints",
    "title": "Week 3 Slides",
    "section": "Integrity Constraints",
    "text": "Integrity Constraints\n\nIntegrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency\n\nA checking account must have a balance greater than Rs. 10,000.00\nA salary of a bank employee must be at least Rs. 250.00 an hour\nA customer must have a (non-null) phone number"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#integrity-constraints-on-a-single-relation",
    "href": "pages/DBMS/w3-slides.html#integrity-constraints-on-a-single-relation",
    "title": "Week 3 Slides",
    "section": "Integrity Constraints on a Single Relation",
    "text": "Integrity Constraints on a Single Relation\n\nnot null\nprimary key\nunique\ncheck(P), where P is a predicate"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#not-null-and-unique-constraints",
    "href": "pages/DBMS/w3-slides.html#not-null-and-unique-constraints",
    "title": "Week 3 Slides",
    "section": "Not Null and Unique Constraints",
    "text": "Not Null and Unique Constraints\n\nnot null\n\nDeclare name and budget to be not null\nname varchar(20) not null,\nbudget numeric(12, 2) not null\n\nunique \\((A_1, A_2, ..., A_m)\\)\n\nThe unique specification states that the attributes \\(A_1, A_2, ..., A_m\\) form a candidate key\nCandidate keys are permeitted to be null (unlike primary keys)"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#the-check-clause",
    "href": "pages/DBMS/w3-slides.html#the-check-clause",
    "title": "Week 3 Slides",
    "section": "The check clause",
    "text": "The check clause\n\ncheck(P), where P is a predicate\nEnsure that semester is one of fall, winter, spring, or summer:\ncreate table section (\n  course_id varchar(8),\n  sec_id varchar(8),\n  semester varchar(6),\n  year numeric(4, 0),\n  building varchar(15),\n  room_number varchar(7),\n  time_slot_id varchar(4),\n  primary key (course_id, sec_id, semester, year),\n  check (semester in ('fall', 'winter', 'spring', 'summer'))\n);"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#referential-integrity",
    "href": "pages/DBMS/w3-slides.html#referential-integrity",
    "title": "Week 3 Slides",
    "section": "Referential Integrity",
    "text": "Referential Integrity\n\nEnsures that a value that appears in one relation for a given set of attributes also appears for a certain set of attributes in another relation\nExample: If “Biology” is a department name appearing in one of the tuples in the instructor relation, then there exists a tuple in the department relation for “Biology”\nLet A be a set of attributes. Let R and S be two relations that contain attributes A and where A is the primary key of S. A is said to be a foreign key of R if for any values of A appearing in R these values also appear in S"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#cascading-actions-in-referential-integrity",
    "href": "pages/DBMS/w3-slides.html#cascading-actions-in-referential-integrity",
    "title": "Week 3 Slides",
    "section": "Cascading Actions in Referential Integrity",
    "text": "Cascading Actions in Referential Integrity\n\nWith cascading, you can define the actions that the Database Engine takes when a user tries to delete or update a key to which existing foreign keys point\n    create table course (\n        course_id char(5) primary key,\n        title varchar(20),\n        dept_name varchar(20) references department\n    );\n    create table course (\n        ...\n        dept_name varchar(20),\n        foreign key (dept_name) references department\n            on delete cascade\n            on update cascade,\n        ...\n    );\nAlternative actions to cascade: no action, set null, set default"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#integrity-constraint-violation-during-transactions",
    "href": "pages/DBMS/w3-slides.html#integrity-constraint-violation-during-transactions",
    "title": "Week 3 Slides",
    "section": "Integrity Constraint Violation During Transactions",
    "text": "Integrity Constraint Violation During Transactions\n\n    create table person (\n        ID char(10),\n        name char(40),\n        mother char(10),\n        father char(10),\n        primary key ID,\n        foreign key father references person,\n        foreign key mother references person)\nHow to insert a tuple without causing constraint violation?\n\nInsert father and mother of a person before inserting person\nOR, Set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be not null)\nOR Defer constraint checking (will discuss later)"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#built-in-data-types-in-sql",
    "href": "pages/DBMS/w3-slides.html#built-in-data-types-in-sql",
    "title": "Week 3 Slides",
    "section": "Built-in Data Types in SQL",
    "text": "Built-in Data Types in SQL\n\ndate: Dates, containing a (4 digit) year, month and date\n\nExample: date ‘2005-7-27’\n\ntime: Time of day, in hours, minutes and seconds.\n\nExample: time ‘09:00:30’ time ‘09:00:30.75’\n\ntimestamp: date plus time of day\n\nExample: timestamp ‘2005-7-27 09:00:30.75’\n\ninterval: period of time\n\nExample: interval ‘1’ day\nSubtracting a date/time/timestamp value from another gives an interval value\nInterval values can be added to date/time/timestamp values"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#index-creation",
    "href": "pages/DBMS/w3-slides.html#index-creation",
    "title": "Week 3 Slides",
    "section": "Index Creation",
    "text": "Index Creation\n\n    create table student(ID varchar(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    tot cred numeric (3,0) default 0,\n    primary key (ID))\ncreate index studentID index on student(ID)\nIndices are data structures used to speed up access to records with specified values for index attributes\n  select *\n  from student\n  where ID = '12345'\n\nCan be executed by using the index to find the required record, without looking at all records of student"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#user-defined-types",
    "href": "pages/DBMS/w3-slides.html#user-defined-types",
    "title": "Week 3 Slides",
    "section": "User Defined Types",
    "text": "User Defined Types\n\ncreate type construct in SQL creates user-defined type (alias, like typedef in C)\n  create type Dollars as numeric (12,2) final\n    create table department (\n        dept_name varchar (20),\n        building varchar (15),\n        budget Dollars\n    );"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#domains",
    "href": "pages/DBMS/w3-slides.html#domains",
    "title": "Week 3 Slides",
    "section": "Domains",
    "text": "Domains\n\ncreate domain construct in SQL-92 creates user-defined domain types\n  create domain person_name char(20) not null\nTypes and domains are similar\nDomains can have constraints, such as not null specified on them\n  create domain degree_level varchar(10)\n  constraint degree_level_test\n  check (value in ('Bachelors', 'Masters', 'Doctorate'));"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#large-object-types",
    "href": "pages/DBMS/w3-slides.html#large-object-types",
    "title": "Week 3 Slides",
    "section": "Large-Object Types",
    "text": "Large-Object Types\n\nLarge objects (photos, videos, CAD files, etc.) are stored as a large object:\n\nblob: binary large object – object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system)\nclob: character large object – object is a large collection of character data\nWhen a query returns a large object, a pointer is returned rather than the large object itself"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#authorization",
    "href": "pages/DBMS/w3-slides.html#authorization",
    "title": "Week 3 Slides",
    "section": "Authorization",
    "text": "Authorization\n\nForms of authorization on parts of the database:\n\nRead - allows reading, but not modification of data\nInsert - allows insertion of new data, but not modification of existing data\nUpdate - allows modification, but not deletion of data\nDelete - allows deletion of data\n\nForms of authorization to modify the database schema\n\nIndex - allows creation and deletion of indices\nResources - allows creation of new relations\nAlteration - allows addition or deletion of attributes in a relation\nDrop - allows deletion of relations"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#authorization-specification-in-sql",
    "href": "pages/DBMS/w3-slides.html#authorization-specification-in-sql",
    "title": "Week 3 Slides",
    "section": "Authorization Specification in SQL",
    "text": "Authorization Specification in SQL\n\nThe grant statement is used to confer authorization\n  grant &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; to &lt;user list&gt;\n\\(\\text{&lt;user list&gt;}\\) is:\n\na user-id\npublic, which allows all valid users the privilege granted\nA role (more on this later)\n\nGranting a privilege on a view does not imply granting any privileges on the underlying relations\nThe grantor of the privilege must already hold the privilege on the specified item (or be the database administrator)"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#privileges-in-sql",
    "href": "pages/DBMS/w3-slides.html#privileges-in-sql",
    "title": "Week 3 Slides",
    "section": "Privileges in SQL",
    "text": "Privileges in SQL\n\nselect: allows read access to relation, or the ability to query using the view\n\nExample: grant users \\(U_1\\), \\(U_2\\), and \\(U_3\\) select authorization on the instructor relation:\n  grant select on instructor to U1, U2, U3\n\ninsert: the ability to insert tuples\nupdate: the ability to update tuples\ndelete: the ability to delete tuples\nall privileges: used as a short form for all the allowable privileges"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#revoking-authorization-in-sql",
    "href": "pages/DBMS/w3-slides.html#revoking-authorization-in-sql",
    "title": "Week 3 Slides",
    "section": "Revoking Authorization in SQL",
    "text": "Revoking Authorization in SQL\n\nThe revoke statement is used to revoke authorization\n  revoke &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; from &lt;user list&gt;\nExample:\n  revoke select on branch from U1, U2, U3\n\\(\\text{&lt;privilege-list&gt;}\\) may be all to revoke all privileges the revokee may hold\nIf \\(\\text{&lt;revokee-list&gt;}\\) includes public, all users lose the privilege except those granted it explicitly\nIf the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation\nAll privileges that depend on the privilege being revoked are also revoked"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#roles",
    "href": "pages/DBMS/w3-slides.html#roles",
    "title": "Week 3 Slides",
    "section": "Roles",
    "text": "Roles\n\n    create role instructor;\n    grant instructor to Amit;\nPrivileges can be granted to roles:\n  grant select on takes to instructor;\nRoles can be granted to users, as well as to other roles\n  create role teaching_assistant;\n  grant teaching_assistant to instructor;\n\nInstructor inherits all privileges of teaching_assistant\n\nChain of roles\n\ncreate role dean;\ngrant instructor to dean;\ngrant dean to Satoshi;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#authorization-on-views",
    "href": "pages/DBMS/w3-slides.html#authorization-on-views",
    "title": "Week 3 Slides",
    "section": "Authorization on Views",
    "text": "Authorization on Views\n\n    create view geo_instructor as\n    (select *\n    from instructor\n    where dept_name = ’Geology’);\n    grant select on geo_instructor to geo_staff\nSuppose that a geo_staff member issues\n  select *\n  from geo_instructor;\nWhat if\n\ngeo_staff does not have permissions on instructor?\ncreator of view did not have some permissions on instructor?"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#other-authorization-features",
    "href": "pages/DBMS/w3-slides.html#other-authorization-features",
    "title": "Week 3 Slides",
    "section": "Other Authorization Features",
    "text": "Other Authorization Features\n\nreferences privilege to create foreign key\n  grant reference (dept_name) on department to Mariano;\n\nwhy is this required?\n\nTransfer of privileges\n\ngrant select on department to Amit with grant option;\nrevoke select on department from Amit, Satoshi cascade;\nrevoke select on department from Amit, Satoshi restrict;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#native-language-query-language",
    "href": "pages/DBMS/w3-slides.html#native-language-query-language",
    "title": "Week 3 Slides",
    "section": "Native Language ← → Query Language",
    "text": "Native Language ← → Query Language"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#functions-and-procedures",
    "href": "pages/DBMS/w3-slides.html#functions-and-procedures",
    "title": "Week 3 Slides",
    "section": "Functions and Procedures",
    "text": "Functions and Procedures\n\nFunctions / Procedures and Control Flow Statements were added in SQL:1999\n\nFunctions/Procedures can be written in SQL itself, or in an external programming language (like C, Java)\nFunctions written in an external languages are particularly useful with specialized data types such as images and geometric objects\n\nExample: Functions to check if polygons overlap, or to compare images for similarity\n\nSome database systems support table-valued functions, which can return a relation as a result\n\nSQL:1999 also supports a rich set of imperative constructs, including loops, if-then-else, and assignment\nMany databases have proprietary procedural extensions to SQL that differ from SQL:1999"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#sql-functions",
    "href": "pages/DBMS/w3-slides.html#sql-functions",
    "title": "Week 3 Slides",
    "section": "SQL Functions",
    "text": "SQL Functions\n\nDefine a function that, given the name of a department, returns the count of the number of instructors in that department:\n    create function dept_count (dept name varchar(20))\n        returns integer\n        begin\n        declare d_count integer;\n            select count (*) into d_count\n            from instructor\n            where instructor.dept_name = dept_name\n        return d_cont;\n        end\nThe function dept count can be used to find the department names and budget of all departments with more that 12 instructors:\n    select dept_name, budget\n    from department\n    where dept_count (dept_name ) &gt; 12"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#sql-functions-2",
    "href": "pages/DBMS/w3-slides.html#sql-functions-2",
    "title": "Week 3 Slides",
    "section": "SQL Functions (2)",
    "text": "SQL Functions (2)\n\nCompound statement: begin . . . end May contain multiple SQL statements between begin and end.\nreturns – indicates the variable-type that is returned (for example, integer)\nreturn – specifies the values that are to be returned as result of invoking the function\nSQL function are in fact parameterized views that generalize the regular notion of views by allowing parameters"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#table-functions",
    "href": "pages/DBMS/w3-slides.html#table-functions",
    "title": "Week 3 Slides",
    "section": "Table Functions",
    "text": "Table Functions\n\nFunctions that return a relation as a result added in SQL:2003\nReturn all instructors in a given department:\n  create function instructor_of (dept_name char(20))\n    returns table (\n      ID varchar(5),\n      name varchar(20),\n      dept_name varchar(20)\n      salary numeric(8, 2) )\n    returns table\n      (select ID, name, dept_name, salary\n      from instructor\n      where instructor.dept_name = instructor_of.dept_name)\nUsage\n  select *\n  from table (instructor_of (‘Music’))"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#sql-procedures",
    "href": "pages/DBMS/w3-slides.html#sql-procedures",
    "title": "Week 3 Slides",
    "section": "SQL Procedures",
    "text": "SQL Procedures\n\nThe dept count function could instead be written as procedure:\n      create procedure dept_count_proc (\n          in dept_name varchar (20), out d_count integer)\n          begin\n              select count(*) into d_count\n              from instructor\n              where instructor.dept_name = dept_count_proc.dept_name\n          end\nProcedures can be invoked either from an SQL procedure or from embedded SQL, using the call statement.\ndeclare d_count integer;\ncall dept_count_proc(‘Physics’, d_count);\nProcedures and functions can be invoked also from dynamic SQL\nSQL:1999 allows overloading - more than one function/procedure of the same name as long as the number of arguments and/or the types of the arguments differ"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#language-constructs-for-procedures-and-functions",
    "href": "pages/DBMS/w3-slides.html#language-constructs-for-procedures-and-functions",
    "title": "Week 3 Slides",
    "section": "Language Constructs for Procedures and Functions",
    "text": "Language Constructs for Procedures and Functions\n\nSQL supports constructs that gives it almost all the power of a general-purpose programming language.\n\nWarning: Most database systems implement their own variant of the standard syntax\n\nCompound statements: begin . . . end\n\nMay contain multiple SQL statements between begin and end\nLocal variables can be declared within a compound statement"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#language-constructs-2-while-and-repeat",
    "href": "pages/DBMS/w3-slides.html#language-constructs-2-while-and-repeat",
    "title": "Week 3 Slides",
    "section": "Language Constructs (2): while and repeat",
    "text": "Language Constructs (2): while and repeat\n\nwhile loop\n     while boolean_expression do\n         sequence_of_statements;\n     end while;\nrepeat loop\n    repeat\n        sequence_of_statements;\n    until boolean_expression;\n    end repeat;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#language-constructs-3-for",
    "href": "pages/DBMS/w3-slides.html#language-constructs-3-for",
    "title": "Week 3 Slides",
    "section": "Language Constructs (3): for",
    "text": "Language Constructs (3): for\n\nfor loop\n\nPermits iteration over all results of a query\n\nFind the budget if all departments:\n    declare n integer default 0;\n    for r as\n      select budget from department\n    do\n      set n = n + r.budget\n    end for;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#language-constructs-4-if-then-else",
    "href": "pages/DBMS/w3-slides.html#language-constructs-4-if-then-else",
    "title": "Week 3 Slides",
    "section": "Language Constructs (4): if-then-else",
    "text": "Language Constructs (4): if-then-else\n\nConditional statements\n\nif-then-else\ncase\n\nif-then-else statement\n    if boolean_expression then\n        sequence_of_statements;\n    elseif boolean_expression then\n        sequence_of_statements;\n    ...\n    else\n        sequence_of_statements;\n    end if;\nThe if statement supports the use of optional elseif clauses and a default else clause\nExample procedure: registers student after ensuring that classroom capacity is not exceeded\n\nReturns 0 on success and -1 if capacity is exceeded"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#language-constructs-5-simple-case",
    "href": "pages/DBMS/w3-slides.html#language-constructs-5-simple-case",
    "title": "Week 3 Slides",
    "section": "Language Constructs (5): Simple case",
    "text": "Language Constructs (5): Simple case\n\nSimple case statement\n    case variable\n        when value1 then\n            sequence_of_statements;\n        when value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nThe when clause of the case statement defines the value that when satisfied determines the flow of control"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#language-constructs-6-searched-case",
    "href": "pages/DBMS/w3-slides.html#language-constructs-6-searched-case",
    "title": "Week 3 Slides",
    "section": "Language Constructs (6): Searched case",
    "text": "Language Constructs (6): Searched case\n\nSearched case statements\n    case\n        when sql_expression = value1 then\n            sequence_of_statements;\n        when sql_expression = value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nAny supported SQL expression can be used here. These expressions can contain references to variables, parameters, special registers, and more."
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#language-constructs-7-exception",
    "href": "pages/DBMS/w3-slides.html#language-constructs-7-exception",
    "title": "Week 3 Slides",
    "section": "Language Constructs (7): Exception",
    "text": "Language Constructs (7): Exception\n\nSignaling of exception conditions, and declaring handlers for exceptions\n    declare out_of_classroom_seats condition\n    declare exit handler for out_of_classroom_seats\n    begin\n        ...\n        signal out_of_classroom_seats\n        ...\n    end\n\nThe handler here is exit – causes enclosing begin . . . end to be terminate and exit\nOther actions possible on exception"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#external-language-routines",
    "href": "pages/DBMS/w3-slides.html#external-language-routines",
    "title": "Week 3 Slides",
    "section": "External Language Routines*",
    "text": "External Language Routines*\n\nSQL:1999 allows the definition of functions and procedures in an external / imperative programming language, (Java, C#, C, or C++) which can be invoked from SQL queries\nSuch functions can be more efficient than functions defined in SQL, and computations that cannot be carried out in SQL can be executed by these functions\nDeclaring external language procedures and functions\n    create procedure dept_count_proc(\n            in dept_name varchar(20),\n            out count integer)\n        language C\n        external name ’/usr/avi/bin/dept_count_proc’\n\n    create function dept_count(dept_name varchar(20))\n    returns integer\n        language C\n        external name ‘/usr/avi/bin/dept_count’"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#external-language-routines-2",
    "href": "pages/DBMS/w3-slides.html#external-language-routines-2",
    "title": "Week 3 Slides",
    "section": "External Language Routines (2)*",
    "text": "External Language Routines (2)*\n\nBenefits of external language functions/procedures:\n\nMore efficient for many operations, and more expressive power\n\nDrawbacks\n\nCode to implement function may need to be loaded into database system and executed in the database system’s address space\n\nRisk of accidental corruption of database structures\nSecurity risk, allowing users access to unauthorized data\n\nThere are alternatives, which give good security at the cost of performance\nDirect execution in the database system’s space is used when efficiency is more important than security"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#external-language-routines-3-security",
    "href": "pages/DBMS/w3-slides.html#external-language-routines-3-security",
    "title": "Week 3 Slides",
    "section": "External Language Routines (3)*: Security",
    "text": "External Language Routines (3)*: Security\n\nTo deal with security problems, we can do one of the following:\n\nUse sandbox techniques\n\nThat is, use a safe language like Java, which cannot be used to access/damage other parts of the database code\n\nRun external language functions/procedures in a separate process, with no access to the database process’ memory\n\nParameters and results communicated via inter-process communication\n\n\nBoth have performance overheads\nMany database systems support both above approaches as well as direct executing in database system address space"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#trigger",
    "href": "pages/DBMS/w3-slides.html#trigger",
    "title": "Week 3 Slides",
    "section": "Trigger",
    "text": "Trigger\n\nA trigger defines a set of actions that are performed in response to an insert, update, or delete operation on a specified table\n\nWhen such an SQL operation is executed, the trigger is said to have been activated\nTriggers are optional\nTriggers are defined using the create trigger statement\n\nTriggers can be used\n\nTo enforce data integrity rules via referential constraints and check constraints\nTo cause updates to other tables, automatically generate or transform values for inserted or updated rows, or invoke functions to perform tasks such as issuing alerts\n\nTo design a trigger mechanism, we must:\n\nSpecify the events / (like update, insert, or delete) for the trigger to executed\nSpecify the time (BEFORE or AFTER) of execution\nSpecify the actions to be taken when the trigger executes\n\nSyntax of triggers may vary across systems"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#types-of-triggers-before",
    "href": "pages/DBMS/w3-slides.html#types-of-triggers-before",
    "title": "Week 3 Slides",
    "section": "Types of Triggers: BEFORE",
    "text": "Types of Triggers: BEFORE\n\nBEFORE triggers\n\nRun before an update, or insert\nValues that are being updated or inserted can be modified before the database is actually modified. You can use triggers that run before an update or insert to:\n\nCheck or modify values before they are actually updated or inserted in the database\n\nUseful if user-view and internal database format differs\n\nRun other non-database operations coded in user-defined functions\n\n\nBEFORE DELETE triggers\n\nRun before a delete\n\nChecks values (a raises an error, if necessary)"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#types-of-triggers-2-after",
    "href": "pages/DBMS/w3-slides.html#types-of-triggers-2-after",
    "title": "Week 3 Slides",
    "section": "Types of Triggers (2): AFTER",
    "text": "Types of Triggers (2): AFTER\n\nAFTER triggers\n\nRun before an update, insert, or delete\nYou can use triggers that run after an update or insert to:\n\nUpdate data in other tables\n\nUseful for maintain relationships between data or keep audit trail\n\nCheck against other data in the table or in other tables\n\nUseful to ensure data integrity when referential integrity constraints aren’t appropriate, or\nwhen table check constraints limit checking to the current table only\n\nRun non-database operations coded in user-defined functions\n\nUseful when issuing alerts or to update information outside the database"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#row-level-and-statement-level-triggers",
    "href": "pages/DBMS/w3-slides.html#row-level-and-statement-level-triggers",
    "title": "Week 3 Slides",
    "section": "Row Level and Statement Level Triggers",
    "text": "Row Level and Statement Level Triggers\nThere are two types of triggers based on the level at which the triggers are applied:\n\nRow level triggers are executed whenever a row is affected by the event on which the trigger is defined.\n\nLet Employee be a table with 100 rows. Suppose an update statement is executed to increase the salary of each employee by 10%. Any row level update trigger configured on the table Employee will affect all the 100 rows in the table during this update.\n\nStatement level triggers perform a single action for all rows affected by a statement, instead of executing a separate action for each affected row.\n\nUsed for each statement instead of for each row\nUses referencing old table or referencing new table to refer to temporary tables called transition tables containing the affected rows\nCan be more efficient when dealing with SQL statements that update a large number of rows"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#triggering-events-and-actions-in-sql",
    "href": "pages/DBMS/w3-slides.html#triggering-events-and-actions-in-sql",
    "title": "Week 3 Slides",
    "section": "Triggering Events and Actions in SQL",
    "text": "Triggering Events and Actions in SQL\n\nTriggering event can be an insert, delete or update\nTriggers on update can be restricted to specific attributes\n\nFor example, after update of grade on takes\n\nValues of attributes before and after an update can be referenced\n\nreferencing old row as : for deletes and updates\nreferencing new row as : for inserts and updates\n\nTriggers can be activated before an event, which can serve as extra constraints. For example, convert blank grades to null.\n  create trigger setnull_trigger before update of takes\n  referencing new row as nrow\n  for each row\n  when (nrow.grade = ‘ ‘)\n    begin atomic\n      set nrow.grade = null;\n    end;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#triggering-to-maintain-credits_earned-value",
    "href": "pages/DBMS/w3-slides.html#triggering-to-maintain-credits_earned-value",
    "title": "Week 3 Slides",
    "section": "Triggering to Maintain credits_earned value",
    "text": "Triggering to Maintain credits_earned value\n  create trigger credits_earned after update of grade on takes\n  referencing new row as nrow\n  referencing old row as orow\n  for each row\n  when nrow.grade &lt;&gt; 'F' and nrow.grade is not null and\n       (orow.grade = 'F' or orow.grade is null)\n    begin atomic\n      update student\n      set tot_cred = tot_cred + \n          (select credits\n          from course\n          where course.course_id = nrow.course_id)\n      where student.ID = nrow.ID;\n    end;"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#how-to-use-triggers",
    "href": "pages/DBMS/w3-slides.html#how-to-use-triggers",
    "title": "Week 3 Slides",
    "section": "How to use triggers?",
    "text": "How to use triggers?\n\nThe optimal use of DML triggers is for short, simple, and easy to maintain write operations that act largely independent of an applications business logic.\nTypical and recommended uses of triggers include:\n\nLogging changes to a history table\nAuditing users and their actions against sensitive tables\nAdding additional values to a table that may not be available to an application (due to security restrictions or other limitations), such as:\n\nLogin/user name\nTime an operation occurs\nServer/database name\n\nSimple validation"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#how-not-to-use-triggers",
    "href": "pages/DBMS/w3-slides.html#how-not-to-use-triggers",
    "title": "Week 3 Slides",
    "section": "How not to use triggers?",
    "text": "How not to use triggers?\n\nTriggers are like Lays: Once you pop, you can’t stop\nOne of the greatest challenges for architects and developers is to ensure that\n\ntriggers are used only as needed, and\nto not allow them to become a one-size-fits-all solution for any data needs that happen to come along\n\nAdding triggers is often seen as faster and easier than adding code to an application, but the cost of doing so is compounded over time with each added line of code"
  },
  {
    "objectID": "pages/DBMS/w3-slides.html#how-to-use-triggers-2",
    "href": "pages/DBMS/w3-slides.html#how-to-use-triggers-2",
    "title": "Week 3 Slides",
    "section": "How to use triggers? (2)",
    "text": "How to use triggers? (2)\n\nTriggers can become dangerous when:\n\nThere are too many\nTrigger code becomes complex\nTriggers go cross-server - across databases over network\nTriggers call triggers\nRecursive triggers are set to ON. This database-level setting is set to off by default\nFunctions, stored procedures, or views are in triggers\nIteration occurs\n\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html",
    "href": "pages/MAD-2/w3-slides.html",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "User-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens\n\n\n\n\n\n\nImperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated\n\n\n\n\n\n\nCredit: Flutter documentation “Start thinking declaratively”\n\n\n\n\n\n\nInternal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state\n\n\n\n\n\n\nComplete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\n. . .\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!\n\n\n\n\n. . .\nApplication:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\n. . .\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays\n\n\n\n\n. . .\nUI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\n. . .\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page\n\n\n\n\n\nHTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client\n\n\n\n\n\n\nWhat to display on screen?\nWho determines the display?\nHow should user input be collected and processed?"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#what-is-the-frontend",
    "href": "pages/MAD-2/w3-slides.html#what-is-the-frontend",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "User-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#programming-styles",
    "href": "pages/MAD-2/w3-slides.html#programming-styles",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Imperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated\n\n\n\n\n\n\nCredit: Flutter documentation “Start thinking declaratively”"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#state",
    "href": "pages/MAD-2/w3-slides.html#state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Internal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#system-state",
    "href": "pages/MAD-2/w3-slides.html#system-state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Complete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\n. . .\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#application-state",
    "href": "pages/MAD-2/w3-slides.html#application-state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": ". . .\nApplication:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\n. . .\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#ui-state-ephemeral-state",
    "href": "pages/MAD-2/w3-slides.html#ui-state-ephemeral-state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": ". . .\nUI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\n. . .\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#application-and-ui-management",
    "href": "pages/MAD-2/w3-slides.html#application-and-ui-management",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "HTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client"
  },
  {
    "objectID": "pages/MAD-2/w3-slides.html#example-tic-tac-toe",
    "href": "pages/MAD-2/w3-slides.html#example-tic-tac-toe",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "What to display on screen?\nWho determines the display?\nHow should user input be collected and processed?"
  },
  {
    "objectID": "pages/MAD-2/w3.html",
    "href": "pages/MAD-2/w3.html",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "User-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens\n\n\n\n\n\n\nImperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated\n\n\n\n\n\n\nCredit: Flutter documentation “Start thinking declaratively”\n\n\n\n\n\n\nInternal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state\n\n\n\n\n\n\nComplete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!\n\n\n\n\nApplication:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays\n\n\n\n\nUI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page\n\n\n\n\n\nHTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client\n\n\n\n\n\n\nWhat to display on screen?\nWho determines the display?\nHow should user input be collected and processed?",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#what-is-the-frontend",
    "href": "pages/MAD-2/w3.html#what-is-the-frontend",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "User-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#programming-styles",
    "href": "pages/MAD-2/w3.html#programming-styles",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Imperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated\n\n\n\n\n\n\nCredit: Flutter documentation “Start thinking declaratively”",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#state",
    "href": "pages/MAD-2/w3.html#state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Internal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#system-state",
    "href": "pages/MAD-2/w3.html#system-state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Complete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#application-state",
    "href": "pages/MAD-2/w3.html#application-state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "Application:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#ui-state-ephemeral-state",
    "href": "pages/MAD-2/w3.html#ui-state-ephemeral-state",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "UI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#application-and-ui-management",
    "href": "pages/MAD-2/w3.html#application-and-ui-management",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "HTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w3.html#example-tic-tac-toe",
    "href": "pages/MAD-2/w3.html#example-tic-tac-toe",
    "title": "Modern Application Development II - Week 3",
    "section": "",
    "text": "What to display on screen?\nWho determines the display?\nHow should user input be collected and processed?",
    "crumbs": [
      "MAD-2",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html",
    "href": "pages/MAD-2/w1-slides.html",
    "title": "Modern Application Development - II — Week 1",
    "section": "",
    "text": "What is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems\n\n\n\n\n\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc.\n\n\n\n\n\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#review-of-mad-i",
    "href": "pages/MAD-2/w1-slides.html#review-of-mad-i",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of MAD-I",
    "text": "Review of MAD-I\n\nWhat is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#review-of-the-web-application-development-model",
    "href": "pages/MAD-2/w1-slides.html#review-of-the-web-application-development-model",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of the Web Application Development Model",
    "text": "Review of the Web Application Development Model\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc."
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#moving-forward",
    "href": "pages/MAD-2/w1-slides.html#moving-forward",
    "title": "Modern Application Development - II — Week 1",
    "section": "Moving Forward",
    "text": "Moving Forward\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#origins",
    "href": "pages/MAD-2/w1-slides.html#origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Origins",
    "text": "Origins\n\nOriginally created in 1995 as scripting language for Netscape Navigator\nIntended as “glue” language\n\nStick modules from other languages together\nNot really meant for much code\n\nPrimarily meant to assist “applets” in Java - hence JavaScript\n\nTrademark issues, name changes, …\n\nIssues:\n\nSlow\nLimited capability"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#power",
    "href": "pages/MAD-2/w1-slides.html#power",
    "title": "Modern Application Development - II — Week 1",
    "section": "Power",
    "text": "Power\n\nGlue was useful, but…\nThen Google Maps, Google Suggest etc. (~ 2005)\n\nPan around map, zoom in/out seamlessly - fluid user interface:\nLoad only what is needed!\n\nDescribed and Named Ajax - Garrett 2005\n\nAsynchronous Javascript and XML\n\nAllowed true “web applications” that behave like desktop applications\nEvolved considerably since then\n\nMuch more on this approach moving forward"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#standardization",
    "href": "pages/MAD-2/w1-slides.html#standardization",
    "title": "Modern Application Development - II — Week 1",
    "section": "Standardization",
    "text": "Standardization\n\nMove beyond Netscape needed\nECMA (European Computer Manufacturers Association) - standard 262\nSubsequently called ECMAScript\n\nAvoid trademark issues with Java\n\nIn practice:\n\nLanguage standard called ECMAScript (versions)\nImplementation and use: JavaScript\n\nSignificant changes in ES6 - 2015\n\nYearly releases since then\n“Feature readiness” oriented approach"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#what-version-to-use",
    "href": "pages/MAD-2/w1-slides.html#what-version-to-use",
    "title": "Modern Application Development - II — Week 1",
    "section": "What version to use?",
    "text": "What version to use?\n\nES6 has most features of modern languages (modules, scoping, class etc.)\nSome older browsers may not support all of this\nPossible approaches:\n\nIgnore old browsers and ask user to upgrade\nPackage browser along with application - useful for limited cases, like VSCode (Electron apps)\nPolyfills: include libraries that emulate newer functionality for older browsers\nCompilers: BabelJS - convert new code to older compatible versions\n\nBackend\n\nNode.js, Deno: directly use JS as a scripting language like Python"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#implications-of-js-origins",
    "href": "pages/MAD-2/w1-slides.html#implications-of-js-origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Implications of JS Origins",
    "text": "Implications of JS Origins\n\nEase of use given priority over performance (to start with)\nHighly tolerant of errors - fail silently\n\nDebugging difficult!\nStrict mode: “use strict”;\n\nAmbiguous syntax variants\n\nAutomatic semicolon insertion\nObject literals vs Code blocks {}\nFunction: statement or expression? Impacts parsing\n\nLimited IO support: errors “logged” to “console”\nClosely integrates with presentation layer: DOM APIs\nAsynchronous processing and the Event Loop - very powerful!"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#using-js",
    "href": "pages/MAD-2/w1-slides.html#using-js",
    "title": "Modern Application Development - II — Week 1",
    "section": "Using JS",
    "text": "Using JS\n\nNot originally meant for direct scripting\n\nUsually not run from command line like Python for instance\n\nNeed HTML file to load the JS as a script\n\nRequires browser to serve the files\nLinks and script tags etc.\nMay not directly work when loaded as a file\n\nNodeJS allows execution from command line"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#dom",
    "href": "pages/MAD-2/w1-slides.html#dom",
    "title": "Modern Application Development - II — Week 1",
    "section": "DOM",
    "text": "DOM\n\nDocument Object Model\n\nStructure of the document shown on the browser\n\nDOM can be manipulated through JS APIs\nOne of the most powerful aspects of JavaScript\nInput: clicks, textboxes, mouseover, …\nOutput: text, colours/styles, drawing, …"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#references",
    "href": "pages/MAD-2/w1-slides.html#references",
    "title": "Modern Application Development - II — Week 1",
    "section": "References",
    "text": "References\n\nExploring JavaScript - exploringjs.com\n\ndetailed reference material, focused on language, not frontend or GUI - very up to date\n\nMozilla Developer Network\n\nseveral examples and compatibility hints\n\nLearn JavaScript Online - interactive tutorial\n\n\nUtilities\n\nBabelJS - Compiler converts new JS to older compatible forms\nJS Console - interactive console to try out code\nRepl.it - complete application development"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#basic-frontend-usage",
    "href": "pages/MAD-2/w1-slides.html#basic-frontend-usage",
    "title": "Modern Application Development - II — Week 1",
    "section": "Basic Frontend Usage",
    "text": "Basic Frontend Usage\n\nFrontend JavaScript: must be invoked from HTML page\n\nIn context of a “Document”\nwill not execute if loaded directly\n\nScripting language - no compilation step\nLoosely structured - no specific header, body etc."
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#identifiers---the-words-of-the-language",
    "href": "pages/MAD-2/w1-slides.html#identifiers---the-words-of-the-language",
    "title": "Modern Application Development - II — Week 1",
    "section": "Identifiers - the words of the language",
    "text": "Identifiers - the words of the language\n\nReserved words:\n`await` `break` `case` `catch` `class` `const` `continue` `debugger` `default` `delete` `do` `else` `export` `extends` `finally` `for` `function` `if` `import` `in` `instanceof` `let` `new` `return` `static` `super` `switch` `this` `throw` `try` `typeof` `var` `void` `while` `with` `yield`\n\n\nLiterals (values):\n`true` `false` `null`\n\n\nOthers to avoid\n`enum` `implements` `package` `protected` `interface` `private` `public` `Infinity` `NaN` `undefined` `async`"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#statements-and-expressions",
    "href": "pages/MAD-2/w1-slides.html#statements-and-expressions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Statements and Expressions",
    "text": "Statements and Expressions\n\n\n\nStatements:\n\nPiece of code that can be executed\n    if ( ... ) {\n        // do something\n    }\nStandalone operation or side effects\n\n\n\n\nExpressions:\n\nPiece of code that can be executed to obtain a value to be returned\n    x = 10;\n    \"Hello world\"\nAnywhere you need a “value” - function argument, math expression etc."
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#data-types",
    "href": "pages/MAD-2/w1-slides.html#data-types",
    "title": "Modern Application Development - II — Week 1",
    "section": "Data Types",
    "text": "Data Types\n\nPrimitive data types: built into the language\n\nundefined, null, boolean, number, string (+bigint, symbol)\n\nObjects:\n\nCompound pieces of data\n\nFunctions:\n\nCan be handled like objects\nObjects can have functions: methods\nFunctions can have objects???"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#strings",
    "href": "pages/MAD-2/w1-slides.html#strings",
    "title": "Modern Application Development - II — Week 1",
    "section": "Strings",
    "text": "Strings\n\nSource code is expected to be in Unicode\n\nmost engines expect UTF-16 encoding\n\nString functions like length can give surprising results on non-ASCII words\nCan have variables in other languages!\n\nBut best avoided… keep readability in mind"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#non-values",
    "href": "pages/MAD-2/w1-slides.html#non-values",
    "title": "Modern Application Development - II — Week 1",
    "section": "Non-Values",
    "text": "Non-Values\n\nundefined\n\nUsually implies not initialized\nDefault unknown state\n\nnull\n\nExplicitly set to a non-value\n\n\n\nVery similar and may be used interchangeably in most places - keep context in mind when using for clarity of code"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#operators-and-comparisons",
    "href": "pages/MAD-2/w1-slides.html#operators-and-comparisons",
    "title": "Modern Application Development - II — Week 1",
    "section": "Operators and Comparisons",
    "text": "Operators and Comparisons\n\nAddition, subtraction etc.\n\nNumbers, Strings\n\nCoercion\n\nConvert to similar type where operation is defined\nCan lead to problems - needs care\n\nComparison:\n\nLoose equality: == tries to coerce\nStrict equality: === no coercion\n\nImportant for iteration, conditions"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#variables-and-scoping",
    "href": "pages/MAD-2/w1-slides.html#variables-and-scoping",
    "title": "Modern Application Development - II — Week 1",
    "section": "Variables and Scoping",
    "text": "Variables and Scoping\n\nAny non-reserved identifier can be used as a “placeholder” or “variable”\nScope:\n\nShould the variable be visible everywhere in all scripts or only in a specific area?\nNamespaces and limiting scope\n\nlet, const are used for declaring variables\n\nUnlike Python, variables MUST be declared\nUnlike C, their type need NOT be declared\nvar was originally used for declaring variables, but has function level scope - avoid"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#let-and-const",
    "href": "pages/MAD-2/w1-slides.html#let-and-const",
    "title": "Modern Application Development - II — Week 1",
    "section": "let and const",
    "text": "let and const\n\nconst : declares an immutable object\n\nValue cannot be changed once assigned\nBut only within scope\n\nlet: variable that can be updated\n\nindex variable in for loops\ngeneral variables"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#control-flow",
    "href": "pages/MAD-2/w1-slides.html#control-flow",
    "title": "Modern Application Development - II — Week 1",
    "section": "Control Flow",
    "text": "Control Flow\n\nConditional execution:\n\nif , else\n\nIteration\n\nfor , while\n\nChange in flow\n\nbreak, continue\n\nChoice\n\nswitch"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#functions",
    "href": "pages/MAD-2/w1-slides.html#functions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Functions",
    "text": "Functions\n\nReusable block of code\nCan take parameters or arguments and perform computation\nFunctions are themselves objects that can be assigned!"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#function-notation",
    "href": "pages/MAD-2/w1-slides.html#function-notation",
    "title": "Modern Application Development - II — Week 1",
    "section": "Function Notation",
    "text": "Function Notation\n\n\nRegular declaration\n    function add(x, y)\n    {\n    return x + y;\n    }\n    // Statement\n\nNamed variable\n    let add =\n    function(x, y) {\n    return x + y;\n    }\n    // Expression\n\nArrow function\n    let add =\n    (x, y) =&gt; x + y;\n\n    // Expression"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#anonymous-functions-and-iifes",
    "href": "pages/MAD-2/w1-slides.html#anonymous-functions-and-iifes",
    "title": "Modern Application Development - II — Week 1",
    "section": "Anonymous Functions and IIFEs",
    "text": "Anonymous Functions and IIFEs\n    let x = function() { return \"hello\"} // Anonymous bound\n\n    (function() { return \"hello\"})() // Declare and invoke\n\nWhy? Older JS versions did not have good scoping rules. - Avoid IIFEs in modern code - poor readability"
  },
  {
    "objectID": "pages/MAD-2/w1-slides.html#interaction",
    "href": "pages/MAD-2/w1-slides.html#interaction",
    "title": "Modern Application Development - II — Week 1",
    "section": "Interaction",
    "text": "Interaction\n\nconsole.log is very limited\n\nvariants for error logging etc.\nBut mostly useful only for limited form of debugging - not production use\n\nBut JS was designed for document manipulation!\nInputs from DOM: mouse, text, clicks\nOutputs to DOM: manipulation of text, colours etc.\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html",
    "href": "pages/MAD-2/w2-slides.html",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Collection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration\n\n\n\n\n\nGo over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions\n\n\n\n\n\nFunctions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\n. . .\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose\n\n\n\n\nMaps: proper dictionary-like objects\nWeakMaps\nSets\n\n\n\n\n\nSimple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects\n\n\n\n\n\nFunctions that yield values one at a time\nComputed iterables\nDynamically generate iterators"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#basic-arrays",
    "href": "pages/MAD-2/w2-slides.html#basic-arrays",
    "title": "Modern Application Development II - Week 2",
    "section": "Basic Arrays",
    "text": "Basic Arrays\n\nCollection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#iteration",
    "href": "pages/MAD-2/w2-slides.html#iteration",
    "title": "Modern Application Development II - Week 2",
    "section": "Iteration",
    "text": "Iteration\n\nGo over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#iterations-and-transformations",
    "href": "pages/MAD-2/w2-slides.html#iterations-and-transformations",
    "title": "Modern Application Development II - Week 2",
    "section": "Iterations and Transformations",
    "text": "Iterations and Transformations\n\nFunctions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\n\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#other-collections",
    "href": "pages/MAD-2/w2-slides.html#other-collections",
    "title": "Modern Application Development II - Week 2",
    "section": "Other Collections",
    "text": "Other Collections\n\nMaps: proper dictionary-like objects\nWeakMaps\nSets"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#destructuring",
    "href": "pages/MAD-2/w2-slides.html#destructuring",
    "title": "Modern Application Development II - Week 2",
    "section": "Destructuring",
    "text": "Destructuring\n\nSimple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#generators",
    "href": "pages/MAD-2/w2-slides.html#generators",
    "title": "Modern Application Development II - Week 2",
    "section": "Generators",
    "text": "Generators\n\nFunctions that yield values one at a time\nComputed iterables\nDynamically generate iterators"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#modules",
    "href": "pages/MAD-2/w2-slides.html#modules",
    "title": "Modern Application Development II - Week 2",
    "section": "Modules",
    "text": "Modules\n\nCollect related functions, objects, values together\n“export” values for use by other scripts\n“import” values from other scripts, packages"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#ways-of-implementing",
    "href": "pages/MAD-2/w2-slides.html#ways-of-implementing",
    "title": "Modern Application Development II - Week 2",
    "section": "Ways of implementing",
    "text": "Ways of implementing\n\nscript - directly include script inside browser\nCommonJS - introduced for server-side modules\n\nsynchronous load: server blocks till module is loaded\n\nAMD - asynchronous module definition\n\nused for browser-side modules\n\n\n\nECMAScript 6 and above:\n\nES6 modules\n\nBoth servers and browsers\nAsynchronous loading"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#npm",
    "href": "pages/MAD-2/w2-slides.html#npm",
    "title": "Modern Application Development II - Week 2",
    "section": "npm",
    "text": "npm\n\nNode Package Manager\nNode:\n\ncommand line interface for JS\nMainly used for backend code, can also be used for testing\n\nnpm can also be used to package modules for frontend\n\n“Bundle” managers - webpack, rollup, etc."
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#objects",
    "href": "pages/MAD-2/w2-slides.html#objects",
    "title": "Modern Application Development II - Week 2",
    "section": "Objects",
    "text": "Objects\n\nEverything in JavaScript is an object\nObject literals\n\nAssign values to named parameters in an object\n\nObject methods\n\nAssign functions that can be called on the object\n\nSpecial variable this - refers to the object itself\nFunction methods\n\ncall(), apply(), bind()\n\nObject.keys(), values(), entries()\n\nuse as dictionary\niterators"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#prototype-based-inheritance",
    "href": "pages/MAD-2/w2-slides.html#prototype-based-inheritance",
    "title": "Modern Application Development II - Week 2",
    "section": "Prototype based inheritance",
    "text": "Prototype based inheritance\n\nObjects can have a “prototype”\nAutomatically inherit properties and methods of parent object\nSingle inheritance track"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#class",
    "href": "pages/MAD-2/w2-slides.html#class",
    "title": "Modern Application Development II - Week 2",
    "section": "Class",
    "text": "Class\n\nBetter syntax - still prototype based inheritance\nconstructor must explicitly call super()\nMultiple inheritance of Mixins"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#function-calls",
    "href": "pages/MAD-2/w2-slides.html#function-calls",
    "title": "Modern Application Development II - Week 2",
    "section": "Function calls",
    "text": "Function calls\n\n\n\nFunction is like a “branch”\n\nbut must save present state so we can return\n\nCall stack:\n\nKeep track of chain of functions called up to now\nPop back up out of the stack\n\n\n\n\nmain() on stack - current - calls f()\nf() goes on stack - calls g()\ng() goes on stack - calls h()\nh() goes on stack - executes\nreturn from h -&gt; pop into g\nreturn from g -&gt; pop into f\nreturn from f -&gt; pop into main"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#call-stack",
    "href": "pages/MAD-2/w2-slides.html#call-stack",
    "title": "Modern Application Development II - Week 2",
    "section": "Call Stack",
    "text": "Call Stack\nExplanatory video\nVisualize the call stack"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#event-loop-and-task-queue",
    "href": "pages/MAD-2/w2-slides.html#event-loop-and-task-queue",
    "title": "Modern Application Development II - Week 2",
    "section": "Event Loop and Task Queue",
    "text": "Event Loop and Task Queue\n\nTask Queue: store next task to be executed\n\nTasks are pushed into the queue by events (clicks, input, network etc.)\n\nEvent loop:\n\nWait for call stack to be empty\nPop next task from queue and push onto stack, start executing\n\nRun-to-completion\n\nGuarantee from JavaScript runtime\nEach task will run to completion before next task is picked up"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#blocking-the-browser",
    "href": "pages/MAD-2/w2-slides.html#blocking-the-browser",
    "title": "Modern Application Development II - Week 2",
    "section": "Blocking the browser",
    "text": "Blocking the browser\nhttps://exploringjs.com/impatient-js/ch_async-js.html#how-to-avoid-blocking-the-javascript-process"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#why-callbacks",
    "href": "pages/MAD-2/w2-slides.html#why-callbacks",
    "title": "Modern Application Development II - Week 2",
    "section": "Why callbacks?",
    "text": "Why callbacks?\n\nLong running code\n\nWill block execution till it finishes\n\nPush long running code into a separate “thread” or “task”\n\nLet main code proceed\nCall back when task is done"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#example-reading-files---synchronous",
    "href": "pages/MAD-2/w2-slides.html#example-reading-files---synchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - synchronous",
    "text": "Example: reading files - synchronous\n\nconst fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('file.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#example-reading-files---asynchronous",
    "href": "pages/MAD-2/w2-slides.html#example-reading-files---asynchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - asynchronous",
    "text": "Example: reading files - asynchronous\n\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#asynchronous-code",
    "href": "pages/MAD-2/w2-slides.html#asynchronous-code",
    "title": "Modern Application Development II - Week 2",
    "section": "Asynchronous Code",
    "text": "Asynchronous Code\n\nVery powerful - allows JS to have high performance even though it is single-threaded\nCan be difficult to comprehend\n\nFocus on using async libraries and functions before writing your own\n\nPromises, async function calls, etc.\n\nImportant and useful concepts\nDeferred for now"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#json",
    "href": "pages/MAD-2/w2-slides.html#json",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON",
    "text": "JSON\n\nObject Notation - for serialization, communication\nNotation is frozen\n\nMeans even problem cases will remain (trailing “.” could ve useful but will not be used)\n\nUsage through JSON API"
  },
  {
    "objectID": "pages/MAD-2/w2-slides.html#json-api",
    "href": "pages/MAD-2/w2-slides.html#json-api",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON API",
    "text": "JSON API\n\nGlobal namespace object JSON\nMain methods:\n\nJSON.stringify()\nJSON.parse()\n\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/MAD-2/w1.html",
    "href": "pages/MAD-2/w1.html",
    "title": "Modern Application Development - II — Week 1",
    "section": "",
    "text": "What is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems\n\n\n\n\n\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc.\n\n\n\n\n\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc.",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#review-of-mad-i",
    "href": "pages/MAD-2/w1.html#review-of-mad-i",
    "title": "Modern Application Development - II — Week 1",
    "section": "",
    "text": "What is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#review-of-the-web-application-development-model",
    "href": "pages/MAD-2/w1.html#review-of-the-web-application-development-model",
    "title": "Modern Application Development - II — Week 1",
    "section": "",
    "text": "Presentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc.",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#moving-forward",
    "href": "pages/MAD-2/w1.html#moving-forward",
    "title": "Modern Application Development - II — Week 1",
    "section": "",
    "text": "Advanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc.",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#origins",
    "href": "pages/MAD-2/w1.html#origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Origins",
    "text": "Origins\n\nOriginally created in 1995 as scripting language for Netscape Navigator\nIntended as “glue” language\n\nStick modules from other languages together\nNot really meant for much code\n\nPrimarily meant to assist “applets” in Java - hence JavaScript\n\nTrademark issues, name changes, …\n\nIssues:\n\nSlow\nLimited capability",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#power",
    "href": "pages/MAD-2/w1.html#power",
    "title": "Modern Application Development - II — Week 1",
    "section": "Power",
    "text": "Power\n\nGlue was useful, but…\nThen Google Maps, Google Suggest etc. (~ 2005)\n\nPan around map, zoom in/out seamlessly - fluid user interface:\nLoad only what is needed!\n\nDescribed and Named Ajax - Garrett 2005\n\nAsynchronous Javascript and XML\n\nAllowed true “web applications” that behave like desktop applications\nEvolved considerably since then\n\nMuch more on this approach moving forward",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#standardization",
    "href": "pages/MAD-2/w1.html#standardization",
    "title": "Modern Application Development - II — Week 1",
    "section": "Standardization",
    "text": "Standardization\n\nMove beyond Netscape needed\nECMA (European Computer Manufacturers Association) - standard 262\nSubsequently called ECMAScript\n\nAvoid trademark issues with Java\n\nIn practice:\n\nLanguage standard called ECMAScript (versions)\nImplementation and use: JavaScript\n\nSignificant changes in ES6 - 2015\n\nYearly releases since then\n“Feature readiness” oriented approach",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#what-version-to-use",
    "href": "pages/MAD-2/w1.html#what-version-to-use",
    "title": "Modern Application Development - II — Week 1",
    "section": "What version to use?",
    "text": "What version to use?\n\nES6 has most features of modern languages (modules, scoping, class etc.)\nSome older browsers may not support all of this\nPossible approaches:\n\nIgnore old browsers and ask user to upgrade\nPackage browser along with application - useful for limited cases, like VSCode (Electron apps)\nPolyfills: include libraries that emulate newer functionality for older browsers\nCompilers: BabelJS - convert new code to older compatible versions\n\nBackend\n\nNode.js, Deno: directly use JS as a scripting language like Python",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#implications-of-js-origins",
    "href": "pages/MAD-2/w1.html#implications-of-js-origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Implications of JS Origins",
    "text": "Implications of JS Origins\n\nEase of use given priority over performance (to start with)\nHighly tolerant of errors - fail silently\n\nDebugging difficult!\nStrict mode: “use strict”;\n\nAmbiguous syntax variants\n\nAutomatic semicolon insertion\nObject literals vs Code blocks {}\nFunction: statement or expression? Impacts parsing\n\nLimited IO support: errors “logged” to “console”\nClosely integrates with presentation layer: DOM APIs\nAsynchronous processing and the Event Loop - very powerful!",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#using-js",
    "href": "pages/MAD-2/w1.html#using-js",
    "title": "Modern Application Development - II — Week 1",
    "section": "Using JS",
    "text": "Using JS\n\nNot originally meant for direct scripting\n\nUsually not run from command line like Python for instance\n\nNeed HTML file to load the JS as a script\n\nRequires browser to serve the files\nLinks and script tags etc.\nMay not directly work when loaded as a file\n\nNodeJS allows execution from command line",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#dom",
    "href": "pages/MAD-2/w1.html#dom",
    "title": "Modern Application Development - II — Week 1",
    "section": "DOM",
    "text": "DOM\n\nDocument Object Model\n\nStructure of the document shown on the browser\n\nDOM can be manipulated through JS APIs\nOne of the most powerful aspects of JavaScript\nInput: clicks, textboxes, mouseover, …\nOutput: text, colours/styles, drawing, …",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#references",
    "href": "pages/MAD-2/w1.html#references",
    "title": "Modern Application Development - II — Week 1",
    "section": "References",
    "text": "References\n\nExploring JavaScript - exploringjs.com\n\ndetailed reference material, focused on language, not frontend or GUI - very up to date\n\nMozilla Developer Network\n\nseveral examples and compatibility hints\n\nLearn JavaScript Online - interactive tutorial\n\nUtilities\n\nBabelJS - Compiler converts new JS to older compatible forms\nJS Console - interactive console to try out code\nRepl.it - complete application development",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#basic-frontend-usage",
    "href": "pages/MAD-2/w1.html#basic-frontend-usage",
    "title": "Modern Application Development - II — Week 1",
    "section": "Basic Frontend Usage",
    "text": "Basic Frontend Usage\n\nFrontend JavaScript: must be invoked from HTML page\n\nIn context of a “Document”\nwill not execute if loaded directly\n\nScripting language - no compilation step\nLoosely structured - no specific header, body etc.",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#identifiers---the-words-of-the-language",
    "href": "pages/MAD-2/w1.html#identifiers---the-words-of-the-language",
    "title": "Modern Application Development - II — Week 1",
    "section": "Identifiers - the words of the language",
    "text": "Identifiers - the words of the language\nReserved words:\n`await` `break` `case` `catch` `class` `const` `continue` `debugger` `default` `delete` `do` `else` `export` `extends` `finally` `for` `function` `if` `import` `in` `instanceof` `let` `new` `return` `static` `super` `switch` `this` `throw` `try` `typeof` `var` `void` `while` `with` `yield`\nLiterals (values):\n`true` `false` `null`\nOthers to avoid\n`enum` `implements` `package` `protected` `interface` `private` `public` `Infinity` `NaN` `undefined` `async`",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#statements-and-expressions",
    "href": "pages/MAD-2/w1.html#statements-and-expressions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Statements and Expressions",
    "text": "Statements and Expressions\n\n\n\nStatements:\n\nPiece of code that can be executed\n    if ( ... ) {\n        // do something\n    }\nStandalone operation or side effects\n\n\n\n\nExpressions:\n\nPiece of code that can be executed to obtain a value to be returned\n    x = 10;\n    \"Hello world\"\nAnywhere you need a “value” - function argument, math expression etc.",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#data-types",
    "href": "pages/MAD-2/w1.html#data-types",
    "title": "Modern Application Development - II — Week 1",
    "section": "Data Types",
    "text": "Data Types\n\nPrimitive data types: built into the language\n\nundefined, null, boolean, number, string (+bigint, symbol)\n\nObjects:\n\nCompound pieces of data\n\nFunctions:\n\nCan be handled like objects\nObjects can have functions: methods\nFunctions can have objects???",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#strings",
    "href": "pages/MAD-2/w1.html#strings",
    "title": "Modern Application Development - II — Week 1",
    "section": "Strings",
    "text": "Strings\n\nSource code is expected to be in Unicode\n\nmost engines expect UTF-16 encoding\n\nString functions like length can give surprising results on non-ASCII words\nCan have variables in other languages!\n\nBut best avoided… keep readability in mind",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#non-values",
    "href": "pages/MAD-2/w1.html#non-values",
    "title": "Modern Application Development - II — Week 1",
    "section": "Non-Values",
    "text": "Non-Values\n\nundefined\n\nUsually implies not initialized\nDefault unknown state\n\nnull\n\nExplicitly set to a non-value\n\n\nVery similar and may be used interchangeably in most places - keep context in mind when using for clarity of code",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#operators-and-comparisons",
    "href": "pages/MAD-2/w1.html#operators-and-comparisons",
    "title": "Modern Application Development - II — Week 1",
    "section": "Operators and Comparisons",
    "text": "Operators and Comparisons\n\nAddition, subtraction etc.\n\nNumbers, Strings\n\nCoercion\n\nConvert to similar type where operation is defined\nCan lead to problems - needs care\n\nComparison:\n\nLoose equality: == tries to coerce\nStrict equality: === no coercion\n\nImportant for iteration, conditions",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#variables-and-scoping",
    "href": "pages/MAD-2/w1.html#variables-and-scoping",
    "title": "Modern Application Development - II — Week 1",
    "section": "Variables and Scoping",
    "text": "Variables and Scoping\n\nAny non-reserved identifier can be used as a “placeholder” or “variable”\nScope:\n\nShould the variable be visible everywhere in all scripts or only in a specific area?\nNamespaces and limiting scope\n\nlet, const are used for declaring variables\n\nUnlike Python, variables MUST be declared\nUnlike C, their type need NOT be declared\nvar was originally used for declaring variables, but has function level scope - avoid",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#let-and-const",
    "href": "pages/MAD-2/w1.html#let-and-const",
    "title": "Modern Application Development - II — Week 1",
    "section": "let and const",
    "text": "let and const\n\nconst : declares an immutable object\n\nValue cannot be changed once assigned\nBut only within scope\n\nlet: variable that can be updated\n\nindex variable in for loops\ngeneral variables",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#control-flow",
    "href": "pages/MAD-2/w1.html#control-flow",
    "title": "Modern Application Development - II — Week 1",
    "section": "Control Flow",
    "text": "Control Flow\n\nConditional execution:\n\nif , else\n\nIteration\n\nfor , while\n\nChange in flow\n\nbreak, continue\n\nChoice\n\nswitch",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#functions",
    "href": "pages/MAD-2/w1.html#functions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Functions",
    "text": "Functions\n\nReusable block of code\nCan take parameters or arguments and perform computation\nFunctions are themselves objects that can be assigned!",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#function-notation",
    "href": "pages/MAD-2/w1.html#function-notation",
    "title": "Modern Application Development - II — Week 1",
    "section": "Function Notation",
    "text": "Function Notation\n\n\nRegular declaration\n    function add(x, y)\n    {\n    return x + y;\n    }\n    // Statement\n\nNamed variable\n    let add =\n    function(x, y) {\n    return x + y;\n    }\n    // Expression\n\nArrow function\n    let add =\n    (x, y) =&gt; x + y;\n\n    // Expression",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#anonymous-functions-and-iifes",
    "href": "pages/MAD-2/w1.html#anonymous-functions-and-iifes",
    "title": "Modern Application Development - II — Week 1",
    "section": "Anonymous Functions and IIFEs",
    "text": "Anonymous Functions and IIFEs\n    let x = function() { return \"hello\"} // Anonymous bound\n\n    (function() { return \"hello\"})() // Declare and invoke\nWhy? Older JS versions did not have good scoping rules. - Avoid IIFEs in modern code - poor readability",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w1.html#interaction",
    "href": "pages/MAD-2/w1.html#interaction",
    "title": "Modern Application Development - II — Week 1",
    "section": "Interaction",
    "text": "Interaction\n\nconsole.log is very limited\n\nvariants for error logging etc.\nBut mostly useful only for limited form of debugging - not production use\n\nBut JS was designed for document manipulation!\nInputs from DOM: mouse, text, clicks\nOutputs to DOM: manipulation of text, colours etc.",
    "crumbs": [
      "MAD-2",
      "Week 1"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html",
    "href": "pages/MAD-2/w2.html",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Collection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration\n\n\n\n\n\nGo over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions\n\n\n\n\n\nFunctions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose\n\n\n\n\nMaps: proper dictionary-like objects\nWeakMaps\nSets\n\n\n\n\n\nSimple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects\n\n\n\n\n\nFunctions that yield values one at a time\nComputed iterables\nDynamically generate iterators",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#basic-arrays",
    "href": "pages/MAD-2/w2.html#basic-arrays",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Collection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#iteration",
    "href": "pages/MAD-2/w2.html#iteration",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Go over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#iterations-and-transformations",
    "href": "pages/MAD-2/w2.html#iterations-and-transformations",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Functions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#other-collections",
    "href": "pages/MAD-2/w2.html#other-collections",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Maps: proper dictionary-like objects\nWeakMaps\nSets",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#destructuring",
    "href": "pages/MAD-2/w2.html#destructuring",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Simple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#generators",
    "href": "pages/MAD-2/w2.html#generators",
    "title": "Modern Application Development II - Week 2",
    "section": "",
    "text": "Functions that yield values one at a time\nComputed iterables\nDynamically generate iterators",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#modules",
    "href": "pages/MAD-2/w2.html#modules",
    "title": "Modern Application Development II - Week 2",
    "section": "Modules",
    "text": "Modules\n\nCollect related functions, objects, values together\n“export” values for use by other scripts\n“import” values from other scripts, packages",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#ways-of-implementing",
    "href": "pages/MAD-2/w2.html#ways-of-implementing",
    "title": "Modern Application Development II - Week 2",
    "section": "Ways of implementing",
    "text": "Ways of implementing\n\nscript - directly include script inside browser\nCommonJS - introduced for server-side modules\n\nsynchronous load: server blocks till module is loaded\n\nAMD - asynchronous module definition\n\nused for browser-side modules\n\n\nECMAScript 6 and above:\n\nES6 modules\n\nBoth servers and browsers\nAsynchronous loading",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#npm",
    "href": "pages/MAD-2/w2.html#npm",
    "title": "Modern Application Development II - Week 2",
    "section": "npm",
    "text": "npm\n\nNode Package Manager\nNode:\n\ncommand line interface for JS\nMainly used for backend code, can also be used for testing\n\nnpm can also be used to package modules for frontend\n\n“Bundle” managers - webpack, rollup, etc.",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#objects",
    "href": "pages/MAD-2/w2.html#objects",
    "title": "Modern Application Development II - Week 2",
    "section": "Objects",
    "text": "Objects\n\nEverything in JavaScript is an object\nObject literals\n\nAssign values to named parameters in an object\n\nObject methods\n\nAssign functions that can be called on the object\n\nSpecial variable this - refers to the object itself\nFunction methods\n\ncall(), apply(), bind()\n\nObject.keys(), values(), entries()\n\nuse as dictionary\niterators",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#prototype-based-inheritance",
    "href": "pages/MAD-2/w2.html#prototype-based-inheritance",
    "title": "Modern Application Development II - Week 2",
    "section": "Prototype based inheritance",
    "text": "Prototype based inheritance\n\nObjects can have a “prototype”\nAutomatically inherit properties and methods of parent object\nSingle inheritance track",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#class",
    "href": "pages/MAD-2/w2.html#class",
    "title": "Modern Application Development II - Week 2",
    "section": "Class",
    "text": "Class\n\nBetter syntax - still prototype based inheritance\nconstructor must explicitly call super()\nMultiple inheritance of Mixins",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#function-calls",
    "href": "pages/MAD-2/w2.html#function-calls",
    "title": "Modern Application Development II - Week 2",
    "section": "Function calls",
    "text": "Function calls\n\n\n\nFunction is like a “branch”\n\nbut must save present state so we can return\n\nCall stack:\n\nKeep track of chain of functions called up to now\nPop back up out of the stack\n\n\n\n\nmain() on stack - current - calls f()\nf() goes on stack - calls g()\ng() goes on stack - calls h()\nh() goes on stack - executes\nreturn from h -&gt; pop into g\nreturn from g -&gt; pop into f\nreturn from f -&gt; pop into main",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#call-stack",
    "href": "pages/MAD-2/w2.html#call-stack",
    "title": "Modern Application Development II - Week 2",
    "section": "Call Stack",
    "text": "Call Stack\nExplanatory video\nVisualize the call stack",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#event-loop-and-task-queue",
    "href": "pages/MAD-2/w2.html#event-loop-and-task-queue",
    "title": "Modern Application Development II - Week 2",
    "section": "Event Loop and Task Queue",
    "text": "Event Loop and Task Queue\n\nTask Queue: store next task to be executed\n\nTasks are pushed into the queue by events (clicks, input, network etc.)\n\nEvent loop:\n\nWait for call stack to be empty\nPop next task from queue and push onto stack, start executing\n\nRun-to-completion\n\nGuarantee from JavaScript runtime\nEach task will run to completion before next task is picked up",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#blocking-the-browser",
    "href": "pages/MAD-2/w2.html#blocking-the-browser",
    "title": "Modern Application Development II - Week 2",
    "section": "Blocking the browser",
    "text": "Blocking the browser\nhttps://exploringjs.com/impatient-js/ch_async-js.html#how-to-avoid-blocking-the-javascript-process",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#why-callbacks",
    "href": "pages/MAD-2/w2.html#why-callbacks",
    "title": "Modern Application Development II - Week 2",
    "section": "Why callbacks?",
    "text": "Why callbacks?\n\nLong running code\n\nWill block execution till it finishes\n\nPush long running code into a separate “thread” or “task”\n\nLet main code proceed\nCall back when task is done",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#example-reading-files---synchronous",
    "href": "pages/MAD-2/w2.html#example-reading-files---synchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - synchronous",
    "text": "Example: reading files - synchronous\nconst fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('file.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#example-reading-files---asynchronous",
    "href": "pages/MAD-2/w2.html#example-reading-files---asynchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - asynchronous",
    "text": "Example: reading files - asynchronous\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#asynchronous-code",
    "href": "pages/MAD-2/w2.html#asynchronous-code",
    "title": "Modern Application Development II - Week 2",
    "section": "Asynchronous Code",
    "text": "Asynchronous Code\n\nVery powerful - allows JS to have high performance even though it is single-threaded\nCan be difficult to comprehend\n\nFocus on using async libraries and functions before writing your own\n\nPromises, async function calls, etc.\n\nImportant and useful concepts\nDeferred for now",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#json",
    "href": "pages/MAD-2/w2.html#json",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON",
    "text": "JSON\n\nObject Notation - for serialization, communication\nNotation is frozen\n\nMeans even problem cases will remain (trailing “.” could ve useful but will not be used)\n\nUsage through JSON API",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/MAD-2/w2.html#json-api",
    "href": "pages/MAD-2/w2.html#json-api",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON API",
    "text": "JSON API\n\nGlobal namespace object JSON\nMain methods:\n\nJSON.stringify()\nJSON.parse()",
    "crumbs": [
      "MAD-2",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html",
    "href": "pages/DBMS/w3.html",
    "title": "Week 3",
    "section": "",
    "text": "From the classroom relation, find the names of buildings in which every individual classroom has capacity less than 100 (removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT DISTINCT building\nFROM classroom\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\n\n\n\n\n\n\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has a capacity of less than 100 (without removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT ALL building\nFROM classroom C\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\nWatson\n\n\n\n\n\n\nNote that duplicate retention is the default and hence it is a common practice to skip all immediately after select.\n\n\n\n\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFind the list of all students of departments which have a budget &lt; $0.1million\n\nSELECT name, budget\nFROM student, department\nWHERE student.dept_name = department.dept_name AND budget &lt; 100000;\n\n\n\n\n\nname\nbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query first generates every possible student-department pair, which is the Cartesian product of the student and department relations. Then, it filters out all the rows with student.dept_name = department.dept_name and department.budget &lt; 100000.\nThe common attribute dept_name in the resulting table is renamed using the relation name - student.dept_name and department.dept_name.\n\n\n\n\n\nThe same query above can be framed by renaming the tables as follows:\n\nSELECT S.name AS studentname, budget AS deptbudget\nFROM student AS S, department AS D\nWHERE S.dept_name = D.dept_name AND budget &lt; 100000;\n\n\n\n\n\nstudentname\ndeptbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query renames the relations student and department as S and D respectively\nIt also displays the attribute name as StudentName and budget as DeptBudget\nNote that the budget attribute does not have any prefix because it occurs only in the department relation.\n\n\n\n\n\nFrom the instructor and department relations, find out the names of all instructors whose department is Finance or whose department is in any of the following buildings: Watson, Taylor.\n\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\nSELECT name\nFROM instructor I, department D\nWHERE I.dept_name = D.dept_name\nAND (I.dept_name = 'Finance' OR building IN ('Watson', 'Taylor'));\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nEinstein\n\n\nGold\n\n\nKatz\n\n\nSingh\n\n\nCrick\n\n\nBrandt\n\n\nKim\n\n\n\n\n\n\n\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the titles of all courses whose course_id has three alphabets indicating the department.\n\nSELECT title\nFROM course\nWHERE course_id LIKE '___-%';\n\n\n\n\n\ntitle\n\n\n\n\nIntro. to Biology\n\n\nGenetics\n\n\nComputational Biology\n\n\nInvestment Banking\n\n\nWorld History\n\n\nPhysical Principles\n\n\n\n\n\n\nThe course_id of each department either has 2 or 3 alphabets in the beginning, followed by a hypher and then followed by 3 digits. The above query returns the names of all courses whose course_id has 3 alphabets in the beginning.\n\n\n\n\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation in the table, obtain the list of all students in alphabetic order of departments and within each department, in decreasing order of total credits.\n\nSELECT name, dept_name, tot_cred\nFROM student\nORDER BY dept_name ASC, tot_cred DESC;\n\n\n\n\n\nname\ndept_name\ntot_cred\n\n\n\n\nTanaka\nBiology\n120\n\n\nZhang\nComp. Sci.\n102\n\n\nBrown\nComp. Sci.\n58\n\n\nWilliams\nComp. Sci.\n54\n\n\nShankar\nComp. Sci.\n32\n\n\nBourikas\nElec. Eng.\n98\n\n\nAoi\nElec. Eng.\n60\n\n\nChavez\nFinance\n110\n\n\nBrandt\nHistory\n80\n\n\nSanchez\nMusic\n38\n\n\nPeltier\nPhysics\n56\n\n\nLevy\nPhysics\n46\n\n\nSnow\nPhysics\n0\n\n\n\n\n\n\nThe list is first sorted in alphabetic order of dept name.\nWithin each dept, it is sorted in decreasing order of total credits.\n\n\n\n\n\n\n\n\n\nID\ncourse_id\nsec_id\nsemester\nyear\n\n\n\n\n10101\nCS-101\n1\nFall\n2017\n\n\n10101\nCS-315\n1\nSpring\n2018\n\n\n10101\nCS-347\n1\nFall\n2017\n\n\n12121\nFIN-201\n1\nSpring\n2018\n\n\n15151\nMU-199\n1\nSpring\n2018\n\n\n22222\nPHY-101\n1\nFall\n2017\n\n\n32343\nHIS-351\n1\nSpring\n2018\n\n\n45565\nCS-101\n1\nSpring\n2018\n\n\n45565\nCS-319\n1\nSpring\n2018\n\n\n76766\nBIO-101\n1\nSummer\n2017\n\n\n76766\nBIO-301\n1\nSummer\n2018\n\n\n83821\nCS-190\n1\nSpring\n2017\n\n\n83821\nCS-190\n2\nSpring\n2017\n\n\n83821\nCS-319\n2\nSpring\n2018\n\n\n98345\nEE-181\n1\nSpring\n2017\n\n\n\n\n\n\nFrom the teaches relation, find the IDs of all courses taught in the Fall or Spring of 2018.\n\nSELECT course_id\nFROM teaches\nWHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319\n\n\nCS-319\n\n\n\n\n\n\nNote: We can use distinct to remove duplicates.\n\n    SELECT DISTINCT course_id\n    FROM teaches\n    WHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#select-distinct",
    "href": "pages/DBMS/w3.html#select-distinct",
    "title": "Week 3",
    "section": "",
    "text": "From the classroom relation, find the names of buildings in which every individual classroom has capacity less than 100 (removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT DISTINCT building\nFROM classroom\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#select-all",
    "href": "pages/DBMS/w3.html#select-all",
    "title": "Week 3",
    "section": "",
    "text": "From the classroom relation, find the names of buildings in which every individual classroom has a capacity of less than 100 (without removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT ALL building\nFROM classroom C\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\nWatson\n\n\n\n\n\n\nNote that duplicate retention is the default and hence it is a common practice to skip all immediately after select.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#cartesian-product",
    "href": "pages/DBMS/w3.html#cartesian-product",
    "title": "Week 3",
    "section": "",
    "text": "dept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFind the list of all students of departments which have a budget &lt; $0.1million\n\nSELECT name, budget\nFROM student, department\nWHERE student.dept_name = department.dept_name AND budget &lt; 100000;\n\n\n\n\n\nname\nbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query first generates every possible student-department pair, which is the Cartesian product of the student and department relations. Then, it filters out all the rows with student.dept_name = department.dept_name and department.budget &lt; 100000.\nThe common attribute dept_name in the resulting table is renamed using the relation name - student.dept_name and department.dept_name.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#rename-as-operation",
    "href": "pages/DBMS/w3.html#rename-as-operation",
    "title": "Week 3",
    "section": "",
    "text": "The same query above can be framed by renaming the tables as follows:\n\nSELECT S.name AS studentname, budget AS deptbudget\nFROM student AS S, department AS D\nWHERE S.dept_name = D.dept_name AND budget &lt; 100000;\n\n\n\n\n\nstudentname\ndeptbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query renames the relations student and department as S and D respectively\nIt also displays the attribute name as StudentName and budget as DeptBudget\nNote that the budget attribute does not have any prefix because it occurs only in the department relation.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#where-and-and-or",
    "href": "pages/DBMS/w3.html#where-and-and-or",
    "title": "Week 3",
    "section": "",
    "text": "From the instructor and department relations, find out the names of all instructors whose department is Finance or whose department is in any of the following buildings: Watson, Taylor.\n\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\nSELECT name\nFROM instructor I, department D\nWHERE I.dept_name = D.dept_name\nAND (I.dept_name = 'Finance' OR building IN ('Watson', 'Taylor'));\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nEinstein\n\n\nGold\n\n\nKatz\n\n\nSingh\n\n\nCrick\n\n\nBrandt\n\n\nKim",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#string-operations",
    "href": "pages/DBMS/w3.html#string-operations",
    "title": "Week 3",
    "section": "",
    "text": "course_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the titles of all courses whose course_id has three alphabets indicating the department.\n\nSELECT title\nFROM course\nWHERE course_id LIKE '___-%';\n\n\n\n\n\ntitle\n\n\n\n\nIntro. to Biology\n\n\nGenetics\n\n\nComputational Biology\n\n\nInvestment Banking\n\n\nWorld History\n\n\nPhysical Principles\n\n\n\n\n\n\nThe course_id of each department either has 2 or 3 alphabets in the beginning, followed by a hypher and then followed by 3 digits. The above query returns the names of all courses whose course_id has 3 alphabets in the beginning.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#order-by",
    "href": "pages/DBMS/w3.html#order-by",
    "title": "Week 3",
    "section": "",
    "text": "ID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation in the table, obtain the list of all students in alphabetic order of departments and within each department, in decreasing order of total credits.\n\nSELECT name, dept_name, tot_cred\nFROM student\nORDER BY dept_name ASC, tot_cred DESC;\n\n\n\n\n\nname\ndept_name\ntot_cred\n\n\n\n\nTanaka\nBiology\n120\n\n\nZhang\nComp. Sci.\n102\n\n\nBrown\nComp. Sci.\n58\n\n\nWilliams\nComp. Sci.\n54\n\n\nShankar\nComp. Sci.\n32\n\n\nBourikas\nElec. Eng.\n98\n\n\nAoi\nElec. Eng.\n60\n\n\nChavez\nFinance\n110\n\n\nBrandt\nHistory\n80\n\n\nSanchez\nMusic\n38\n\n\nPeltier\nPhysics\n56\n\n\nLevy\nPhysics\n46\n\n\nSnow\nPhysics\n0\n\n\n\n\n\n\nThe list is first sorted in alphabetic order of dept name.\nWithin each dept, it is sorted in decreasing order of total credits.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#in-operator",
    "href": "pages/DBMS/w3.html#in-operator",
    "title": "Week 3",
    "section": "",
    "text": "ID\ncourse_id\nsec_id\nsemester\nyear\n\n\n\n\n10101\nCS-101\n1\nFall\n2017\n\n\n10101\nCS-315\n1\nSpring\n2018\n\n\n10101\nCS-347\n1\nFall\n2017\n\n\n12121\nFIN-201\n1\nSpring\n2018\n\n\n15151\nMU-199\n1\nSpring\n2018\n\n\n22222\nPHY-101\n1\nFall\n2017\n\n\n32343\nHIS-351\n1\nSpring\n2018\n\n\n45565\nCS-101\n1\nSpring\n2018\n\n\n45565\nCS-319\n1\nSpring\n2018\n\n\n76766\nBIO-101\n1\nSummer\n2017\n\n\n76766\nBIO-301\n1\nSummer\n2018\n\n\n83821\nCS-190\n1\nSpring\n2017\n\n\n83821\nCS-190\n2\nSpring\n2017\n\n\n83821\nCS-319\n2\nSpring\n2018\n\n\n98345\nEE-181\n1\nSpring\n2017\n\n\n\n\n\n\nFrom the teaches relation, find the IDs of all courses taught in the Fall or Spring of 2018.\n\nSELECT course_id\nFROM teaches\nWHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319\n\n\nCS-319\n\n\n\n\n\n\nNote: We can use distinct to remove duplicates.\n\n    SELECT DISTINCT course_id\n    FROM teaches\n    WHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#set-operations-2-intersect",
    "href": "pages/DBMS/w3.html#set-operations-2-intersect",
    "title": "Week 3",
    "section": "Set Operations (2): intersect",
    "text": "Set Operations (2): intersect\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the names of all instructors who taught in either the Computer Science department or the Finance department and whose salary is &lt; 80000.\n\n    SELECT name\n    FROM instructor\n    WHERE dept_name IN ('Comp. Sci.', 'Finance')\n    INTERSECT\n    SELECT name\n    FROM instructor\n    WHERE salary &lt; 80000;\n\n\n\n\n\nname\n\n\n\n\nKatz\n\n\nSrinivasan\n\n\n\n\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance') AND salary &lt; 80000;\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nKatz",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#set-operations-3-except",
    "href": "pages/DBMS/w3.html#set-operations-3-except",
    "title": "Week 3",
    "section": "Set Operations (3): except",
    "text": "Set Operations (3): except\n\nFrom the instructor relation, find the names of all instructors who taught in the Computer Science department or the Finance department and whose salary is either &gt;= 90000 or &lt;= 70000.\n\n    SELECT name\n    FROM instructor\n    WHERE dept_name IN ('Comp. Sci.', 'Finance')\n    EXCEPT\n    SELECT name\n    FROM instructor\n    WHERE salary &lt; 90000 AND salary &gt; 70000;\n\n\n\n\n\nname\n\n\n\n\nBrandt\n\n\nSrinivasan\n\n\nWu\n\n\n\n\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance') AND (salary &gt;= 90000 OR salary &lt;= 70000);\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nBrandt",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#aggregate-functions-avg",
    "href": "pages/DBMS/w3.html#aggregate-functions-avg",
    "title": "Week 3",
    "section": "Aggregate functions: avg",
    "text": "Aggregate functions: avg\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\nFrom the classroom relation, find the names and the average capacity of each building whose average capacity is greater than 25.\n\n    SELECT building, AVG(capacity)\n    FROM classroom\n    GROUP BY building\n    HAVING AVG(capacity) &gt; 25;\n\n\n\n\n\nbuilding\nAVG(capacity)\n\n\n\n\nPackard\n500.0\n\n\nTaylor\n70.0\n\n\nWatson\n40.0",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#aggregate-functions-2-min",
    "href": "pages/DBMS/w3.html#aggregate-functions-2-min",
    "title": "Week 3",
    "section": "Aggregate functions (2): min",
    "text": "Aggregate functions (2): min\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the least salary drawn by any instructor among all the instructors.\n\nSELECT MIN(salary) AS least_salary\nFROM instructor;\n\n\n\n\n\nleast_salary\n\n\n\n\n40000",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#aggregate-functions-3-max",
    "href": "pages/DBMS/w3.html#aggregate-functions-3-max",
    "title": "Week 3",
    "section": "Aggregate functions (3): max",
    "text": "Aggregate functions (3): max\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation, find the maximum credits obtained by any student among all the students.\n\nSELECT MAX(tot_cred) AS max_credits\nFROM student;\n\n\n\n\n\nmax_credits\n\n\n\n\n120",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#aggregate-functions-4-count",
    "href": "pages/DBMS/w3.html#aggregate-functions-4-count",
    "title": "Week 3",
    "section": "Aggregate functions (4): count",
    "text": "Aggregate functions (4): count\n\n\n\n\n\ncourse_id\nsec_id\nsemester\nyear\nbuilding\nroom_number\ntime_slot_id\n\n\n\n\nBIO-101\n1\nSummer\n2017\nPainter\n514\nB\n\n\nBIO-301\n1\nSummer\n2018\nPainter\n514\nA\n\n\nCS-101\n1\nFall\n2017\nPackard\n101\nH\n\n\nCS-101\n1\nSpring\n2018\nPackard\n101\nF\n\n\nCS-190\n1\nSpring\n2017\nTaylor\n3128\nE\n\n\nCS-190\n2\nSpring\n2017\nTaylor\n3128\nA\n\n\nCS-315\n1\nSpring\n2018\nWatson\n120\nD\n\n\nCS-319\n1\nSpring\n2018\nWatson\n100\nB\n\n\nCS-319\n2\nSpring\n2018\nTaylor\n3128\nC\n\n\nCS-347\n1\nFall\n2017\nTaylor\n3128\nA\n\n\nEE-181\n1\nSpring\n2017\nTaylor\n3128\nC\n\n\nFIN-201\n1\nSpring\n2018\nPackard\n101\nB\n\n\nHIS-351\n1\nSpring\n2018\nPainter\n514\nC\n\n\nMU-199\n1\nSpring\n2018\nPackard\n101\nD\n\n\nPHY-101\n1\nFall\n2017\nWatson\n100\nA\n\n\n\n\n\n\nFrom the section relation, find the number of courses run in each building.\n\nSELECT building, COUNT(course_id) AS course_count\nFROM section\nGROUP BY building;\n\n\n\n\n\nbuilding\ncourse_count\n\n\n\n\nPackard\n4\n\n\nPainter\n3\n\n\nTaylor\n5\n\n\nWatson\n3",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#aggregate-functions-5-sum",
    "href": "pages/DBMS/w3.html#aggregate-functions-5-sum",
    "title": "Week 3",
    "section": "Aggregate functions (5): sum",
    "text": "Aggregate functions (5): sum\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the total credits offered by each department.\n\nSELECT dept_name, SUM(credits) AS sum_credits\nFROM course\nGROUP BY dept_name;\n\n\n\n\n\ndept_name\nsum_credits\n\n\n\n\nBiology\n11\n\n\nComp. Sci.\n17\n\n\nElec. Eng.\n3\n\n\nFinance\n3\n\n\nHistory\n3\n\n\nMusic\n3\n\n\nPhysics\n4",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#nested-subqueries",
    "href": "pages/DBMS/w3.html#nested-subqueries",
    "title": "Week 3",
    "section": "Nested Subqueries",
    "text": "Nested Subqueries\n\nSQL provides a mechanism for nesting of subqueries\nA subquery is a select-from-where expression that is nested within another query\nThe nesting can be done in the following SQL query  \\text{select } A_1, A_2, ..., A_n   \\text{from } r_1, r_2, ..., r_m   \\text{where } P  as follows:\n\nA_i can be a subquery that generates a single value\nr_i can be replaced by any valid subquery\nP can be replaced with an expressionm of the form:\nB \\text{ &lt;operation&gt;} (subquery)\nwhere B is an attribute and \\text{&lt;operation&gt;} to be defined later.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#subqueries-in-the-where-clause",
    "href": "pages/DBMS/w3.html#subqueries-in-the-where-clause",
    "title": "Week 3",
    "section": "Subqueries in the Where Clause",
    "text": "Subqueries in the Where Clause\n\nTypical use of subqueries is to perform tests:\n\nFor set membership\nFor set comparisons\nFor set cardinality",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#set-membership",
    "href": "pages/DBMS/w3.html#set-membership",
    "title": "Week 3",
    "section": "Set Membership",
    "text": "Set Membership\n\nFind courses offered in Fall 2009 and in Spring 2010 (intersect example)\n\n    select distinct course_id\n    from section\n    where semester = 'Fall' and year = 2017 and\n    course_id in (select course_id\n                from section\n                where semester = 'Spring' and year = 2018);\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-347\n\n\nPHY-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#set-membership-2",
    "href": "pages/DBMS/w3.html#set-membership-2",
    "title": "Week 3",
    "section": "Set Membership (2)",
    "text": "Set Membership (2)\n\nFind the total number of (distinct) students who have taken course sections taught by instructor with ID ‘10101’\n\nselect count(distinct ID)\nfrom takes\nwhere (course_id, sec_id, semester, year) in\n    (select course_id, sec_id, semester, year\n    from teaches\n    where teaches.ID = '10101');\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#set-comparison---some-clause",
    "href": "pages/DBMS/w3.html#set-comparison---some-clause",
    "title": "Week 3",
    "section": "Set Comparison - “some” Clause",
    "text": "Set Comparison - “some” Clause\n\nFind the names of instructors with salary greater than that of some (at least one) instructor in the Biology department\n\n    select distinct T.name\n    from instructor T, instructor S\n    where T.salary &gt; S.salary and S.dept_name = 'Biology';\n\nSame query using some clause\n\n    select name\n    from instructor\n    where salary &gt; some (select salary\n                        from instructor\n                        where dept_name = 'Biology');",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#definition-of-some-clause",
    "href": "pages/DBMS/w3.html#definition-of-some-clause",
    "title": "Week 3",
    "section": "Definition of “some” Clause",
    "text": "Definition of “some” Clause\n\nF \\text{&lt;comp&gt;} some r \\Leftrightarrow \\exists t \\in r such that (F \\text{&lt;comp&gt;} t) where \\text{&lt;comp&gt;} can be: &lt;, \\leq, &gt;, \\geq, =, \\neq\nsome represents existential quantification\n\n(5 &lt; some {0, 5, 6}) = True\n(5 &lt; some {0, 5}) = False\n(5 = some {0, 5}) = True\n(5 \\neq some {0, 5}) = False\n(= some) \\equiv in\nHowever, (\\neq some) \\equiv not in",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#set-comparison---all-clause",
    "href": "pages/DBMS/w3.html#set-comparison---all-clause",
    "title": "Week 3",
    "section": "Set Comparison - “all” Clause",
    "text": "Set Comparison - “all” Clause\n\nFind the names of all instructors with salary greater than that of all instructors in the Biology department\n\nselect name\nfrom instructor\nwhere salary &gt; all (select salary\n                    from instructor\n                    where dept_name = 'Biology');",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#definition-of-all-clause",
    "href": "pages/DBMS/w3.html#definition-of-all-clause",
    "title": "Week 3",
    "section": "Definition of “all” Clause",
    "text": "Definition of “all” Clause\n\nF \\text{&lt;comp&gt;} all r \\Leftrightarrow \\forall t \\in r such that (F \\text{&lt;comp&gt;} t) where \\text{&lt;comp&gt;} can be: &lt;, \\leq, &gt;, \\geq, =, \\neq\nall represents universal quantification\n\n(5 &lt; all {0, 5, 6}) = False\n(5 &lt; all {6, 10}) = True\n(5 = all {0, 5}) = False\n(5 \\neq all {4, 6}) = True\n(\\neq all) \\equiv not in\nHowever, (= all) !\\equiv in",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#test-for-empty-relations-exists",
    "href": "pages/DBMS/w3.html#test-for-empty-relations-exists",
    "title": "Week 3",
    "section": "Test for Empty Relations: “exists”",
    "text": "Test for Empty Relations: “exists”\n\nThe exists constucrt returns the value true if the argument subquery is non-empty\n\nexists $r r $\nnot exists $r r = $",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#use-of-exists-clause",
    "href": "pages/DBMS/w3.html#use-of-exists-clause",
    "title": "Week 3",
    "section": "Use of “exists” clause",
    "text": "Use of “exists” clause\n\nYet another way of specifying the query “Find all courses taught in both the Fall 2009 semester and in the Spring 2010 semester”\n\nselect course_id\nfrom section as S\nwhere semester = 'Fall' and year = 2009 and\nexists (select *\n        from section as T\n        where semester = 'Spring' and year = 2010 and\n        S.course_id = T.course_id);\n\nCorrelation name - variable S in the outer query\nCorrelated subquery - subquery that references the correlation name (the inner query)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#use-of-not-exists-clause",
    "href": "pages/DBMS/w3.html#use-of-not-exists-clause",
    "title": "Week 3",
    "section": "Use of “not exists” clause",
    "text": "Use of “not exists” clause\n\nFind all students who have taken all courses offered in the Biology department.\n\nselect distinct S.ID, S.name\nfrom student as S\nwhere not exists ((select course_id\n                    from course\n                    where dept_name = 'Biology')\n                    except\n                    (select T.course_id\n                    from takes as T\n                    where S.ID = T.ID));\n\nFirst nested query lists all courses offered in Biology\nSecond nested query lists all courses a particular student took\nNote: X-Y = \\emptyset \\Leftrightarrow X \\subseteq Y\nNote: Cannot write this query using = all and its variants",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "href": "pages/DBMS/w3.html#test-for-absence-of-duplicate-tuples-unique",
    "title": "Week 3",
    "section": "Test for Absence of Duplicate Tuples: “unique”",
    "text": "Test for Absence of Duplicate Tuples: “unique”\n\nThe unique construct tests whether a subquery has any duplicate tuples in its result\nThe unique construct evaluates to true if the subquery result has no duplicate tuples\nFind all courses that were offered at most once in 2009\n\nselect T.course_id\nfrom course as T\nwhere unique (select R.course_id\n              from section as R\n              where R.course_id = T.course_id\n              and R.year = 2009);",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#subqueries-in-the-from-clause",
    "href": "pages/DBMS/w3.html#subqueries-in-the-from-clause",
    "title": "Week 3",
    "section": "Subqueries in the From Clause",
    "text": "Subqueries in the From Clause\n\nSQL allows a subquery expression to be used in the from clause\nFind the average instructors’ salaries of those departments where the average salary is greater than $42,000\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary) as avg_salary\n      from instructor\n      group by dept_name)\nwhere avg_salary &gt; 42000;\n\nNote that we do not need to use the having clause\nAnother way to write the same query is:\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary)\n      from instructor\n      group by dept_name) as dept_avg (dept_name, avg_salary)\nwhere avg_salary &gt; 42000;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#with-clause",
    "href": "pages/DBMS/w3.html#with-clause",
    "title": "Week 3",
    "section": "With Clause",
    "text": "With Clause\n\nThe with clause provides a way of defining a temporary relation whose definition is available only to the query in which the with clause occurs\nFind all departments with the maximum budget\n\nwith max_budget(value) as\n    (select max(budget)\n    from department)\nselect department.dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#complex-queries-using-with-clause",
    "href": "pages/DBMS/w3.html#complex-queries-using-with-clause",
    "title": "Week 3",
    "section": "Complex Queries using With Clause",
    "text": "Complex Queries using With Clause\n\nFind all departments where the total salary is greater than the average of the total salary at all departments\n\nwith dept_total(dept_name, value) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name,\ndept_total_avg(value) as\n    (select avg(value)\n    from dept_total)\nselect dept_name\nfrom dept_total, dept_total_avg\nwhere dept_total.value &gt; dept_total_avg.value;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#scalar-subquery",
    "href": "pages/DBMS/w3.html#scalar-subquery",
    "title": "Week 3",
    "section": "Scalar Subquery",
    "text": "Scalar Subquery\n\nA scalar subquery is a subquery that returns a single value\nList all departments along with the number of instructors in each department\n\nselect dept_name,\n    (select count(*)\n    from instructor\n    where instructor.dept_name = department.dept_name)\n    as num_instructors\n    from department;\n\nRuntime error if the subquery returns more than one result tuple",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#modification-of-the-database",
    "href": "pages/DBMS/w3.html#modification-of-the-database",
    "title": "Week 3",
    "section": "Modification of the Database",
    "text": "Modification of the Database\n\nDeletion of tuples from a given relation\nInsertion of new tuples into a given relation\nUpdating of values in some tuples in a given relation",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#deletion",
    "href": "pages/DBMS/w3.html#deletion",
    "title": "Week 3",
    "section": "Deletion",
    "text": "Deletion\n\nDelete all instructors\ndelete from instructor;\nDelete all instructors from the Finance department\ndelete from instructor\nwhere dept_name = 'Finance';\nDelete all tuples in the instructor relation for those instructors associated with a department located in the Watson building\ndelete from instructor\nwhere dept_name in (select dept_name\n                    from department\n                    where building = 'Watson');\nDelete all instructors whose salary is less than the average of all instructors’ salaries\ndelete from instructor\nwhere salary &lt; (select avg(salary)\n                from instructor);\nProblem: as we delete tuples, the average salary changes\nSolution used in SQL:\n\nFirst compute avg(salary) and find all tuples to be deleted\nNext, delete all tuples found above (without recomputing avg or retesting the tuples)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#insertion",
    "href": "pages/DBMS/w3.html#insertion",
    "title": "Week 3",
    "section": "Insertion",
    "text": "Insertion\n\nAdd a new typle to course\ninsert into course\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nor equivalently\ninsert into course (course_id, title, dept_name, credits)\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nAdd a new tuple to student with tot_creds set to null\ninsert into student\nvalues ('3003', 'Green', 'Finance', null);\nAdd all instructors to the student relation with tot_creds set to 0\ninsert into student\nselect ID, name, dept_name, 0\nfrom instructor;\nThe select-from-where statement is evaluated fully before any of its results are inserted into the relation\nOtherwise queries like\ninsert into table1 select * from table1;\nwould result in an infinite loop",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#updates",
    "href": "pages/DBMS/w3.html#updates",
    "title": "Week 3",
    "section": "Updates",
    "text": "Updates\n\nIncrease the salary of all instructors whose salary is over $100,00 by 3% and all others by 5%\n\nWith two update statements\nupdate instructor\n    set salary = salary * 1.03\n    where salary &gt; 100000;\nupdate instructor\n    set salary = salary * 1.05\n    where salary &lt;= 100000;\n\nThe order is important\nCan be done better using the case statement",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#case-statement-for-conditional-updates",
    "href": "pages/DBMS/w3.html#case-statement-for-conditional-updates",
    "title": "Week 3",
    "section": "Case Statement for Conditional Updates",
    "text": "Case Statement for Conditional Updates\n\nSame query as above using the case statement\nupdate instructor\n    set salary = case\n                when salary &lt;= 100000\n                then salary * 1.05\n                else salary * 1.03\n                end;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#updates-with-scalar-subqueries",
    "href": "pages/DBMS/w3.html#updates-with-scalar-subqueries",
    "title": "Week 3",
    "section": "Updates with Scalar Subqueries",
    "text": "Updates with Scalar Subqueries\n\nRecompute and update tot_creds value for all students\nupdate student\nset tot_creds = (select sum(credits)\n                from takes, course\n                where takes.course_id = course.course_id and\n                S.ID = takes.ID and\n                takes.grade &lt;&gt; 'F' and\n                takes.grade is not null);\nSet tot_creds to null for all students who have not taken any courses\nInstead of sum(credits), use:\n    case\n    when sum(credits) is not null then sum(credits)\n    else 0\nend;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#join-relations",
    "href": "pages/DBMS/w3.html#join-relations",
    "title": "Week 3",
    "section": "Join Relations",
    "text": "Join Relations\n\nJoin operations take two relations and return as result another relation\nA join operation is a Cartesian product which requires that tuples in the two relations match (under some condition)\nIt also specifies the attributes that are present in the result of the join\nThe join operations are typically used as subquery expressions in the from clause",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#types-of-joins-between-relations",
    "href": "pages/DBMS/w3.html#types-of-joins-between-relations",
    "title": "Week 3",
    "section": "Types of Joins between Relations",
    "text": "Types of Joins between Relations\n\nCross join\nInner join\n\nEqui-join\n\nNatural join\n\n\nOuter join\n\nLeft outer join\nRight outer join\nFull outer join\n\nSelf-join",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#cross-join",
    "href": "pages/DBMS/w3.html#cross-join",
    "title": "Week 3",
    "section": "Cross Join",
    "text": "Cross Join\n\nCROSS JOIN returns the Cartesian product of rows from tables in the join\n\nExplicit\nselect *\nfrom employee cross join department;\nImplicit\nselect *\nfrom employee, department;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#join-operations---example",
    "href": "pages/DBMS/w3.html#join-operations---example",
    "title": "Week 3",
    "section": "Join Operations - Example",
    "text": "Join Operations - Example\n\nRelation course\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\n\n\n\n\nRelation prereq\n\n\n\n\n\n\ncourse_id\nprereq_id\n\n\n\n\nBIO-301\nBIO-101\n\n\nCS-190\nCS-101\n\n\nCS-347\nCS-101\n\n\n\n\n\n\nObserve that\n\nprereq information is missing for course CS-315, and\ncourse information is missing for CS-347",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#inner-join",
    "href": "pages/DBMS/w3.html#inner-join",
    "title": "Week 3",
    "section": "Inner Join",
    "text": "Inner Join\n\ncourse inner join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nIf specified as natural, the join is on all attributes with the same name\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#outer-join",
    "href": "pages/DBMS/w3.html#outer-join",
    "title": "Week 3",
    "section": "Outer Join",
    "text": "Outer Join\n\nAn extension of the join operation that avoids loss of information\nComputes the join and then adds tuples from one relation that does not match tuples in the other relation to the result of the join\nUses null values, which is None in Python",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#left-outer-join",
    "href": "pages/DBMS/w3.html#left-outer-join",
    "title": "Week 3",
    "section": "Left Outer Join",
    "text": "Left Outer Join\n\ncourse left outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#right-outer-join",
    "href": "pages/DBMS/w3.html#right-outer-join",
    "title": "Week 3",
    "section": "Right Outer Join",
    "text": "Right Outer Join\n\ncourse right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#joined-relations",
    "href": "pages/DBMS/w3.html#joined-relations",
    "title": "Week 3",
    "section": "Joined Relations",
    "text": "Joined Relations\n\nJoin operations take two relations and return as a result another relation\nThese additional operations are typically used as subquery expressions in the from clause\nJoin condition – defines which tuples in the two relations match, and what attributes are present in the result of the join\n  natural\n  on &lt;predicate&gt;\n  using (attr1, attr2, ...)\nJoin type – defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated\n  inner join\n  left outer join\n  right outer join\n  full outer join",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#full-outer-join",
    "href": "pages/DBMS/w3.html#full-outer-join",
    "title": "Week 3",
    "section": "Full Outer Join",
    "text": "Full Outer Join\n\ncourse full outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#joining-relations---examples",
    "href": "pages/DBMS/w3.html#joining-relations---examples",
    "title": "Week 3",
    "section": "Joining Relations - Examples",
    "text": "Joining Relations - Examples\n\ncourse inner join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nWhat is the difference between the above (equi-join) and the natural join?\ncourse left outer join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\n\n\n\n\ncourse natural right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-347\nNone\nNone\nNone\nCS-101\n\n\n\n\n\n\ncourse full outer join prereq using (course_id)\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\n\n\nCS-347\nNone\nNone\nNone\nCS-101",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#views",
    "href": "pages/DBMS/w3.html#views",
    "title": "Week 3",
    "section": "Views",
    "text": "Views\n\nIn some cases, it is not desirable for all users to see the entire logical model (that is, all the actual relations stored in the database.)\nConsider a person who needs to know an instructors name and department, but not the salary. This person should see a relation described, in SQL, by:\nselect ID, name, dept_name\nfrom instructor;\nA view provides a mechanism to hide certain data from the view of certain users\nAny relation that is not of the conceptual model but is made visible to a user as a “virtual relation” is called a view.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#view-definition",
    "href": "pages/DBMS/w3.html#view-definition",
    "title": "Week 3",
    "section": "View Definition",
    "text": "View Definition\n\nA view is defined using the create view statement which has the form\ncreate view v as &lt; query expression &gt;\nwhere &lt; query expression &gt; is any legal SQL expression\nThe view name is represented by v\nOnce a view is defined, the view name can be used to refer to the virtual relation that the view generates\nView definition is not the same as creating a new relation by evaluating the query expression\n\nRather, a view definition causes the saving of an expression; the expression is substituted into queries using the view",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#example-views",
    "href": "pages/DBMS/w3.html#example-views",
    "title": "Week 3",
    "section": "Example Views",
    "text": "Example Views\n\nA view of instructors without their salary\ncreate view faculty as\nselect ID, name, dept_name\nfrom instructor;\nA view of all instructors in the Biology department\nselect name\n    from faculty\n    where dept_name = 'Biology';\nCreate a view of department salary totals\ncreate view departments_total_salary(dept_name, total_salary) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#views-defined-using-other-views",
    "href": "pages/DBMS/w3.html#views-defined-using-other-views",
    "title": "Week 3",
    "section": "Views Defined Using Other Views",
    "text": "Views Defined Using Other Views\n    create view physics_fall_2009 as\n        select course.course_id, sec_id, building, room_number\n        from course, section\n        where course.course_id = section.course_id\n            and course.dept_name = 'Physics'\n            and section.semester = 'Fall'\n            and section.year = 2009;\n    create view physics_fall_2009_watson as\n        select course_id, room_number\n        from physics_fall_2009\n        where building = 'Watson';",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#view-expansion",
    "href": "pages/DBMS/w3.html#view-expansion",
    "title": "Week 3",
    "section": "View Expansion",
    "text": "View Expansion\n\nExpand use of a view in a query/another view\n\n    create view physics_fall_2009_watson as\n        (select course_id, room_number\n        from (select course.course_id, building, room_number\n            from course, section\n            where course.course_id = section.course_id\n                and course.dept_name = 'Physics'\n                and section.semester = 'Fall'\n                and section.year = 2009)\n        where building = 'Watson');\n\nOne view may be used in the expression defining another view\nA view relation v_1 is said to depend directly on a view relation v_2 if v_2 is used in the expression defining v_1\nA view relation v_1 is said to depend on view relation v_2 if either v_1 depends directly on v_2 or there is a path of dependencies from v_1 to v_2\nA view relation v is said to be recursive if it depends on itself\nA way to define the meaning of views defined in terms of other views\nLet view v_1 be defined by an expression e_1 that may itself contain uses of view relations\nView expansion of an expression repeats the following replacement step:\nrepeat\n\nFind any view relation v_i in e_1\nReplace the view relation v_i by the expression defining v_i\n\nuntil no more view relations are present in e_1\nAs long as the view definitions are not recursive, this loop will terminate",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#view-defined-using-other-views",
    "href": "pages/DBMS/w3.html#view-defined-using-other-views",
    "title": "Week 3",
    "section": "View Defined Using Other Views",
    "text": "View Defined Using Other Views\n\nOne view may be used in the expression defining another view\nA view relation v_1 is said to depend directly on a view relation v_2 if v_2 is used in the expression defining v_1\nA view relation v_1 is said to depend on view relation v_2 if either v_1 depends directly on v_2 or there is a path of dependencies from v_1 to v_2\nA view relation v is said to be recursive if it depends on itself",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#view-expansion-1",
    "href": "pages/DBMS/w3.html#view-expansion-1",
    "title": "Week 3",
    "section": "View Expansion*",
    "text": "View Expansion*\n\nA way to define the meaning of views defined in terms of other views\nLet view v_1 be defined by an expression e_1 that may itself contain uses of view relations\nView expansion of an expression repeats the following replacement step:\nrepeat\n\nFind any view relation v_i in e_1\nReplace the view relation v_i by the expression defining v_i\n\nuntil no more view relations are present in e_1\nAs long as the view definitions are not recursive, this loop will terminate",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#update-of-a-view",
    "href": "pages/DBMS/w3.html#update-of-a-view",
    "title": "Week 3",
    "section": "Update of a View",
    "text": "Update of a View\n\nAdd a new tuple to faculty view which we defined earlier\n    insert into faculty values (’30765’, ’Green’, ’Music’);\nThis insertion must be represented by the insertion of the tuple\n  (’30765’, ’Green’, ’Music’, null)\ninto the instructor relation",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#some-updates-cannot-be-translated-uniquely",
    "href": "pages/DBMS/w3.html#some-updates-cannot-be-translated-uniquely",
    "title": "Week 3",
    "section": "Some Updates cannot be Translated Uniquely",
    "text": "Some Updates cannot be Translated Uniquely\n\n    create view instructor_info as\n        select ID, name, building\n        from instructor, department\n        where instructor.dept_name = department.dept_name;\n    insert into instructor info values ('69987', 'White', 'Taylor');\n\nwhich department, if multiple departments in Taylor?\nwhat if no department is in Taylor?\n\nMost SQL implementations allow updates only on simple views\n\nThe from clause has only one database relation\nThe select clause contains only attribute names of the relation, and does not have any expressions aggregates, or distinct specification\nAny attribute not listed in the select clause can be set to null\nThe query does not have a group by or having clause",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#and-some-not-at-all",
    "href": "pages/DBMS/w3.html#and-some-not-at-all",
    "title": "Week 3",
    "section": "And Some Not at All",
    "text": "And Some Not at All\n\n    create view history_instructors as\n        select *\n        from instructor\n        where dept_name = 'History';\nWhat happens if we insert (’25566’, ’Brown’, ’Biology’, 100000) into history_instructors?",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#materialized-views",
    "href": "pages/DBMS/w3.html#materialized-views",
    "title": "Week 3",
    "section": "Materialized Views",
    "text": "Materialized Views\n\nMaterializing a view: create a physical table containing all the tuples in the result of the query defining the view\nIf relations used in the query are updated, the materialized view result becomes out of date\n\nNeed to maintain the view, by updating the view whenever the underlying relations are updated",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#transactions",
    "href": "pages/DBMS/w3.html#transactions",
    "title": "Week 3",
    "section": "Transactions",
    "text": "Transactions\n\nUnit of work\nAtomic transaction\n\neither fully executed or rolled back as if it never happened\n\nIsolation from concurrent transactions\nTransactions begin implicitly\n\nEnd by commit work or rollback work\n\nBut default on most databases: each SQL statement commits automatically\n\nCan turn off auto-commit for a session (for example, using API)\nIn SQL:1999, can use: begin atomic … end\n\nNot supported on most databases",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#integrity-constraints",
    "href": "pages/DBMS/w3.html#integrity-constraints",
    "title": "Week 3",
    "section": "Integrity Constraints",
    "text": "Integrity Constraints\n\nIntegrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency\n\nA checking account must have a balance greater than Rs. 10,000.00\nA salary of a bank employee must be at least Rs. 250.00 an hour\nA customer must have a (non-null) phone number",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#integrity-constraints-on-a-single-relation",
    "href": "pages/DBMS/w3.html#integrity-constraints-on-a-single-relation",
    "title": "Week 3",
    "section": "Integrity Constraints on a Single Relation",
    "text": "Integrity Constraints on a Single Relation\n\nnot null\nprimary key\nunique\ncheck(P), where P is a predicate",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#not-null-and-unique-constraints",
    "href": "pages/DBMS/w3.html#not-null-and-unique-constraints",
    "title": "Week 3",
    "section": "Not Null and Unique Constraints",
    "text": "Not Null and Unique Constraints\n\nnot null\n\nDeclare name and budget to be not null\nname varchar(20) not null,\nbudget numeric(12, 2) not null\n\nunique (A_1, A_2, ..., A_m)\n\nThe unique specification states that the attributes A_1, A_2, ..., A_m form a candidate key\nCandidate keys are permeitted to be null (unlike primary keys)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#the-check-clause",
    "href": "pages/DBMS/w3.html#the-check-clause",
    "title": "Week 3",
    "section": "The check clause",
    "text": "The check clause\n\ncheck(P), where P is a predicate\nEnsure that semester is one of fall, winter, spring, or summer:\ncreate table section (\n  course_id varchar(8),\n  sec_id varchar(8),\n  semester varchar(6),\n  year numeric(4, 0),\n  building varchar(15),\n  room_number varchar(7),\n  time_slot_id varchar(4),\n  primary key (course_id, sec_id, semester, year),\n  check (semester in ('fall', 'winter', 'spring', 'summer'))\n);",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#referential-integrity",
    "href": "pages/DBMS/w3.html#referential-integrity",
    "title": "Week 3",
    "section": "Referential Integrity",
    "text": "Referential Integrity\n\nEnsures that a value that appears in one relation for a given set of attributes also appears for a certain set of attributes in another relation\nExample: If “Biology” is a department name appearing in one of the tuples in the instructor relation, then there exists a tuple in the department relation for “Biology”\nLet A be a set of attributes. Let R and S be two relations that contain attributes A and where A is the primary key of S. A is said to be a foreign key of R if for any values of A appearing in R these values also appear in S",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#cascading-actions-in-referential-integrity",
    "href": "pages/DBMS/w3.html#cascading-actions-in-referential-integrity",
    "title": "Week 3",
    "section": "Cascading Actions in Referential Integrity",
    "text": "Cascading Actions in Referential Integrity\n\nWith cascading, you can define the actions that the Database Engine takes when a user tries to delete or update a key to which existing foreign keys point\n    create table course (\n        course_id char(5) primary key,\n        title varchar(20),\n        dept_name varchar(20) references department\n    );\n    create table course (\n        ...\n        dept_name varchar(20),\n        foreign key (dept_name) references department\n            on delete cascade\n            on update cascade,\n        ...\n    );\nAlternative actions to cascade: no action, set null, set default",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#integrity-constraint-violation-during-transactions",
    "href": "pages/DBMS/w3.html#integrity-constraint-violation-during-transactions",
    "title": "Week 3",
    "section": "Integrity Constraint Violation During Transactions",
    "text": "Integrity Constraint Violation During Transactions\n\n    create table person (\n        ID char(10),\n        name char(40),\n        mother char(10),\n        father char(10),\n        primary key ID,\n        foreign key father references person,\n        foreign key mother references person)\nHow to insert a tuple without causing constraint violation?\n\nInsert father and mother of a person before inserting person\nOR, Set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be not null)\nOR Defer constraint checking (will discuss later)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#built-in-data-types-in-sql",
    "href": "pages/DBMS/w3.html#built-in-data-types-in-sql",
    "title": "Week 3",
    "section": "Built-in Data Types in SQL",
    "text": "Built-in Data Types in SQL\n\ndate: Dates, containing a (4 digit) year, month and date\n\nExample: date ‘2005-7-27’\n\ntime: Time of day, in hours, minutes and seconds.\n\nExample: time ‘09:00:30’ time ‘09:00:30.75’\n\ntimestamp: date plus time of day\n\nExample: timestamp ‘2005-7-27 09:00:30.75’\n\ninterval: period of time\n\nExample: interval ‘1’ day\nSubtracting a date/time/timestamp value from another gives an interval value\nInterval values can be added to date/time/timestamp values",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#index-creation",
    "href": "pages/DBMS/w3.html#index-creation",
    "title": "Week 3",
    "section": "Index Creation",
    "text": "Index Creation\n\n    create table student(ID varchar(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    tot cred numeric (3,0) default 0,\n    primary key (ID))\ncreate index studentID index on student(ID)\nIndices are data structures used to speed up access to records with specified values for index attributes\n  select *\n  from student\n  where ID = '12345'\n\nCan be executed by using the index to find the required record, without looking at all records of student",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#user-defined-types",
    "href": "pages/DBMS/w3.html#user-defined-types",
    "title": "Week 3",
    "section": "User Defined Types",
    "text": "User Defined Types\n\ncreate type construct in SQL creates user-defined type (alias, like typedef in C)\n  create type Dollars as numeric (12,2) final\n    create table department (\n        dept_name varchar (20),\n        building varchar (15),\n        budget Dollars\n    );",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#domains",
    "href": "pages/DBMS/w3.html#domains",
    "title": "Week 3",
    "section": "Domains",
    "text": "Domains\n\ncreate domain construct in SQL-92 creates user-defined domain types\n  create domain person_name char(20) not null\nTypes and domains are similar\nDomains can have constraints, such as not null specified on them\n  create domain degree_level varchar(10)\n  constraint degree_level_test\n  check (value in ('Bachelors', 'Masters', 'Doctorate'));",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#large-object-types",
    "href": "pages/DBMS/w3.html#large-object-types",
    "title": "Week 3",
    "section": "Large-Object Types",
    "text": "Large-Object Types\n\nLarge objects (photos, videos, CAD files, etc.) are stored as a large object:\n\nblob: binary large object – object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system)\nclob: character large object – object is a large collection of character data\nWhen a query returns a large object, a pointer is returned rather than the large object itself",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#authorization",
    "href": "pages/DBMS/w3.html#authorization",
    "title": "Week 3",
    "section": "Authorization",
    "text": "Authorization\n\nForms of authorization on parts of the database:\n\nRead - allows reading, but not modification of data\nInsert - allows insertion of new data, but not modification of existing data\nUpdate - allows modification, but not deletion of data\nDelete - allows deletion of data\n\nForms of authorization to modify the database schema\n\nIndex - allows creation and deletion of indices\nResources - allows creation of new relations\nAlteration - allows addition or deletion of attributes in a relation\nDrop - allows deletion of relations",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#authorization-specification-in-sql",
    "href": "pages/DBMS/w3.html#authorization-specification-in-sql",
    "title": "Week 3",
    "section": "Authorization Specification in SQL",
    "text": "Authorization Specification in SQL\n\nThe grant statement is used to confer authorization\n  grant &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; to &lt;user list&gt;\n\\text{&lt;user list&gt;} is:\n\na user-id\npublic, which allows all valid users the privilege granted\nA role (more on this later)\n\nGranting a privilege on a view does not imply granting any privileges on the underlying relations\nThe grantor of the privilege must already hold the privilege on the specified item (or be the database administrator)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#privileges-in-sql",
    "href": "pages/DBMS/w3.html#privileges-in-sql",
    "title": "Week 3",
    "section": "Privileges in SQL",
    "text": "Privileges in SQL\n\nselect: allows read access to relation, or the ability to query using the view\n\nExample: grant users U_1, U_2, and U_3 select authorization on the instructor relation:\n  grant select on instructor to U1, U2, U3\n\ninsert: the ability to insert tuples\nupdate: the ability to update tuples\ndelete: the ability to delete tuples\nall privileges: used as a short form for all the allowable privileges",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#revoking-authorization-in-sql",
    "href": "pages/DBMS/w3.html#revoking-authorization-in-sql",
    "title": "Week 3",
    "section": "Revoking Authorization in SQL",
    "text": "Revoking Authorization in SQL\n\nThe revoke statement is used to revoke authorization\n  revoke &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; from &lt;user list&gt;\nExample:\n  revoke select on branch from U1, U2, U3\n\\text{&lt;privilege-list&gt;} may be all to revoke all privileges the revokee may hold\nIf \\text{&lt;revokee-list&gt;} includes public, all users lose the privilege except those granted it explicitly\nIf the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation\nAll privileges that depend on the privilege being revoked are also revoked",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#roles",
    "href": "pages/DBMS/w3.html#roles",
    "title": "Week 3",
    "section": "Roles",
    "text": "Roles\n\n    create role instructor;\n    grant instructor to Amit;\nPrivileges can be granted to roles:\n  grant select on takes to instructor;\nRoles can be granted to users, as well as to other roles\n  create role teaching_assistant;\n  grant teaching_assistant to instructor;\n\nInstructor inherits all privileges of teaching_assistant\n\nChain of roles\n\ncreate role dean;\ngrant instructor to dean;\ngrant dean to Satoshi;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#authorization-on-views",
    "href": "pages/DBMS/w3.html#authorization-on-views",
    "title": "Week 3",
    "section": "Authorization on Views",
    "text": "Authorization on Views\n   create view geo_instructor as\n   (select *\n     from instructor\n     where dept_name = ’Geology’);\n     grant select on geo_instructor to geo_staff\n\nSuppose that a geo_staff member issues\n\n   select *\n   from geo_instructor;\n\nWhat if\n\ngeo_staff does not have permissions on instructor?\ncreator of view did not have some permissions on instructor?",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#other-authorization-features",
    "href": "pages/DBMS/w3.html#other-authorization-features",
    "title": "Week 3",
    "section": "Other Authorization Features",
    "text": "Other Authorization Features\n\nreferences privilege to create foreign key\n  grant reference (dept_name) on department to Mariano;\n\nwhy is this required?\n\nTransfer of privileges\n\ngrant select on department to Amit with grant option;\nrevoke select on department from Amit, Satoshi cascade;\nrevoke select on department from Amit, Satoshi restrict;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#native-language-query-language",
    "href": "pages/DBMS/w3.html#native-language-query-language",
    "title": "Week 3",
    "section": "Native Language ← → Query Language",
    "text": "Native Language ← → Query Language",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#functions-and-procedures",
    "href": "pages/DBMS/w3.html#functions-and-procedures",
    "title": "Week 3",
    "section": "Functions and Procedures",
    "text": "Functions and Procedures\n\nFunctions / Procedures and Control Flow Statements were added in SQL:1999\n\nFunctions/Procedures can be written in SQL itself, or in an external programming language (like C, Java)\nFunctions written in an external languages are particularly useful with specialized data types such as images and geometric objects\n\nExample: Functions to check if polygons overlap, or to compare images for similarity\n\nSome database systems support table-valued functions, which can return a relation as a result\n\nSQL:1999 also supports a rich set of imperative constructs, including loops, if-then-else, and assignment\nMany databases have proprietary procedural extensions to SQL that differ from SQL:1999",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#sql-functions",
    "href": "pages/DBMS/w3.html#sql-functions",
    "title": "Week 3",
    "section": "SQL Functions",
    "text": "SQL Functions\n\nDefine a function that, given the name of a department, returns the count of the number of instructors in that department:\n    create function dept_count (dept name varchar(20))\n        returns integer\n        begin\n        declare d_count integer;\n            select count (*) into d_count\n            from instructor\n            where instructor.dept_name = dept_name\n        return d_cont;\n        end\nThe function dept count can be used to find the department names and budget of all departments with more that 12 instructors:\n    select dept_name, budget\n    from department\n    where dept_count (dept_name ) &gt; 12",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#sql-functions-2",
    "href": "pages/DBMS/w3.html#sql-functions-2",
    "title": "Week 3",
    "section": "SQL Functions (2)",
    "text": "SQL Functions (2)\n\nCompound statement: begin . . . end May contain multiple SQL statements between begin and end.\nreturns – indicates the variable-type that is returned (for example, integer)\nreturn – specifies the values that are to be returned as result of invoking the function\nSQL function are in fact parameterized views that generalize the regular notion of views by allowing parameters",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#table-functions",
    "href": "pages/DBMS/w3.html#table-functions",
    "title": "Week 3",
    "section": "Table Functions",
    "text": "Table Functions\n\nFunctions that return a relation as a result added in SQL:2003\nReturn all instructors in a given department:\n  create function instructor_of (dept_name char(20))\n    returns table (\n      ID varchar(5),\n      name varchar(20),\n      dept_name varchar(20)\n      salary numeric(8, 2) )\n    returns table\n      (select ID, name, dept_name, salary\n      from instructor\n      where instructor.dept_name = instructor_of.dept_name)\nUsage\n  select *\n  from table (instructor_of (‘Music’))",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#sql-procedures",
    "href": "pages/DBMS/w3.html#sql-procedures",
    "title": "Week 3",
    "section": "SQL Procedures",
    "text": "SQL Procedures\n\nThe dept count function could instead be written as procedure:\n      create procedure dept_count_proc (\n          in dept_name varchar (20), out d_count integer)\n          begin\n              select count(*) into d_count\n              from instructor\n              where instructor.dept_name = dept_count_proc.dept_name\n          end\nProcedures can be invoked either from an SQL procedure or from embedded SQL, using the call statement.\ndeclare d_count integer;\ncall dept_count_proc(‘Physics’, d_count);\nProcedures and functions can be invoked also from dynamic SQL\nSQL:1999 allows overloading - more than one function/procedure of the same name as long as the number of arguments and/or the types of the arguments differ",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#language-constructs-for-procedures-and-functions",
    "href": "pages/DBMS/w3.html#language-constructs-for-procedures-and-functions",
    "title": "Week 3",
    "section": "Language Constructs for Procedures and Functions",
    "text": "Language Constructs for Procedures and Functions\n\nSQL supports constructs that gives it almost all the power of a general-purpose programming language.\n\nWarning: Most database systems implement their own variant of the standard syntax\n\nCompound statements: begin . . . end\n\nMay contain multiple SQL statements between begin and end\nLocal variables can be declared within a compound statement",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#language-constructs-2-while-and-repeat",
    "href": "pages/DBMS/w3.html#language-constructs-2-while-and-repeat",
    "title": "Week 3",
    "section": "Language Constructs (2): while and repeat",
    "text": "Language Constructs (2): while and repeat\n\nwhile loop\n    while boolean_expression do\n        sequence_of_statements;\n    end while;\nrepeat loop\n    repeat\n        sequence_of_statements;\n    until boolean_expression;\n    end repeat;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#language-constructs-3-for",
    "href": "pages/DBMS/w3.html#language-constructs-3-for",
    "title": "Week 3",
    "section": "Language Constructs (3): for",
    "text": "Language Constructs (3): for\n\nfor loop\n\nPermits iteration over all results of a query\n\nFind the budget if all departments:\n    declare n integer default 0;\n    for r as\n      select budget from department\n    do\n      set n = n + r.budget\n    end for;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#language-constructs-4-if-then-else",
    "href": "pages/DBMS/w3.html#language-constructs-4-if-then-else",
    "title": "Week 3",
    "section": "Language Constructs (4): if-then-else",
    "text": "Language Constructs (4): if-then-else\n\nConditional statements\n\nif-then-else\ncase\n\nif-then-else statement\n    if boolean_expression then\n        sequence_of_statements;\n    elseif boolean_expression then\n        sequence_of_statements;\n    ...\n    else\n        sequence_of_statements;\n    end if;\nThe if statement supports the use of optional elseif clauses and a default else clause\nExample procedure: registers student after ensuring that classroom capacity is not exceeded\n\nReturns 0 on success and -1 if capacity is exceeded",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#language-constructs-5-simple-case",
    "href": "pages/DBMS/w3.html#language-constructs-5-simple-case",
    "title": "Week 3",
    "section": "Language Constructs (5): Simple case",
    "text": "Language Constructs (5): Simple case\n\nSimple case statement\n    case variable\n        when value1 then\n            sequence_of_statements;\n        when value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nThe when clause of the case statement defines the value that when satisfied determines the flow of control",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#language-constructs-6-searched-case",
    "href": "pages/DBMS/w3.html#language-constructs-6-searched-case",
    "title": "Week 3",
    "section": "Language Constructs (6): Searched case",
    "text": "Language Constructs (6): Searched case\n\nSearched case statements\n    case\n        when sql_expression = value1 then\n            sequence_of_statements;\n        when sql_expression = value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nAny supported SQL expression can be used here. These expressions can contain references to variables, parameters, special registers, and more.",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#language-constructs-7-exception",
    "href": "pages/DBMS/w3.html#language-constructs-7-exception",
    "title": "Week 3",
    "section": "Language Constructs (7): Exception",
    "text": "Language Constructs (7): Exception\n\nSignaling of exception conditions, and declaring handlers for exceptions\n    declare out_of_classroom_seats condition\n    declare exit handler for out_of_classroom_seats\n    begin\n        ...\n        signal out_of_classroom_seats\n        ...\n    end\n\nThe handler here is exit – causes enclosing begin . . . end to be terminate and exit\nOther actions possible on exception",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#external-language-routines",
    "href": "pages/DBMS/w3.html#external-language-routines",
    "title": "Week 3",
    "section": "External Language Routines*",
    "text": "External Language Routines*\n\nSQL:1999 allows the definition of functions and procedures in an external / imperative programming language, (Java, C#, C, or C++) which can be invoked from SQL queries\nSuch functions can be more efficient than functions defined in SQL, and computations that cannot be carried out in SQL can be executed by these functions\nDeclaring external language procedures and functions\n    create procedure dept_count_proc(\n            in dept_name varchar(20),\n            out count integer)\n        language C\n        external name ’/usr/avi/bin/dept_count_proc’\n\n    create function dept_count(dept_name varchar(20))\n    returns integer\n        language C\n        external name ‘/usr/avi/bin/dept_count’",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#external-language-routines-2",
    "href": "pages/DBMS/w3.html#external-language-routines-2",
    "title": "Week 3",
    "section": "External Language Routines (2)*",
    "text": "External Language Routines (2)*\n\nBenefits of external language functions/procedures:\n\nMore efficient for many operations, and more expressive power\n\nDrawbacks\n\nCode to implement function may need to be loaded into database system and executed in the database system’s address space\n\nRisk of accidental corruption of database structures\nSecurity risk, allowing users access to unauthorized data\n\nThere are alternatives, which give good security at the cost of performance\nDirect execution in the database system’s space is used when efficiency is more important than security",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#external-language-routines-3-security",
    "href": "pages/DBMS/w3.html#external-language-routines-3-security",
    "title": "Week 3",
    "section": "External Language Routines (3)*: Security",
    "text": "External Language Routines (3)*: Security\n\nTo deal with security problems, we can do one of the following:\n\nUse sandbox techniques\n\nThat is, use a safe language like Java, which cannot be used to access/damage other parts of the database code\n\nRun external language functions/procedures in a separate process, with no access to the database process’ memory\n\nParameters and results communicated via inter-process communication\n\n\nBoth have performance overheads\nMany database systems support both above approaches as well as direct executing in database system address space",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#trigger",
    "href": "pages/DBMS/w3.html#trigger",
    "title": "Week 3",
    "section": "Trigger",
    "text": "Trigger\n\nA trigger defines a set of actions that are performed in response to an insert, update, or delete operation on a specified table\n\nWhen such an SQL operation is executed, the trigger is said to have been activated\nTriggers are optional\nTriggers are defined using the create trigger statement\n\nTriggers can be used\n\nTo enforce data integrity rules via referential constraints and check constraints\nTo cause updates to other tables, automatically generate or transform values for inserted or updated rows, or invoke functions to perform tasks such as issuing alerts\n\nTo design a trigger mechanism, we must:\n\nSpecify the events / (like update, insert, or delete) for the trigger to executed\nSpecify the time (BEFORE or AFTER) of execution\nSpecify the actions to be taken when the trigger executes\n\nSyntax of triggers may vary across systems",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#types-of-triggers-before",
    "href": "pages/DBMS/w3.html#types-of-triggers-before",
    "title": "Week 3",
    "section": "Types of Triggers: BEFORE",
    "text": "Types of Triggers: BEFORE\n\nBEFORE triggers\n\nRun before an update, or insert\nValues that are being updated or inserted can be modified before the database is actually modified. You can use triggers that run before an update or insert to:\n\nCheck or modify values before they are actually updated or inserted in the database\n\nUseful if user-view and internal database format differs\n\nRun other non-database operations coded in user-defined functions\n\n\nBEFORE DELETE triggers\n\nRun before a delete\n\nChecks values (a raises an error, if necessary)",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#types-of-triggers-2-after",
    "href": "pages/DBMS/w3.html#types-of-triggers-2-after",
    "title": "Week 3",
    "section": "Types of Triggers (2): AFTER",
    "text": "Types of Triggers (2): AFTER\n\nAFTER triggers\n\nRun before an update, insert, or delete\nYou can use triggers that run after an update or insert to:\n\nUpdate data in other tables\n\nUseful for maintain relationships between data or keep audit trail\n\nCheck against other data in the table or in other tables\n\nUseful to ensure data integrity when referential integrity constraints aren’t appropriate, or\nwhen table check constraints limit checking to the current table only\n\nRun non-database operations coded in user-defined functions\n\nUseful when issuing alerts or to update information outside the database",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#row-level-and-statement-level-triggers",
    "href": "pages/DBMS/w3.html#row-level-and-statement-level-triggers",
    "title": "Week 3",
    "section": "Row Level and Statement Level Triggers",
    "text": "Row Level and Statement Level Triggers\nThere are two types of triggers based on the level at which the triggers are applied:\n\nRow level triggers are executed whenever a row is affected by the event on which the trigger is defined.\n\nLet Employee be a table with 100 rows. Suppose an update statement is executed to increase the salary of each employee by 10%. Any row level update trigger configured on the table Employee will affect all the 100 rows in the table during this update.\n\nStatement level triggers perform a single action for all rows affected by a statement, instead of executing a separate action for each affected row.\n\nUsed for each statement instead of for each row\nUses referencing old table or referencing new table to refer to temporary tables called transition tables containing the affected rows\nCan be more efficient when dealing with SQL statements that update a large number of rows",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#triggering-events-and-actions-in-sql",
    "href": "pages/DBMS/w3.html#triggering-events-and-actions-in-sql",
    "title": "Week 3",
    "section": "Triggering Events and Actions in SQL",
    "text": "Triggering Events and Actions in SQL\n\nTriggering event can be an insert, delete or update\nTriggers on update can be restricted to specific attributes\n\nFor example, after update of grade on takes\n\nValues of attributes before and after an update can be referenced\n\nreferencing old row as : for deletes and updates\nreferencing new row as : for inserts and updates\n\nTriggers can be activated before an event, which can serve as extra constraints. For example, convert blank grades to null.\n  create trigger setnull_trigger before update of takes\n  referencing new row as nrow\n  for each row\n  when (nrow.grade = ‘ ‘)\n    begin atomic\n      set nrow.grade = null;\n    end;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#triggering-to-maintain-credits_earned-value",
    "href": "pages/DBMS/w3.html#triggering-to-maintain-credits_earned-value",
    "title": "Week 3",
    "section": "Triggering to Maintain credits_earned value",
    "text": "Triggering to Maintain credits_earned value\n  create trigger credits_earned after update of grade on takes\n  referencing new row as nrow\n  referencing old row as orow\n  for each row\n  when nrow.grade &lt;&gt; 'F' and nrow.grade is not null and\n       (orow.grade = 'F' or orow.grade is null)\n    begin atomic\n      update student\n      set tot_cred = tot_cred + \n          (select credits\n          from course\n          where course.course_id = nrow.course_id)\n      where student.ID = nrow.ID;\n    end;",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#how-to-use-triggers",
    "href": "pages/DBMS/w3.html#how-to-use-triggers",
    "title": "Week 3",
    "section": "How to use triggers?",
    "text": "How to use triggers?\n\nThe optimal use of DML triggers is for short, simple, and easy to maintain write operations that act largely independent of an applications business logic.\nTypical and recommended uses of triggers include:\n\nLogging changes to a history table\nAuditing users and their actions against sensitive tables\nAdding additional values to a table that may not be available to an application (due to security restrictions or other limitations), such as:\n\nLogin/user name\nTime an operation occurs\nServer/database name\n\nSimple validation",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#how-not-to-use-triggers",
    "href": "pages/DBMS/w3.html#how-not-to-use-triggers",
    "title": "Week 3",
    "section": "How not to use triggers?",
    "text": "How not to use triggers?\n\nTriggers are like Lays: Once you pop, you can’t stop\nOne of the greatest challenges for architects and developers is to ensure that\n\ntriggers are used only as needed, and\nto not allow them to become a one-size-fits-all solution for any data needs that happen to come along\n\nAdding triggers is often seen as faster and easier than adding code to an application, but the cost of doing so is compounded over time with each added line of code",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w3.html#how-to-use-triggers-2",
    "href": "pages/DBMS/w3.html#how-to-use-triggers-2",
    "title": "Week 3",
    "section": "How to use triggers? (2)",
    "text": "How to use triggers? (2)\n\nTriggers can become dangerous when:\n\nThere are too many\nTrigger code becomes complex\nTriggers go cross-server - across databases over network\nTriggers call triggers\nRecursive triggers are set to ON. This database-level setting is set to off by default\nFunctions, stored procedures, or views are in triggers\nIteration occurs",
    "crumbs": [
      "DBMS",
      "Week 3"
    ]
  },
  {
    "objectID": "pages/DBMS/w2.html",
    "href": "pages/DBMS/w2.html",
    "title": "Week 2",
    "section": "",
    "text": "A_{1},A_{2},...,A_{n} are attributes\nR=(A_{1},A_{2},...,A_{n}) is a relational schema\n\nExample: instructor(ID, name, dept_name, salary)\n\nFormally, given sets D_{1},D_{2},...,D_{n}, a relation r is a subset of \nD_{1} \\times D_{2} \\times ... \\times D_{n}\n Thus, a relation is a set of n-tuples (a_{1},a_{2},...,a_{n}) where each a_{i} \\in D_{i}\nThe current values (relation instance) of a relation are specified in a table\nExample: instuctor \\equiv (String(5) \\times String \\times String \\times Number+), where ID \\in String(5), name \\in String, dept\\_name \\in String, salary \\in Number+\n\n\n\n\n\nOrder of tuples/rows in a relation is irrelevant (tuples may be stored in an arbitrary order)\nNo two tuples in a relation are the same (i.e., no duplicate tuples)\nExample: instructor relation with unordered tuples\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n12121\nWu\nFinance\n90000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n82821\nBrandt\nComp. Sci.\n92000\n\n\n15151\nMozart\nMusic\n40000\n\n\n33456\nGold\nPhysics\n87000\n\n\n76543\nSingh\nFinance\n80000\n\n\n\n\n\n\n\nLet K \\subseteq R, where R is the set of attributes in the relation.\nK is a superkey of R if values for K are sufficient to identify a unique tuple of each possible relation r(R)\n\nExample: \\{ID\\} and \\{ID, name\\} are both superkeys of instructor\n\nSuperkey K is a candidate key if K is minimal\n\nExample: \\{ID\\} is a candidate key for instructor\n\nOne of the candidate keys is chosen as the primary key\n\nWhich one?\n\nA surrogate key or synthetic key in a database is a unique identifier for either an entity in the modeled world or an object in the database.\n\nThe surrogate key is not derived from application data, unlike a natural (or business) key which is derived from application data.\n\n\n\n\n\n\nStudents = Roll#, First Name, Last Name, DoB, Passport#, Aadhaar#, Department\nSuper Key: Roll#, {Roll#, DoB}\nCandidate Keys: Roll#, {First Name, Last Name}, Aadhaar#\n\nPassport# cannot be a key. Why?\nNull values are allowed for Passport# (a student may not have a passport)\n\nPrimary Key: Roll#\n\nCan we use Aadhaar# as the primary key?\nIt may suffice for unique identification. But Roll# may have additional useful information. For example: 14CS92P01\n\nRead 14CS92P01 as 14-CS-92-P-01\n14: Admission in 2014\nCS: Department = CS\n92: Category of Student\nP: Type of admission: Project\n01: Serial Number\n\n\n\n\n\n\n\nForeign key constraint: Value in one relation must appear in another\n\nReferencing relation\n\nEnrolment: Foreign keys - Roll#, Course#\n\nReferenced relation\n\nStudents, Courses\n\n\nA compound key consists of more than one attribute to uniquely identify an entity occurrence\n\nEach attribute, which makes up the key, is a simple key in its own right\n{Roll#, Course#}\n\n\n\nStudents\n\n\n\n\n\n\n\n\n\n\n\nRoll #\nFirst Name\nLast Name\nDoB\nPassport #\nAadhaar #\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCourses\n\n\n\n\n\n\n\n\n\nCourse #\nCourse Name\nCredits\nL-T-P\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnrolment\n\n\n\n\n\n\n\nRoll #\nCourse #\nInstructor ID\n\n\n\n\n\n\n\n\n\n\n\n\n\nProcedural viz-a-viz Non-procedural or Declarative Paradigms - Procedural programming requires that the programmer specify the exact steps to be taken to solve a problem. - That is, how to get the output for the range of required inputs - The programmer must know an appropriate algorithm\n\nDeclarative programming requires a more descriptive approach.\n\nThe programmer must know what relationships hold between various entities\n\nExample - Square root of n\n\nProcedural\n\nGuess x_0 (close to root of n)\ni \\leftarrow 0\nx_{i+1} \\leftarrow \\frac{(x_i + \\frac{n}{x_i})}{2}\nRepeat Step 2 if |x_{i+1} - x_i| &gt; \\delta\n\nDeclarative\n\nRoot of n is m such that m^2 = n",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/DBMS/w2.html#lecture-2.1-introduction-to-relational-model1",
    "href": "pages/DBMS/w2.html#lecture-2.1-introduction-to-relational-model1",
    "title": "Week 2",
    "section": "",
    "text": "A_{1},A_{2},...,A_{n} are attributes\nR=(A_{1},A_{2},...,A_{n}) is a relational schema\n\nExample: instructor(ID, name, dept_name, salary)\n\nFormally, given sets D_{1},D_{2},...,D_{n}, a relation r is a subset of \nD_{1} \\times D_{2} \\times ... \\times D_{n}\n Thus, a relation is a set of n-tuples (a_{1},a_{2},...,a_{n}) where each a_{i} \\in D_{i}\nThe current values (relation instance) of a relation are specified in a table\nExample: instuctor \\equiv (String(5) \\times String \\times String \\times Number+), where ID \\in String(5), name \\in String, dept\\_name \\in String, salary \\in Number+\n\n\n\n\n\nOrder of tuples/rows in a relation is irrelevant (tuples may be stored in an arbitrary order)\nNo two tuples in a relation are the same (i.e., no duplicate tuples)\nExample: instructor relation with unordered tuples\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n12121\nWu\nFinance\n90000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n82821\nBrandt\nComp. Sci.\n92000\n\n\n15151\nMozart\nMusic\n40000\n\n\n33456\nGold\nPhysics\n87000\n\n\n76543\nSingh\nFinance\n80000\n\n\n\n\n\n\n\nLet K \\subseteq R, where R is the set of attributes in the relation.\nK is a superkey of R if values for K are sufficient to identify a unique tuple of each possible relation r(R)\n\nExample: \\{ID\\} and \\{ID, name\\} are both superkeys of instructor\n\nSuperkey K is a candidate key if K is minimal\n\nExample: \\{ID\\} is a candidate key for instructor\n\nOne of the candidate keys is chosen as the primary key\n\nWhich one?\n\nA surrogate key or synthetic key in a database is a unique identifier for either an entity in the modeled world or an object in the database.\n\nThe surrogate key is not derived from application data, unlike a natural (or business) key which is derived from application data.\n\n\n\n\n\n\nStudents = Roll#, First Name, Last Name, DoB, Passport#, Aadhaar#, Department\nSuper Key: Roll#, {Roll#, DoB}\nCandidate Keys: Roll#, {First Name, Last Name}, Aadhaar#\n\nPassport# cannot be a key. Why?\nNull values are allowed for Passport# (a student may not have a passport)\n\nPrimary Key: Roll#\n\nCan we use Aadhaar# as the primary key?\nIt may suffice for unique identification. But Roll# may have additional useful information. For example: 14CS92P01\n\nRead 14CS92P01 as 14-CS-92-P-01\n14: Admission in 2014\nCS: Department = CS\n92: Category of Student\nP: Type of admission: Project\n01: Serial Number\n\n\n\n\n\n\n\nForeign key constraint: Value in one relation must appear in another\n\nReferencing relation\n\nEnrolment: Foreign keys - Roll#, Course#\n\nReferenced relation\n\nStudents, Courses\n\n\nA compound key consists of more than one attribute to uniquely identify an entity occurrence\n\nEach attribute, which makes up the key, is a simple key in its own right\n{Roll#, Course#}\n\n\n\nStudents\n\n\n\n\n\n\n\n\n\n\n\nRoll #\nFirst Name\nLast Name\nDoB\nPassport #\nAadhaar #\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCourses\n\n\n\n\n\n\n\n\n\nCourse #\nCourse Name\nCredits\nL-T-P\nDepartment\n\n\n\n\n\n\n\n\n\n\n\n\n\nEnrolment\n\n\n\n\n\n\n\nRoll #\nCourse #\nInstructor ID\n\n\n\n\n\n\n\n\n\n\n\n\n\nProcedural viz-a-viz Non-procedural or Declarative Paradigms - Procedural programming requires that the programmer specify the exact steps to be taken to solve a problem. - That is, how to get the output for the range of required inputs - The programmer must know an appropriate algorithm\n\nDeclarative programming requires a more descriptive approach.\n\nThe programmer must know what relationships hold between various entities\n\nExample - Square root of n\n\nProcedural\n\nGuess x_0 (close to root of n)\ni \\leftarrow 0\nx_{i+1} \\leftarrow \\frac{(x_i + \\frac{n}{x_i})}{2}\nRepeat Step 2 if |x_{i+1} - x_i| &gt; \\delta\n\nDeclarative\n\nRoot of n is m such that m^2 = n",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/DBMS/w2.html#lecture-2.2-introduction-to-relational-model2",
    "href": "pages/DBMS/w2.html#lecture-2.2-introduction-to-relational-model2",
    "title": "Week 2",
    "section": "Lecture 2.2: Introduction to Relational Model/2",
    "text": "Lecture 2.2: Introduction to Relational Model/2\n\nBasic Properties of Relations\n\nA relation is a set. Hence,\nOrdering of tuples is immaterial\nAll rows/tuples must be distinct\n\n\n\nSelect Operation - selection of rows (tuples)\nRelation r\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\alpha\n\\alpha\n1\n7\n\n\n\\alpha\n\\beta\n5\n7\n\n\n\\beta\n\\beta\n12\n3\n\n\n\\beta\n\\beta\n23\n10\n\n\n\n\\sigma_{A=B \\wedge D &gt; 5}(r)\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\alpha\n\\alpha\n1\n7\n\n\n\\beta\n\\beta\n23\n10\n\n\n\n\n\nProject Operation - selection of columns (attributes)\nRelation r\n\n\n\nA\nB\nC\n\n\n\n\n\\alpha\n10\n1\n\n\n\\alpha\n20\n1\n\n\n\\beta\n30\n1\n\n\n\\beta\n40\n2\n\n\n\n\\pi_{A,C}(r)\n\n\n\nA\nC\n\n\n\n\n\\alpha\n1\n\n\n\\beta\n1\n\n\n\\beta\n2\n\n\n\n\n\nUnion of two relations\nRelation r\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\alpha\n2\n\n\n\\beta\n1\n\n\n\nRelation s\n\n\n\nA\nB\n\n\n\n\n\\alpha\n2\n\n\n\\beta\n3\n\n\n\nr \\cup s\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\alpha\n2\n\n\n\\beta\n1\n\n\n\\beta\n3\n\n\n\n\n\nSet Difference of two relations\nRelation r\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\alpha\n2\n\n\n\\beta\n1\n\n\n\nRelation s\n\n\n\nA\nB\n\n\n\n\n\\alpha\n2\n\n\n\\beta\n3\n\n\n\nr - s\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\beta\n1\n\n\n\n\n\nSet Intersection of two relations\nRelation r\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\alpha\n2\n\n\n\\beta\n1\n\n\n\nRelation s\n\n\n\nA\nB\n\n\n\n\n\\alpha\n2\n\n\n\\beta\n3\n\n\n\nr \\cap s\n\n\n\nA\nB\n\n\n\n\n\\alpha\n2\n\n\n\nNote: r \\cap s = r-(r-s)\n\n\nJoining two relations - Cartesian Product\nRelation r\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\beta\n2\n\n\n\nRelation s\n\n\n\nC\nD\nE\n\n\n\n\n\\alpha\n10\n\\text{a}\n\n\n\\beta\n10\n\\text{a}\n\n\n\\beta\n20\n\\text{b}\n\n\n\\gamma\n10\n\\text{b}\n\n\n\nr \\times s\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n\\alpha\n1\n\\alpha\n10\n\\text{a}\n\n\n\\alpha\n1\n\\beta\n10\n\\text{a}\n\n\n\\alpha\n1\n\\beta\n20\n\\text{b}\n\n\n\\alpha\n1\n\\gamma\n10\n\\text{b}\n\n\n\\beta\n2\n\\alpha\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n20\n\\text{b}\n\n\n\\beta\n2\n\\gamma\n10\n\\text{b}\n\n\n\nCartesian Product: Naming issue\nRelation r\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\beta\n2\n\n\n\nRelation s\n\n\n\nB\nD\nE\n\n\n\n\n\\alpha\n10\n\\text{a}\n\n\n\\beta\n10\n\\text{a}\n\n\n\\beta\n20\n\\text{b}\n\n\n\\gamma\n10\n\\text{b}\n\n\n\nr \\times s\n\n\n\nA\nr.B\ns.B\nD\nE\n\n\n\n\n\\alpha\n1\n\\alpha\n10\n\\text{a}\n\n\n\\alpha\n1\n\\beta\n10\n\\text{a}\n\n\n\\alpha\n1\n\\beta\n20\n\\text{b}\n\n\n\\alpha\n1\n\\gamma\n10\n\\text{b}\n\n\n\\beta\n2\n\\alpha\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n20\n\\text{b}\n\n\n\\beta\n2\n\\gamma\n10\n\\text{b}\n\n\n\n\n\nRenaming a table\nRenaming a table allows us to refer to a relation, say E, by more than one name. The operator \n\\rho_{X}(E)  renames relation E as X.\nRelation r\n\n\n\nA\nB\n\n\n\n\n\\alpha\n1\n\n\n\\beta\n2\n\n\n\nr \\times \\rho_{s}(r)\n\n\n\nr.A\nr.B\ns.A\ns.B\n\n\n\n\n\\alpha\n1\n\\alpha\n1\n\n\n\\alpha\n1\n\\beta\n2\n\n\n\\beta\n2\n\\alpha\n1\n\n\n\\beta\n2\n\\beta\n2\n\n\n\n\n\nComposition of Operations\nCan build expressions using multiple operations\nExample: \\sigma_{A=C}(r \\times s)\nr \\times s\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n\\alpha\n1\n\\alpha\n10\n\\text{a}\n\n\n\\alpha\n1\n\\beta\n10\n\\text{a}\n\n\n\\alpha\n1\n\\beta\n20\n\\text{b}\n\n\n\\alpha\n1\n\\gamma\n10\n\\text{b}\n\n\n\\beta\n2\n\\alpha\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n20\n\\text{b}\n\n\n\\beta\n2\n\\gamma\n10\n\\text{b}\n\n\n\n\\sigma_{A=C}(r \\times s)\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\n\\alpha\n1\n\\alpha\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n10\n\\text{a}\n\n\n\\beta\n2\n\\beta\n20\n\\text{b}\n\n\n\n\n\nJoining two relations - Natural Join\n\nLet r and s be relations on schemas R and S respectively. Then, the “natural join” of relations R and S is a relation on schema R \\cup S obtained as follows:\nConsider each pair of tuples t_{r} from r and t_{s} from s\nIf t_{r} and t_{s} have the same value on each of the attributes in R \\cap S, add a tuple t to the result, where\n\nt has the same value as t_{r} on r\nt has the same value as t_{s} on s\n\n\n\n\nNatural Join Example\nRelation r\n\n\n\nA\nB\nC\nD\n\n\n\n\n\\alpha\n1\n\\alpha\n\\text{a}\n\n\n\\beta\n2\n\\gamma\n\\text{a}\n\n\n\\gamma\n4\n\\beta\n\\text{b}\n\n\n\\alpha\n1\n\\gamma\n\\text{a}\n\n\n\\delta\n2\n\\beta\n\\text{b}\n\n\n\nRelation s\n\n\n\nB\nD\nE\n\n\n\n\n1\n\\text{a}\n\\alpha\n\n\n3\n\\text{a}\n\\beta\n\n\n1\n\\text{a}\n\\gamma\n\n\n2\n\\text{b}\n\\delta\n\n\n3\n\\text{b}\n\\epsilon\n\n\n\nNatural join - r \\bowtie s\n\n\\pi_{A,r.B,C,r.D,E}(\\sigma_{r.B=s.B \\wedge r.D=s.D}(r \\times s))\n\n\nA\nB\nC\nD\nE\n\n\n\n\n\\alpha\n1\n\\text{a}\n\\text{a}\n\\alpha\n\n\n\\alpha\n1\n\\alpha\n\\text{a}\n\\gamma\n\n\n\\alpha\n1\n\\gamma\n\\text{a}\n\\alpha\n\n\n\\alpha\n1\n\\gamma\n\\text{a}\n\\gamma\n\n\n\\delta\n2\n\\beta\n\\text{b}\n\\delta\n\n\n\n\n\nAggregate Operators\nCan compute: - SUM - AVG - MAX - MIN\n\nRelational operators always return a relation.\nAggregate operators return a single value.",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/DBMS/w2.html#lecture-2.3-introduction-to-sql1",
    "href": "pages/DBMS/w2.html#lecture-2.3-introduction-to-sql1",
    "title": "Week 2",
    "section": "Lecture 2.3: Introduction to SQL/1",
    "text": "Lecture 2.3: Introduction to SQL/1\n\nHistory of Query Language\n\nIBM developed Structured English Query Language (SEQUEL) as a part of System R project. Renamed Structured Query Language (SQL: pronounced as “sequel”)\nANSI and ISO standards for SQL:\n\n\n\n\n\n\n\n\nSQL-86\nFirst formalized by ANSI\n\n\nSQL-89\n+ Integrity constraints\n\n\nSQL-92\nMajor revision (ISO/IEC 9075 standard), De-facto Industry Standard\n\n\nSQL:1999\n+ Regular Expression Matching, Recursive Queries, Triggers, Support for Procedural and Control Flow Statements, Nonscalar types (Arrays), and Some OO features (structured types), Embedding SQL in Java (SQL/OLB), and Embedding Java in SQL (SQL/JRT)\n\n\nSQL:2003\n+ XML features (SQL/XML), Window Functions, Standardized Sequences, and Columns with Auto-generated Values (identity columns)\n\n\nSQL:2006\n+ Ways of importing and storing XML data in an SQL database, manipulating it within the database, and publishing both XML and conventional SQL-data in XML form\n\n\nSQL:2008\nLegalizes ORDER BY outside Cursor Definitions\n+ INSTEAD OF Triggers, TRUNCATE Statement, and FETCH Clause\n\n\nSQL:2011\n+ Temporal Data (PERIOD FOR)\nEnhancements to Window Functions, and Enhancements to FETCH Clause\n\n\nSQL:2016\n+ Row Pattern Matching, Polymorphic Table Functions, and JSON\n\n\nSQL:2019\n+ Multi-Dimensional Arrays (MDarray type and operators)\n\n\n\n\n\nHistory of Query Language (2): Compliance\n\nSQL is the de-facto standard today for relational or structured data systems\nCommercial systems as well as open systems may be fully or partially compliant to one or more standards from SQL-92 onwards\nNot all examples here may work on your particular system. Check your system’s SQL documentation\n\n\n\nHistory of Query Language (3): Alternatives\n\nThere aren’t any alternatives to SQL for speaking to a relational database (that is, SQL as a protocol), but there are many alternatives to writing SQL in the applications\nThese alternatives have been implemented in the form of frontends for working with relational databases. Some examples of a frontend include (for a section of languages):\n\nSchemeQL and CLSQL, which are probably the most flexible, owing to their Lisp heritage, but they also look a lot more like SQL than other frontends\nLINQ (in .NET)\nScalaQL and ScalaQuery (in Scala)\nSqlStatement, ActiveRecord and many others in Ruby\nHaskellDB\n…the list goes on for many other languages\n\n\n\n\nHistory of Query Language (4): Derivatives\n\nThere are several query languages that are derived from or inspired by SQL. Of these, the most popular and effective is SPARQL.\n\nSPARQL (pronounced “sparkle”, a recursive acronym for SPARQL Protocol and RDF Query Language) is an RDF query language\n\nA semantic query language for databases - able to retrieve and manipulate data stored in Resource Description Framework (RDF) format.\nIt has been standardized by the W3C as key technology of the Semantic Web\nVersions:\n\nSPARQL 1.0 (January 2008)\nSPARQL 1.1 (March 2013)\n\nUsed as the query language for several NoSQL systems - particularly the graph databases that use RDF as storage format\n\n\n\n\n\nData Definition Language (DDL)\nThe SQL data definition language (DDL) allwos the specification of information about relations, including: - The Schema for each Relation - The Domain of values associated with each Attribute - Integrity Constraints - Also other information such as: - The set of Indices to be maintained for each relation - Security and Authorization information for each relation - The Physical Storage Structure for each relation on disk\n\n\nDomain Types in SQL\n\nchar(n): Fixed-length character string, with user-specified length n\nvarchar(n): Variable-length character strings, with user-specified maximum length n\nint: Integer (a finite subset of the integers that is machine-dependent)\nsmallint(n): Small integer (a machine-dependent subset of the integer domain type)\nnumeric(p,d): Fixed-point number, with user-specified precision of p digits, with d digits to the right of the decimal point. (Example: numeric(3,1), allows 44.5 to be stored exactly but not 444.5 or 0.32)\nreal, double precision: Floating-point and double-precision floating-point numbers with machine-dependent precision\nfloat(n): Floating-point number, with user-specified precision of at least n bits\n\n\n\nCreate Table Construct\n\nAn SQL relation is defined using the create table command:\ncreate table r (  (A_{1}D_{1}, A_{2}D_{2}, ..., A_{n}D_{n}),   (\\text{integrity-constraint}_1),  ...  (\\text{integrity-constraint}_k)); \n\nr is the name of the relation\neach A_i is an attribute name in the schema of relation r\nD_i is the data type of values in the domain of attribute A_i\n\n\n\n\nBased on a question from Practice Assignment 2\nGiven the schema:\n\n\\text{studentInfo}(\\text{enrollment\\_num}, \\text{class}, \\text{section}, \\text{roll}, \\text{name})\n\nand the candidate keys:\n\n\\{\\text{enrollment\\_num}\\}\n\\{\\text{class}, \\text{section}, \\text{roll}\\}\n\n\n\nSuperkeys involving \\{\\text{enrollment\\_num}\\}:\nFor the candidate key \\{\\text{enrollment\\_num}\\}, we can form a superkey by combining it with any subset of the remaining attributes \\{\\text{class}, \\text{section}, \\text{roll}, \\text{name}\\}. The number of such subsets is 2^4 = 16, which includes the empty set.\n\n\nSuperkeys involving \\{\\text{class}, \\text{section}, \\text{roll}\\}:\nFor the candidate key \\{\\text{class}, \\text{section}, \\text{roll}\\}, we can form a superkey by combining it with any subset of the remaining attributes \\{\\text{enrollment\\_num}, \\text{name}\\}. The number of such subsets is 2^2 = 4, which includes the empty set.\nHowever, we must ensure we do not double count the combination of both candidate keys. Specifically, the combination \\{\\text{enrollment\\_num}, \\text{class}, \\text{section}, \\text{roll}\\} is a superkey common to both sets.\n\n\nCorrect Count of Superkeys:\n\nSuperkeys involving \\{\\text{enrollment\\_num}\\}:\n\n16 superkeys (including \\{\\text{enrollment\\_num}\\} itself).\n\nSuperkeys involving \\{\\text{class}, \\text{section}, \\text{roll}\\}:\n\n4 superkeys (including \\{\\text{class}, \\text{section}, \\text{roll}\\} itself).\n\n\nTotaling these gives us 16 + 4 = 20 superkeys.\nHowever, we must subtract 2 for the overlap between the two candidate keys:\n\n20 - 2 = 18\n\nThus, the maximum number of possible superkeys of studentInfo is 18.",
    "crumbs": [
      "DBMS",
      "Week 2"
    ]
  },
  {
    "objectID": "pages/PDSA/w2-slides.html",
    "href": "pages/PDSA/w2-slides.html",
    "title": "PDSA - Week 2",
    "section": "",
    "text": "Example of validating SIM cards against Aadhaar data\n\nNaive approach takes thousands of years\nSmarter solution takes a few minutes\n\nTwo main resources of interest\n\nRunning time - how long the algorithm takes\nSpace - memory requirement\n\nTime depends on processing power\n\nImpossible to change for given hardware\nEnhancing hardware has only a limited impact at a practical level\n\nStorage is limited by available memory\n\nEasier to configure, augment\n\nTypically, we focus on time rather than space\n\n\n\n\n\n\n\nRunning time depends on input size\n\nLarger arrays will take longer to sort\n\nMeasure time efficiency as a function of input size\n\nInput size n\nRunning time t(n)\n\nDifferent inputs of the same size n can have different running times\n\n\n\nExample 1: SIM cards vs Aadhaar cards\n\nn \\approx 10^9 - number of cards\nNaive algorithm: t(n) \\approx n^2\nClever algorithm: t(n) \\approx n \\log_{2} n\n\nlog_{2}n - number of times you need to divide n by 2 to reach 1\nlog_{2}n = k \\implies n = 2^k\n\n\n\n\n\n\n\n\n\n\n\nExample 2: Video game\n\nSeveral objects on screen\nBasic step: find closest pair of objects\nn objects - naive algorithm is n^2\n\nFor each pair of objects, calculate distance\nReport minimum distance across all pairs\n\n\nThere is a clever algorithm that takes n \\log_{2} n\n\n\n\nHigh resolution gaming console may have 4000 \\times 2000 pixels\n\n8 \\times 10^6 points - 8 million\n\nSuppose we have 100,000 = 1 \\times 10^5 objects\nNaive algorithm takes 10^{10} steps\n\n1000 seconds, or 16.7 minutes in Python\nUnacceptable for a video game!\n\nlog_{2}100,000 is under 20, so nlog_{2}n takes a fraction of a second\n\n\n\n\n\n\n\nWhen comparing t(n), focus on the order of magnitude\n\nIgnore constants factors\n\nf(n) = n^3 eventually grows faster than g(n) = 5000n^2\n\nFor small values of n, f(n) &lt; g(n)\nAfter n=5000, f(n) overtakes g(n)\n\nAsymptotic complexity\n\nWhat happens in the limit as n becomes large\n\nTypical growth functions\n\nIs t(n) proportional to logn, …, n^2, n^3, …, 2^n?\n\nNote: logn means log_{2}n by default\n\nLogarithmic, polynomial, exponential, …\n\n\n\n\n\n\nAnalysis should be independent of the underlying hardware\n\nDon’t use actual time\nMeasure in terms of basic operations\n\nTypical basic operations\n\nCompare two values\nAssign a value to a variable\n\nExchange a pair of values? (x,y) = (y,x)   t = x   x = y   y = t\n\nIf we ignore constants, focus on orders of magnitude, both are within a factor of 3\nNeed not be very precise about defining basic operations\n\n\n\n\n\n\nTypically a natural parameter\n\nSize of a list/array that we want to search or sort\nNumber of objects we want to rearrange\nNumber of vertices and number of edges in a graph\n\nWhat about numeric problems? Is n a prime?\n\nMagnitude of n is not the correct measure\nArithmetic operations are performed digit by digit\n\nAddition with carry, subtraction with borrow, multiplication, long division…\n\nNumber of digits is a natural measure of input size\n\nSame as log_{b}n, when we write n in base b\n\n\n\n\n\n\n\nPerformance varies across input instances\n\nBy luck, the value we are searching for is the first element we examine in an array\n\nIdeally, want the “average” behaviour\n\nDifficult to compute\nAverage over what? Are all inputs equally likely?\nNeed a probability distribution over inputs\n\nInstead, worst case input\n\nInput that forces algorithm to take the longest time\n\nSearch for a value that is not present in an unsorted list\nMust scan all elements\n\nPessimistic - worst case may be rare\nUpper bound for worst case guarantees good performance\n\n\n\n\n\n\nTwo important parameters when measuring algorithm performance\n\nRunning time, memory requirement (space)\nWe mainly focus on time\n\nRunning time t(n) is a function of input size n\n\nCompare algorithms by their order of magnitude\nAsymptotic complexity, as n becomes large\n\nFrom running time, we can estimate feasible input sizes\nWe focus on worst case inputs\n\nPessimistic, but easier to compute than average case\nUpper bound on worst case gives us an overall guarantee of performance"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#measuring-performance",
    "href": "pages/PDSA/w2-slides.html#measuring-performance",
    "title": "PDSA - Week 2",
    "section": "Measuring performance",
    "text": "Measuring performance\n\nExample of validating SIM cards against Aadhaar data\n\nNaive approach takes thousands of years\nSmarter solution takes a few minutes\n\nTwo main resources of interest\n\nRunning time - how long the algorithm takes\nSpace - memory requirement\n\nTime depends on processing power\n\nImpossible to change for given hardware\nEnhancing hardware has only a limited impact at a practical level\n\nStorage is limited by available memory\n\nEasier to configure, augment\n\nTypically, we focus on time rather than space"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#input-size",
    "href": "pages/PDSA/w2-slides.html#input-size",
    "title": "PDSA - Week 2",
    "section": "Input size",
    "text": "Input size\n\n\n\nRunning time depends on input size\n\nLarger arrays will take longer to sort\n\nMeasure time efficiency as a function of input size\n\nInput size \\(n\\)\nRunning time \\(t(n)\\)\n\nDifferent inputs of the same size \\(n\\) can have different running times\n\n\n\nExample 1: SIM cards vs Aadhaar cards\n\n\\(n \\approx 10^9\\) - number of cards\nNaive algorithm: \\(t(n) \\approx n^2\\)\nClever algorithm: \\(t(n) \\approx n \\log_{2} n\\)\n\n\\(log_{2}n\\) - number of times you need to divide \\(n\\) by \\(2\\) to reach \\(1\\)\n\\(log_{2}n = k \\implies n = 2^k\\)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#input-size-1",
    "href": "pages/PDSA/w2-slides.html#input-size-1",
    "title": "PDSA - Week 2",
    "section": "Input size…",
    "text": "Input size…\n\n\n\nExample 2: Video game\n\nSeveral objects on screen\nBasic step: find closest pair of objects\n\\(n\\) objects - naive algorithm is \\(n^2\\)\n\nFor each pair of objects, calculate distance\nReport minimum distance across all pairs\n\n\nThere is a clever algorithm that takes \\(n \\log_{2} n\\)\n\n\n\nHigh resolution gaming console may have \\(4000 \\times 2000\\) pixels\n\n\\(8 \\times 10^6\\) points - \\(8\\) million\n\nSuppose we have \\(100,000 = 1 \\times 10^5\\) objects\nNaive algorithm takes \\(10^{10}\\) steps\n\n\\(1000\\) seconds, or \\(16.7\\) minutes in Python\nUnacceptable for a video game!\n\n\\(log_{2}100,000\\) is under \\(20\\), so \\(nlog_{2}n\\) takes a fraction of a second"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#orders-of-magnitude",
    "href": "pages/PDSA/w2-slides.html#orders-of-magnitude",
    "title": "PDSA - Week 2",
    "section": "Orders of magnitude",
    "text": "Orders of magnitude\n\nWhen comparing \\(t(n)\\), focus on the order of magnitude\n\nIgnore constants factors\n\n\\(f(n) = n^3\\) eventually grows faster than \\(g(n) = 5000n^2\\)\n\nFor small values of \\(n\\), \\(f(n) &lt; g(n)\\)\nAfter \\(n=5000\\), \\(f(n)\\) overtakes \\(g(n)\\)\n\nAsymptotic complexity\n\nWhat happens in the limit as \\(n\\) becomes large\n\nTypical growth functions\n\nIs \\(t(n)\\) proportional to \\(logn\\), …, \\(n^2\\), \\(n^3\\), …, \\(2^n\\)?\n\nNote: \\(logn\\) means \\(log_{2}n\\) by default\n\nLogarithmic, polynomial, exponential, …"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#measuring-running-time",
    "href": "pages/PDSA/w2-slides.html#measuring-running-time",
    "title": "PDSA - Week 2",
    "section": "Measuring running time",
    "text": "Measuring running time\n\nAnalysis should be independent of the underlying hardware\n\nDon’t use actual time\nMeasure in terms of basic operations\n\nTypical basic operations\n\nCompare two values\nAssign a value to a variable\n\nExchange a pair of values? (x,y) = (y,x)   t = x   x = y   y = t\n\nIf we ignore constants, focus on orders of magnitude, both are within a factor of \\(3\\)\nNeed not be very precise about defining basic operations"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#what-is-the-input-size",
    "href": "pages/PDSA/w2-slides.html#what-is-the-input-size",
    "title": "PDSA - Week 2",
    "section": "What is the input size",
    "text": "What is the input size\n\nTypically a natural parameter\n\nSize of a list/array that we want to search or sort\nNumber of objects we want to rearrange\nNumber of vertices and number of edges in a graph\n\nWhat about numeric problems? Is \\(n\\) a prime?\n\nMagnitude of \\(n\\) is not the correct measure\nArithmetic operations are performed digit by digit\n\nAddition with carry, subtraction with borrow, multiplication, long division…\n\nNumber of digits is a natural measure of input size\n\nSame as \\(log_{b}n\\), when we write \\(n\\) in base \\(b\\)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#which-inputs-should-we-consider",
    "href": "pages/PDSA/w2-slides.html#which-inputs-should-we-consider",
    "title": "PDSA - Week 2",
    "section": "Which inputs should we consider?",
    "text": "Which inputs should we consider?\n\nPerformance varies across input instances\n\nBy luck, the value we are searching for is the first element we examine in an array\n\nIdeally, want the “average” behaviour\n\nDifficult to compute\nAverage over what? Are all inputs equally likely?\nNeed a probability distribution over inputs\n\nInstead, worst case input\n\nInput that forces algorithm to take the longest time\n\nSearch for a value that is not present in an unsorted list\nMust scan all elements\n\nPessimistic - worst case may be rare\nUpper bound for worst case guarantees good performance"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary",
    "href": "pages/PDSA/w2-slides.html#summary",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nTwo important parameters when measuring algorithm performance\n\nRunning time, memory requirement (space)\nWe mainly focus on time\n\nRunning time \\(t(n)\\) is a function of input size \\(n\\)\n\nCompare algorithms by their order of magnitude\nAsymptotic complexity, as \\(n\\) becomes large\n\nFrom running time, we can estimate feasible input sizes\nWe focus on worst case inputs\n\nPessimistic, but easier to compute than average case\nUpper bound on worst case gives us an overall guarantee of performance"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#orders-of-magnitude-1",
    "href": "pages/PDSA/w2-slides.html#orders-of-magnitude-1",
    "title": "PDSA - Week 2",
    "section": "Orders of magnitude",
    "text": "Orders of magnitude\n\nWhen comparing \\(t(n)\\), focus on orders of magnitude\n\nIgnore constant factors\n\n\\(f(n)=n^3\\) eventually dominates \\(g(n)=5000n^2\\)\nHow do we compare functions with respect to orders of magnitude?"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#upper-bounds",
    "href": "pages/PDSA/w2-slides.html#upper-bounds",
    "title": "PDSA - Week 2",
    "section": "Upper bounds",
    "text": "Upper bounds\n\n\\(f(x)\\) is said to be \\(O(g(x))\\) if we can find constants \\(c\\) and \\(x_0\\) such that \\(c \\cdot g(x)\\) is an upper bound for \\(f(x)\\) for \\(x\\) beyond \\(x_0\\)\n\\(f(x) \\leq cg(x)\\) for every \\(x \\geq x_0\\)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#examples",
    "href": "pages/PDSA/w2-slides.html#examples",
    "title": "PDSA - Week 2",
    "section": "Examples",
    "text": "Examples\n\n\\(100n+5\\) is \\(O(n^2)\\)\n\n\\(100n+5 \\leq 100n+n=101n\\), for \\(n \\geq 5\\)\n\\(101n \\leq 101n^2\\)\nChoose \\(n_0=5\\) and \\(c=101\\)\n\nAlternatively\n\n\\(100n+5 \\leq 100n +5n =105n\\), for \\(n \\geq 1\\)\n\\(105n \\leq 105n^2\\)\nChoose \\(n_0=1\\) and \\(c=105\\)\n\nChoice of \\(c\\) and \\(n_0\\) is not unique"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#examples-1",
    "href": "pages/PDSA/w2-slides.html#examples-1",
    "title": "PDSA - Week 2",
    "section": "Examples…",
    "text": "Examples…\n\n\\(100n^2 + 20n +5\\) is \\(O(n^2)\\)\n\n\\(100n^2 + 20n +5 \\leq 100n^2 + 20n^2 +5n^2\\), for \\(n \\geq 1\\)\n\\(100n^2 + 20n^2 +5n^2 \\leq 125n^2\\), for \\(n \\geq 1\\)\nChoose \\(n_0=1\\) and \\(c=125\\)\n\nWhat matters is the highest term\n\n\\(20n+5\\) is dominated by \\(100n^2\\)\n\n\\(n^3\\) is not \\(O(n^2)\\)\n\nNo matter what \\(c\\) we choose, \\(cn^2\\) will be dominated by \\(n^3\\) for \\(n \\geq c\\)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#useful-properties",
    "href": "pages/PDSA/w2-slides.html#useful-properties",
    "title": "PDSA - Week 2",
    "section": "Useful properties",
    "text": "Useful properties\n\n\n\nIf \\(f_{1}(n)\\) is \\(O(g_{1}(n))\\) and \\(f_{2}(n)\\) is \\(O(g_{2}(n))\\), then \\(f_{1}(n)+f_{2}(n)\\) is \\(O(\\max(g_{1}(n),g_{2}(n)))\\)\nProof\n\n\\(f_{1}(n) \\leq c_{1}g_{1}(n)\\) for \\(n \\geq n_{1}\\)\n\\(f_{2}(n) \\leq c_{2}g_{2}(n)\\) for \\(n \\geq n_{2}\\)\nLet \\(c_{3} = \\max(c_{1},c_{2})\\), \\(n_{3} = \\max(n_{1},n_{2})\\)\nFor \\(n \\geq n_{3}\\), \\(f_{1}(n)+f_{2}(n)\\)\n\n\\(\\leq c_{1}g_{1}(n)+c_{2}g_{2}(n)\\)\n\\(\\leq c_{3}g_{1}(n)+c_{3}g_{2}(n)\\)\n\\(\\leq 2c_{3}(\\max(g_{1}(n),g_{2}(n)))\\)\n\n\n\n\n\nAlgorithm has two phases\n\nPhase A takes time \\(O(g_{A}(n))\\)\nPhase B takes time \\(O(g_{B}(n))\\)\n\nAlgorithm as a whole takes time \\(\\max(O(g_{A}(n),g_{B}(n)))\\)\nLeast efficient phase is the upper bound for the whole algorithm"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#lower-bounds",
    "href": "pages/PDSA/w2-slides.html#lower-bounds",
    "title": "PDSA - Week 2",
    "section": "Lower bounds",
    "text": "Lower bounds\n\n\\(f(x)\\) is said to be \\(\\Omega(g(x))\\) if we can find constants \\(c\\) and \\(x_0\\) such that \\(c \\cdot g(x)\\) is a lower bound for \\(f(x)\\) for \\(x\\) beyond \\(x_0\\)\n\n\\(f(x) \\geq cg(x)\\) for every \\(x \\geq x_0\\)\n\n\\(n^3\\) is \\(\\Omega(n^2)\\)\n\n\\(n^3 &gt; n^2\\) for all \\(n\\), so \\(n_0=1\\), \\(c=1\\)\n\nTypically we establish lower bounds for a problem rather than an individual algorithm\n\nIf we sort a list by comparing elements and swapping them, we require \\(\\Omega(n \\log n)\\) comparisons\nThis is independent of the sorting algorithm"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#tight-bounds",
    "href": "pages/PDSA/w2-slides.html#tight-bounds",
    "title": "PDSA - Week 2",
    "section": "Tight bounds",
    "text": "Tight bounds\n\n\\(f(x)\\) is said to be \\(\\Theta(g(x))\\) if \\(f(x)\\) is both \\(O(g(x))\\) and \\(\\Omega(g(x))\\)\n\nFind constants \\(c_1\\), \\(c_2\\), \\(x_0\\) such that \\(c_{1}g(x) \\leq f(x) \\leq c_{2}g(x)\\) for every \\(x \\geq x_0\\)\n\n\\(\\frac{n(n-1)}{2}\\) is \\(\\Theta(n^2)\\)\n\nUpper bound\n\n\\(\\frac{n(n-1)}{2} = \\frac{n^2}{2} - \\frac{n}{2} \\leq \\frac{n^2}{2}\\) for all \\(n \\geq 0\\)\n\nLower bound\n\n\\(\\frac{n(n-1)}{2} = \\frac{n^2}{2} - \\frac{n}{2} \\geq \\frac{n^2}{2} - (\\frac{n}{2} \\times \\frac{n}{2}) \\geq \\frac{n^2}{4}\\) for \\(n \\geq 2\\)\n\nChoose \\(n_0 = 2\\), \\(c_1 = \\frac{1}{4}\\), \\(c_2 = \\frac{1}{2}\\)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary-1",
    "href": "pages/PDSA/w2-slides.html#summary-1",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\n\\(f(n)\\) is \\(O(g(n))\\) means \\(f(n)\\) is bounded above by \\(g(n)\\)\n\nUseful to describe asymptotic worst case running time\n\n\\(f(n)\\) is \\(\\Omega(g(n))\\) means \\(f(n)\\) is bounded below by \\(g(n)\\)\n\nTypically used for a problem as a whole, rather than an individual algorithm\n\n\\(f(n)\\) is \\(\\Theta(g(n))\\) means \\(f(n)\\) is bounded both above and below by \\(g(n)\\)\n\nWe have found an optimal algorithm for the problem"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#example-1",
    "href": "pages/PDSA/w2-slides.html#example-1",
    "title": "PDSA - Week 2",
    "section": "Example 1",
    "text": "Example 1\n\n\nFind the maximum element in a list\n\nInput size is the length of the list\nSingle loop scans all elements\nAlways takes \\(n\\) steps\nOverall time is \\(O(n)\\)\n\n\ndef maxElement(L):\n    maxval = L[0]\n    for i in range(len(L)):\n        if L[i] &gt; maxval:\n            maxval = L[i]\n    return maxval"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#example-2",
    "href": "pages/PDSA/w2-slides.html#example-2",
    "title": "PDSA - Week 2",
    "section": "Example 2",
    "text": "Example 2\n\n\nCheck whether a list contains duplicates\n\nInput size is the length of the list\nNested loop scans all pairs of elements\nA duplicate may be found in the very first iteration\nWorst case - no duplicates, both loops run fully\nTime is \\((n-1)+(n-2)+...+1=\\frac{n(n-1)}{2}\\)\nOverall time is \\(O(n^2)\\)\n\n\ndef noDuplicates(L):\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            if L[i] == L[j]:\n                return False\n    return True"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#example-3",
    "href": "pages/PDSA/w2-slides.html#example-3",
    "title": "PDSA - Week 2",
    "section": "Example 3",
    "text": "Example 3\n\n\nMatrix multiplication\n\nMatrix is represented as a list of lists\n\n\\(\\begin{pmatrix}1 & 2 & 3\\\\4 & 5 & 6\\end{pmatrix}\\)\n[[1, 2, 3], [4, 5, 6]]\n\nInput matrices have size \\(m \\times n\\), \\(n \\times p\\)\nOutput matrix is \\(m \\times p\\)\nThree nested loops\nOverall time is \\(O(mnp)\\) - \\(O(n^3)\\) if both are \\(n \\times n\\)\n\n\ndef matrixMultiply(A, B):\n    (m, n, p) = (len(A), len(B), len(B[0]))\n    C = [[0 for i in range(p)]\n            for j in range(m)]\n    for i in range(m):\n        for j in range(p):\n            for k in range(n):\n                C[i][j] = C[i][j] + A[i][k] * B[k][j]\n    return C"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#example-4",
    "href": "pages/PDSA/w2-slides.html#example-4",
    "title": "PDSA - Week 2",
    "section": "Example 4",
    "text": "Example 4\n\n\nNumber of bits in binary representation of n\n\n\\(\\log n\\) steps for \\(n\\) to reach \\(1\\)\nFor number theoretic problems, input size is number of digits\nThis algorithm is linear in input size\n\n\ndef numberOfBits(n):\n    count = 1\n    while n &gt; 1:\n        count += 1\n        n = n // 2\n    return count"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#example-5",
    "href": "pages/PDSA/w2-slides.html#example-5",
    "title": "PDSA - Week 2",
    "section": "Example 5",
    "text": "Example 5\nTowers of Hanoi\n\nThree pegs A, B, C\nMove \\(n\\) disks from A to B, use C as transit peg\nNever place a larger disk on a smaller one\nRecursive solution\n\nMove \\(n-1\\) disks from A to C, use B as transit peg\nMove the largest disk from A to B\nMove \\(n-1\\) disks from C to B, use A as transit peg"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#example-5-contd.",
    "href": "pages/PDSA/w2-slides.html#example-5-contd.",
    "title": "PDSA - Week 2",
    "section": "Example 5 (contd.)",
    "text": "Example 5 (contd.)\n\nRecurrence\n\n\\(M(n)\\) - number of moves to transfer \\(n\\) disks\n\\(M(1) = 1\\)\n\\(M(n) = M(n-1) + 1 + M(n-1) = 2M(n-1)+1\\)\n\nUnwind and solve \\[\\begin{aligned}\nM( n) & =\\ 2M( n-1) +1\\\\\n& =\\ 2( 2M( n-2) +1) +1=\\ 2^{2} M( n-2) +( 2+1)\\\\\n& =\\ 2^{2}( 2M( n-3) +1) +( 2+1) =\\ 2^{3} M( n-3) \\ +\\ ( 4+2+1)\\\\\n& \\dotsc \\\\\n& =\\ 2^{k} M( n-k) +\\left( 2^{k} -1\\right)\\\\\n& \\dotsc \\\\\n& =\\ 2^{n-1} M( 1) +\\left( 2^{n-1} -1\\right)\\\\\n& =\\ 2^{n-1} +2^{n-1} -1\\\\\n& =\\ 2^{n} -1\n\\end{aligned}\\]"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary-2",
    "href": "pages/PDSA/w2-slides.html#summary-2",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nIterative programs\n\nFocus on loops\n\nRecursive programs\n\nWrite and solve a recurrence\n\nNeed to be clear about accounting for “basic” operations"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#search-problem",
    "href": "pages/PDSA/w2-slides.html#search-problem",
    "title": "PDSA - Week 2",
    "section": "Search problem",
    "text": "Search problem\n\n\n\nIs a value v present in a list l?\nNaive solution scans the list\nInput size n, the length of the list\nWorst case is when v is not in l\nWorst case complexity is O(n)\n\n\ndef naivesearch(v, l):\n    for x in l:\n        if v == x:\n            return True\n    return False"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#searching-a-sorted-list",
    "href": "pages/PDSA/w2-slides.html#searching-a-sorted-list",
    "title": "PDSA - Week 2",
    "section": "Searching a sorted list",
    "text": "Searching a sorted list\n\n\n\nWhat if l is sorted in ascending order?\nCompare v with the midpoint of l\n\nIf midpoint is v, the value is found\nIf v is less than midpoint, search the first half\nIf v greater than midpoint, search the second half\nStop when the interval to search becomes empty\n\n\n\ndef binarysearch(v, l):\n    if l == []:\n        return False\n    m = len(l) // 2\n    if v == l[m]:\n        return True\n    if v &lt; l[m]:\n        return binarysearch(v, l[:m])\n    else:\n        return binarysearch(v, l[m+1:])"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#binary-search",
    "href": "pages/PDSA/w2-slides.html#binary-search",
    "title": "PDSA - Week 2",
    "section": "Binary search",
    "text": "Binary search\n\nHow long does this take?\n\nEach call halves the interval to search\nStop when the interval becomes empty\n\n\\(\\log n\\) - number of times to divide \\(n\\) by 2 to reach 1\n\n\\(1//2 =0\\), so next call reaches empty interval\n\n\\(O(\\log n)\\) steps"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#alternative-calculation",
    "href": "pages/PDSA/w2-slides.html#alternative-calculation",
    "title": "PDSA - Week 2",
    "section": "Alternative calculation",
    "text": "Alternative calculation\n\n\n\n\\(T(n)\\): the time to search a list of length \\(n\\)\n\nIf \\(n=0\\), we exit, so \\(T(0) = 1\\)\nIf \\(n&gt;0\\), \\(T(n)=T(n//2)+1\\)\n\nRecurrence for \\(T(n)\\)\n\n\\(T(0) = 1\\)\n\\(T(n) = T(n//2) + 1\\), \\(n&gt;0\\)\n\nSolve by “unwinding” \\[\\begin{aligned}\nT( n) & =\\ T( n//2) +1\\\\\n& =\\ ( T( n//4) +1) +1=\\ T\\left( n//2^{2}\\right) +\\underbrace{1+1}_{2}\\\\\n& =\\ \\dotsc \\\\\n& =\\ T\\left( n//2^{k}\\right) +\\underbrace{1+\\dots +1} _{k}\\\\\n& =\\ T( 1) +k,\\ \\text{for} \\ k=\\log n\\\\\n& =\\ ( T( 0) +1) +\\log n\\\\\n& =\\ 2+\\log n\n\\end{aligned}\\]\n\n\ndef bsearch(v, l):\n    if l == []:\n        return False\n    m = len(l) // 2\n    if v == l[m]:\n        return True\n    if v &lt; l[m]:\n        return bsearch(v, l[:m])\n    else:\n        return bsearch(v, l[m+1:])"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary-3",
    "href": "pages/PDSA/w2-slides.html#summary-3",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nSearch in an unsorted list takes time \\(O(n)\\)\n\nNeed to scan the entire list\nWorst case is when the value is not in the list\n\nFor a sorted list, binary search takes time \\(O(\\log n)\\)\n\nHalve the interval to search each time\n\nIn a sorted list, we can determine that v is absent by examining just \\(\\log n\\) values!"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n\n\n\nSorting a list makes many other computations easier\n\nBinary search\nFinding the median\nChecking for duplicates\nBuilding a histogram\n\nHow do we sort a list?\nYou are the TA for a course\n\nInstructor has a pile of evaluated exam papers\nPapers in random order of marks\nYour task is to arrange the papers in descending order of marks\n\n\n\n\nStrategy 1\n\nScan the entire pile and find the paper with the minimum marks\nMove this paper to a new pile\nRepeat with the remaining papers\n\nAdd the paper with the next minimum marks to the second pile each time\n\nEventually, the new pile is sorted in descending order of marks"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-1",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-1",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-2",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-2",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-3",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-3",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-4",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-4",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-5",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-5",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 64"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-6",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-6",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 64 74"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-7",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-7",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 64 74 89"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#selection-sort",
    "href": "pages/PDSA/w2-slides.html#selection-sort",
    "title": "PDSA - Week 2",
    "section": "Selection Sort",
    "text": "Selection Sort\n\n\n\nSelect the next element in sorted order\nAppend it to the final sorted list\nAvoid using a second list\n\nSwap the minimum element into the first position\nSwap the second minimum element into the second position\n…\n\nEventually the list is rearranged in place in ascending order\n\n\ndef SelectionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        mpos = i\n        # mpos: position of minimum in L[i:]\n        for j in range(i+1,n):\n            if L[j] &lt; L[mpos]:\n            mpos = j\n        # L[mpos] : smallest value in L[i:]\n        # Exchange L[mpos] and L[i]\n        (L[i],L[mpos]) = (L[mpos],L[i])\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#analysis-of-selection-sort",
    "href": "pages/PDSA/w2-slides.html#analysis-of-selection-sort",
    "title": "PDSA - Week 2",
    "section": "Analysis of Selection Sort",
    "text": "Analysis of Selection Sort\n\n\n\nCorrectness follows from the invariant\nEfficiency\n\nOuter loop runs \\(n\\) times\nInner loop runs \\(n-i\\) times to find minimum in L[i:]\n\\(T(n) = n + (n-1) + (n-2) + \\ldots + 1\\)\n\\(T(n) = \\frac{n(n+1)}{2}\\)\n\nSelection sort is \\(O(n^2)\\)\n\n\ndef SelectionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        mpos = i\n        # mpos: position of minimum in L[i:]\n        for j in range(i+1,n):\n            if L[j] &lt; L[mpos]:\n            mpos = j\n        # L[mpos] : smallest value in L[i:]\n        # Exchange L[mpos] and L[i]\n        (L[i],L[mpos]) = (L[mpos],L[i])\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary-4",
    "href": "pages/PDSA/w2-slides.html#summary-4",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nSelection sort is an intuitive algorithm to sort a list\nRepeatedly find the minimum (or maximum) and append to sorted list\nWorst case complexity is \\(O(n^2)\\)\n\nEvery input takes this much time\nNo advantage even if list is arranged carefully before sorting"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-8",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-8",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n\n\n\nYou are the TA for a course\n\nInstructor has a pile of evaluated exam papers\nPapers in random order of marks\nYour task is to arrange the papers in descending order of marks\n\n\n\n\nStrategy 2\n\nMove the first paper to a new pile\nSecond paper\n\nLower marks than the first paper? Place it below the first paper in new pile\nHigher marks than the first paper? Place it above the first paper in new pile\n\nThird paper\n\nInsert into correct position with respect to the first two papers\n\nDo this for the remaining papers\n\nInsert each one into the correct position in the second pile"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-9",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-9",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-10",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-10",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n74"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-11",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-11",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 74"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-12",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-12",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 74 89"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-13",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-13",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n32 55 74 89"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-14",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-14",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 74 89"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#sorting-a-list-15",
    "href": "pages/PDSA/w2-slides.html#sorting-a-list-15",
    "title": "PDSA - Week 2",
    "section": "Sorting a list",
    "text": "Sorting a list\n74 32 89 55 21 64\n21 32 55 64 74 89"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#insertion-sort",
    "href": "pages/PDSA/w2-slides.html#insertion-sort",
    "title": "PDSA - Week 2",
    "section": "Insertion Sort",
    "text": "Insertion Sort\n\n\n\nStart building a new sorted list\nPick next element and insert it into the sorted list\nAn iterative formulation\n\nAssume L[:i] is sorted\nInsert L[i] in L[:i]\n\nA recursive formulation\n\nInductively sort L[:i]\nInsert L[i] in L[:i]\n\n\n\ndef InsertionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        # Move L[i] to correct position in L[:i]\n        j = i\n        while(j &gt; 0 and L[j] &lt; L[j-1]):\n            (L[j],L[j-1]) = (L[j-1],L[j])\n            j = j-1\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#analysis-of-iterative-insertion-sort",
    "href": "pages/PDSA/w2-slides.html#analysis-of-iterative-insertion-sort",
    "title": "PDSA - Week 2",
    "section": "Analysis of iterative Insertion Sort",
    "text": "Analysis of iterative Insertion Sort\n\n\n\nCorrectness follows from the invariant\nEfficiency\n\nOuter loop iterates \\(n\\) times\nInner loop: \\(i\\) steps to insert L[i] in L[:i]\n\\(T(n) = 0 + 1 + · · · + (n − 1)\\)\n\\(T(n) = \\frac{n(n-1)}{2}\\)\n\nInsertion sort is \\(O(n^2)\\)\n\n\ndef InsertionSort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    for i in range(n):\n        # Assume L[:i] is sorted\n        # Move L[i] to correct position in L[:i]\n        j = i\n        while(j &gt; 0 and L[j] &lt; L[j-1]):\n            (L[j],L[j-1]) = (L[j-1],L[j])\n            j = j-1\n        # Now L[:i+1] is sorted\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#analysis-of-recursive-insertion-sort",
    "href": "pages/PDSA/w2-slides.html#analysis-of-recursive-insertion-sort",
    "title": "PDSA - Week 2",
    "section": "Analysis of recursive Insertion Sort",
    "text": "Analysis of recursive Insertion Sort\n\n\n\nFor input of size \\(n\\), let\n\n\\(TI(n)\\) be the time taken by Insert\n\\(TS(n)\\) be the time taken by ISort\n\nFirst calculate \\(TI(n)\\) for Insert\n\n\\(TI(0) = 1\\)\n\\(TI(n) = TI(n − 1) + 1\\)\nUnwind to get \\(TI(n) = n\\)\n\nSet up a recurrence for \\(TS(n)\\)\n\n\\(TS(0) = 1\\)\n\\(TS(n) = TS(n − 1) + TI(n − 1)\\)\n\nUnwind to get \\(1 + 2 + · · · + n − 1\\)\n\n\ndef Insert(L,v):\n    n = len(L)\n    if n == 0:\n        return([v])\n    if v &gt;= L[-1]:\n        return(L+[v])\n    else:\n        return(Insert(L[:-1],v)+L[-1:])\n\ndef ISort(L):\n    n = len(L)\n    if n &lt; 1:\n        return(L)\n    L = Insert(ISort(L[:-1]),L[-1])\n    return(L)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary-5",
    "href": "pages/PDSA/w2-slides.html#summary-5",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nInsertion sort is another intuitive algorithm to sort a list\nCreate a new sorted list\nRepeatedly insert elements into the sorted list\nWorst case complexity is \\(O(n^2)\\)\n\nUnlike selection sort, not all cases take time \\(n^2\\)\nIf list is already sorted, Insert stops in \\(1\\) step\nOverall time can be close to \\(O(n)\\)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#beating-the-on2-barrier",
    "href": "pages/PDSA/w2-slides.html#beating-the-on2-barrier",
    "title": "PDSA - Week 2",
    "section": "Beating the \\(O(n^2)\\) barrier",
    "text": "Beating the \\(O(n^2)\\) barrier\n\nBoth selection sort and insertion sort take time \\(O(n^2)\\)\nThis is infeasible for \\(n &gt; 10000\\)\nHow can we bring the complexity below \\(O(n^2)\\)?\n\n\nStrategy 3\n\nDivide the list into two halves\nSeparately sort the left and right half\nCombine the two sorted halves to get a fully sorted list"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n\nCombine two sorted lists A and B into a single sorted list C\n\nCompare first elements of A and B\nMove the smaller of the two to C\nRepeat till you exhaust A and B\n\nMerging A and B"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-1",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-1",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-2",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-2",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-3",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-3",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-4",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-4",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-5",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-5",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55 64"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-6",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-6",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55 64 74"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-7",
    "href": "pages/PDSA/w2-slides.html#combining-two-sorted-lists-7",
    "title": "PDSA - Week 2",
    "section": "Combining two sorted lists",
    "text": "Combining two sorted lists\n32 74 89\n21 55 64\n21 32 55 64 74 89"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#merge-sort",
    "href": "pages/PDSA/w2-slides.html#merge-sort",
    "title": "PDSA - Week 2",
    "section": "Merge sort",
    "text": "Merge sort\n\n\n\nLet \\(n\\) be the length of \\(L\\)\nSort A[:n//2]\nSort A[n//2:]\nMerge the sorted halves into B\nHow do we sort A[:n//2] and A[n//2:]?\n\nRecursively, same strategy!\n\n\n\n\nDivide and conquer\n\nBreak up the problem into disjoint parts\nSolve each part separately\nCombine the solutions efficiently"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#merging-sorted-lists",
    "href": "pages/PDSA/w2-slides.html#merging-sorted-lists",
    "title": "PDSA - Week 2",
    "section": "Merging sorted lists",
    "text": "Merging sorted lists\n\n\n\nCombine two sorted lists A and B into C\n\nIf A is empty, copy B into C\nIf B is empty, copy A into C\nOtherwise, compare first elements of A and B\n\nMove the smaller of the two to C\n\nRepeat till all elements of A and B have been moved\n\n\n\ndef merge(A,B):\n    (m,n) = (len(A),len(B))\n    (C,i,j,k) = ([],0,0,0)\n    while k &lt; m+n:\n        if i == m:\n            C.extend(B[j:])\n            k = k + (n-j)\n        elif j == n:\n            C.extend(A[i:])\n            k = k + (m-i)\n        elif A[i] &lt; B[j]:\n            C.append(A[i])\n            (i,k) = (i+1,k+1)\n        else:\n            C.append(B[j])\n            (j,k) = (j+1,k+1)\n    return(C)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#merge-sort-1",
    "href": "pages/PDSA/w2-slides.html#merge-sort-1",
    "title": "PDSA - Week 2",
    "section": "Merge sort",
    "text": "Merge sort\n\n\n\nTo sort A into B, both of length \\(n\\)\nIf \\(n \\leq 1\\), nothing to be done\nOtherwise\n\nSort A[:n//2] into L\nSort A[n//2:] into R\nMerge L and R into B\n\n\n\ndef mergesort(A):\n    n = len(A)\n    if n &lt;= 1:\n        return(A)\n    L = mergesort(A[:n//2])\n    R = mergesort(A[n//2:])\n    B = merge(L,R)\n    return(B)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary-6",
    "href": "pages/PDSA/w2-slides.html#summary-6",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nMerge sort using divide and conquer to sort a list\nDivide the list into two halves\nSort each half\nMerge the sorted halves\nNext, we have to check that the complexity is less than \\(O(n^2)\\)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#merge-sort-2",
    "href": "pages/PDSA/w2-slides.html#merge-sort-2",
    "title": "PDSA - Week 2",
    "section": "Merge sort",
    "text": "Merge sort\n\n\n\nTo sort A into B, both of length \\(n\\)\nIf \\(n \\leq 1\\), nothing to be done\nOtherwise\n\nSort A[:n//2] into L\nSort A[n//2:] into R\nMerge L and R into B\n\n\n\n\nMerging two sorted lists A and B into C\n\nIf A is empty, copy B into C\nIf B is empty, copy A into C\nOtherwise, compare first elements of A and B\n\nMove the smaller of the two to C\n\nRepeat till all elements of A and B have been moved"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#analysing-merge",
    "href": "pages/PDSA/w2-slides.html#analysing-merge",
    "title": "PDSA - Week 2",
    "section": "Analysing merge",
    "text": "Analysing merge\n\n\n\nMerge A of length \\(m\\), B of length \\(n\\)\nOutput list C has length \\(m + n\\)\nIn each iteration we add (at least) one element to C\nHence merge takes time \\(O(m + n)\\)\nRecall that \\(m + n \\leq 2(max(m, n))\\)\nIf \\(m \\approx n\\), merge take time \\(O(n)\\)\n\n\ndef merge(A,B):\n    (m,n) = (len(A),len(B))\n    (C,i,j,k) = ([],0,0,0)\n    while k &lt; m+n:\n        if i == m:\n            C.extend(B[j:])\n            k = k + (n-j)\n        elif j == n:\n            C.extend(A[i:])\n            k = k + (m-i)\n        elif A[i] &lt; B[j]:\n            C.append(A[i])\n            (i,k) = (i+1,k+1)\n        else:\n            C.append(B[j])\n            (j,k) = (j+1,k+1)\n    return(C)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#analysing-mergesort",
    "href": "pages/PDSA/w2-slides.html#analysing-mergesort",
    "title": "PDSA - Week 2",
    "section": "Analysing mergesort",
    "text": "Analysing mergesort\n\n\n\nLet \\(T(n)\\) be the time taken for input of size \\(n\\)\n\nFor simplicity, assume \\(n = 2^k\\) for some \\(k\\)\n\nRecurrence\n\n\\(T(0) = T(1) = 1\\)\n\\(T(n) = 2T(\\frac{n}{2}) + n\\)\n\nSolve two subproblems of size \\(\\frac{n}{2}\\)\nMerge the solutions in time \\(\\frac{n}{2} + \\frac{n}{2} = n\\)\n\n\nUnwind the recurrence to solve\n\n\ndef mergesort(A):\n    n = len(A)\n    if n &lt;= 1:\n        return(A)\n    L = mergesort(A[:n//2])\n    R = mergesort(A[n//2:])\n    B = merge(L,R)\n    return(B)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#analysing-mergesort-1",
    "href": "pages/PDSA/w2-slides.html#analysing-mergesort-1",
    "title": "PDSA - Week 2",
    "section": "Analysing mergesort",
    "text": "Analysing mergesort\n\n\n\nRecurrence\n\n\\(T(0) = T(1) = 1\\)\n\\(T(n) = 2T(\\frac{n}{2}) + n\\)\n\n\\(T(n) = 2T(\\frac{n}{2}) + n\\)\n\n\\(= 2[2T(\\frac{n}{4}) + \\frac{n}{2}] + n = 2^2T(\\frac{n}{2^2}) + 2n\\)\n\\(= 2^{2}[2T(\\frac{n}{2^3}) + \\frac{n}{2^2}] + 2n = 2^3T(\\frac{n}{2^3}) + 3n\\)\n\\(\\ldots\\)\n\\(= 2^kT(\\frac{n}{2^k}) + kn\\)\n\nWhen \\(k = \\log n\\), \\(T(\\frac{n}{2^k})=T(1)=1\\)\n\\(T(n) = 2^{\\log n}T(1) + n\\log n = n + n\\log n\\)\nHence merge sort is \\(O(n\\log n)\\)\n\n\ndef mergesort(A):\n    n = len(A)\n    if n &lt;= 1:\n        return(A)\n    L = mergesort(A[:n//2])\n    R = mergesort(A[n//2:])\n    B = merge(L,R)\n    return(B)"
  },
  {
    "objectID": "pages/PDSA/w2-slides.html#summary-7",
    "href": "pages/PDSA/w2-slides.html#summary-7",
    "title": "PDSA - Week 2",
    "section": "Summary",
    "text": "Summary\n\nMerge sort takes time \\(O(n \\log n)\\) so can be used effectively on large inputs\nVariations on merge are possible\n\nUnion of two sorted lists — discard duplicates, if A[i] == B[j] move just one copy to C and increment both i and j\nIntersection of two sorted lists — when A[i] == B[j], move one copy to C, otherwise discard the smaller of A[i], B[j]\nList difference — elements in A but not in B\n\nMerge needs to create a new list to hold the merged elements\n\nNo obvious way to efficiently merge two lists in place\nExtra storage can be costly\n\nInherently recursive\n\nRecursive calls and returns are expensive"
  },
  {
    "objectID": "pages/random/Fourier.html",
    "href": "pages/random/Fourier.html",
    "title": "Notes",
    "section": "",
    "text": "Some handwritten notes on Fourier Series Representations",
    "crumbs": [
      "Random",
      "Fourier Series Representations"
    ]
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#select-distinct",
    "href": "pages/DBMS/w3-revealjs.html#select-distinct",
    "title": "Week 3",
    "section": "Select distinct",
    "text": "Select distinct\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has capacity less than 100 (removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT DISTINCT building\nFROM classroom\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#select-all",
    "href": "pages/DBMS/w3-revealjs.html#select-all",
    "title": "Week 3",
    "section": "Select all",
    "text": "Select all\n\nFrom the classroom relation, find the names of buildings in which every individual classroom has a capacity of less than 100 (without removing the duplicates).\n\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\nQuery:\nSELECT ALL building\nFROM classroom C\nWHERE capacity &lt; 100;\n\n\n\n\n\nbuilding\n\n\n\n\nPainter\n\n\nTaylor\n\n\nWatson\n\n\nWatson\n\n\n\n\n\n\nNote that duplicate retention is the default and hence it is a common practice to skip all immediately after select."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#cartesian-product",
    "href": "pages/DBMS/w3-revealjs.html#cartesian-product",
    "title": "Week 3",
    "section": "Cartesian product",
    "text": "Cartesian product\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFind the list of all students of departments which have a budget &lt; $0.1million\n\nSELECT name, budget\nFROM student, department\nWHERE student.dept_name = department.dept_name AND budget &lt; 100000;\n\n\n\n\n\nname\nbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query first generates every possible student-department pair, which is the Cartesian product of the student and department relations. Then, it filters out all the rows with student.dept_name = department.dept_name and department.budget &lt; 100000.\nThe common attribute dept_name in the resulting table is renamed using the relation name - student.dept_name and department.dept_name."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#rename-as-operation",
    "href": "pages/DBMS/w3-revealjs.html#rename-as-operation",
    "title": "Week 3",
    "section": "Rename AS Operation",
    "text": "Rename AS Operation\n\nThe same query above can be framed by renaming the tables as follows:\n\nSELECT S.name AS studentname, budget AS deptbudget\nFROM student AS S, department AS D\nWHERE S.dept_name = D.dept_name AND budget &lt; 100000;\n\n\n\n\n\nstudentname\ndeptbudget\n\n\n\n\nBrandt\n50000\n\n\nPeltier\n70000\n\n\nLevy\n70000\n\n\nSanchez\n80000\n\n\nSnow\n70000\n\n\nAoi\n85000\n\n\nBourikas\n85000\n\n\nTanaka\n90000\n\n\n\n\n\n\nThe above query renames the relations student and department as S and D respectively\nIt also displays the attribute name as StudentName and budget as DeptBudget\nNote that the budget attribute does not have any prefix because it occurs only in the department relation."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#where-and-and-or",
    "href": "pages/DBMS/w3-revealjs.html#where-and-and-or",
    "title": "Week 3",
    "section": "Where: AND and OR",
    "text": "Where: AND and OR\n\nFrom the instructor and department relations, find out the names of all instructors whose department is Finance or whose department is in any of the following buildings: Watson, Taylor.\n\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\n\n\n\n\ndept_name\nbuilding\nbudget\n\n\n\n\nBiology\nWatson\n90000\n\n\nComp. Sci.\nTaylor\n100000\n\n\nElec. Eng.\nTaylor\n85000\n\n\nFinance\nPainter\n120000\n\n\nHistory\nPainter\n50000\n\n\nMusic\nPackard\n80000\n\n\nPhysics\nWatson\n70000\n\n\n\n\n\nSELECT name\nFROM instructor I, department D\nWHERE I.dept_name = D.dept_name\nAND (I.dept_name = 'Finance' OR building IN ('Watson', 'Taylor'));\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nEinstein\n\n\nGold\n\n\nKatz\n\n\nSingh\n\n\nCrick\n\n\nBrandt\n\n\nKim"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#string-operations",
    "href": "pages/DBMS/w3-revealjs.html#string-operations",
    "title": "Week 3",
    "section": "String Operations",
    "text": "String Operations\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the titles of all courses whose course_id has three alphabets indicating the department.\n\nSELECT title\nFROM course\nWHERE course_id LIKE '___-%';\n\n\n\n\n\ntitle\n\n\n\n\nIntro. to Biology\n\n\nGenetics\n\n\nComputational Biology\n\n\nInvestment Banking\n\n\nWorld History\n\n\nPhysical Principles\n\n\n\n\n\n\nThe course_id of each department either has 2 or 3 alphabets in the beginning, followed by a hypher and then followed by 3 digits. The above query returns the names of all courses whose course_id has 3 alphabets in the beginning."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#order-by",
    "href": "pages/DBMS/w3-revealjs.html#order-by",
    "title": "Week 3",
    "section": "Order By",
    "text": "Order By\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation in the table, obtain the list of all students in alphabetic order of departments and within each department, in decreasing order of total credits.\n\nSELECT name, dept_name, tot_cred\nFROM student\nORDER BY dept_name ASC, tot_cred DESC;\n\n\n\n\n\nname\ndept_name\ntot_cred\n\n\n\n\nTanaka\nBiology\n120\n\n\nZhang\nComp. Sci.\n102\n\n\nBrown\nComp. Sci.\n58\n\n\nWilliams\nComp. Sci.\n54\n\n\nShankar\nComp. Sci.\n32\n\n\nBourikas\nElec. Eng.\n98\n\n\nAoi\nElec. Eng.\n60\n\n\nChavez\nFinance\n110\n\n\nBrandt\nHistory\n80\n\n\nSanchez\nMusic\n38\n\n\nPeltier\nPhysics\n56\n\n\nLevy\nPhysics\n46\n\n\nSnow\nPhysics\n0\n\n\n\n\n\n\nThe list is first sorted in alphabetic order of dept name.\nWithin each dept, it is sorted in decreasing order of total credits."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#in-operator",
    "href": "pages/DBMS/w3-revealjs.html#in-operator",
    "title": "Week 3",
    "section": "In Operator",
    "text": "In Operator\n\n\n\n\n\nID\ncourse_id\nsec_id\nsemester\nyear\n\n\n\n\n10101\nCS-101\n1\nFall\n2017\n\n\n10101\nCS-315\n1\nSpring\n2018\n\n\n10101\nCS-347\n1\nFall\n2017\n\n\n12121\nFIN-201\n1\nSpring\n2018\n\n\n15151\nMU-199\n1\nSpring\n2018\n\n\n22222\nPHY-101\n1\nFall\n2017\n\n\n32343\nHIS-351\n1\nSpring\n2018\n\n\n45565\nCS-101\n1\nSpring\n2018\n\n\n45565\nCS-319\n1\nSpring\n2018\n\n\n76766\nBIO-101\n1\nSummer\n2017\n\n\n76766\nBIO-301\n1\nSummer\n2018\n\n\n83821\nCS-190\n1\nSpring\n2017\n\n\n83821\nCS-190\n2\nSpring\n2017\n\n\n83821\nCS-319\n2\nSpring\n2018\n\n\n98345\nEE-181\n1\nSpring\n2017\n\n\n\n\n\n\nFrom the teaches relation, find the IDs of all courses taught in the Fall or Spring of 2018.\n\nSELECT course_id\nFROM teaches\nWHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319\n\n\nCS-319\n\n\n\n\n\n\nNote: We can use distinct to remove duplicates.\n\n    SELECT DISTINCT course_id\n    FROM teaches\n    WHERE semester IN ('Fall', 'Spring') AND year = 2018;\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-315\n\n\nFIN-201\n\n\nMU-199\n\n\nHIS-351\n\n\nCS-101\n\n\nCS-319"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#set-operations-2-intersect",
    "href": "pages/DBMS/w3-revealjs.html#set-operations-2-intersect",
    "title": "Week 3",
    "section": "Set Operations (2): intersect",
    "text": "Set Operations (2): intersect\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the names of all instructors who taught in either the Computer Science department or the Finance department and whose salary is &lt; 80000.\n\n    SELECT name\n    FROM instructor\n    WHERE dept_name IN ('Comp. Sci.', 'Finance')\n    INTERSECT\n    SELECT name\n    FROM instructor\n    WHERE salary &lt; 80000;\n\n\n\n\n\nname\n\n\n\n\nKatz\n\n\nSrinivasan\n\n\n\n\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance') AND salary &lt; 80000;\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nKatz"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#set-operations-3-except",
    "href": "pages/DBMS/w3-revealjs.html#set-operations-3-except",
    "title": "Week 3",
    "section": "Set Operations (3): except",
    "text": "Set Operations (3): except\n\nFrom the instructor relation, find the names of all instructors who taught in the Computer Science department or the Finance department and whose salary is either &gt;= 90000 or &lt;= 70000.\n\n    SELECT name\n    FROM instructor\n    WHERE dept_name IN ('Comp. Sci.', 'Finance')\n    EXCEPT\n    SELECT name\n    FROM instructor\n    WHERE salary &lt; 90000 AND salary &gt; 70000;\n\n\n\n\n\nname\n\n\n\n\nBrandt\n\n\nSrinivasan\n\n\nWu\n\n\n\n\n\nSELECT name\nFROM instructor\nWHERE dept_name IN ('Comp. Sci.', 'Finance') AND (salary &gt;= 90000 OR salary &lt;= 70000);\n\n\n\n\n\nname\n\n\n\n\nSrinivasan\n\n\nWu\n\n\nBrandt"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#aggregate-functions-avg",
    "href": "pages/DBMS/w3-revealjs.html#aggregate-functions-avg",
    "title": "Week 3",
    "section": "Aggregate functions: avg",
    "text": "Aggregate functions: avg\n\n\n\n\n\nbuilding\nroom_number\ncapacity\n\n\n\n\nPackard\n101\n500\n\n\nPainter\n514\n10\n\n\nTaylor\n3128\n70\n\n\nWatson\n100\n30\n\n\nWatson\n120\n50\n\n\n\n\n\n\nFrom the classroom relation, find the names and the average capacity of each building whose average capacity is greater than 25.\n\n    SELECT building, AVG(capacity)\n    FROM classroom\n    GROUP BY building\n    HAVING AVG(capacity) &gt; 25;\n\n\n\n\n\nbuilding\nAVG(capacity)\n\n\n\n\nPackard\n500.0\n\n\nTaylor\n70.0\n\n\nWatson\n40.0"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#aggregate-functions-2-min",
    "href": "pages/DBMS/w3-revealjs.html#aggregate-functions-2-min",
    "title": "Week 3",
    "section": "Aggregate functions (2): min",
    "text": "Aggregate functions (2): min\n\n\n\n\n\nID\nname\ndept_name\nsalary\n\n\n\n\n10101\nSrinivasan\nComp. Sci.\n65000\n\n\n12121\nWu\nFinance\n90000\n\n\n15151\nMozart\nMusic\n40000\n\n\n22222\nEinstein\nPhysics\n95000\n\n\n32343\nEl Said\nHistory\n60000\n\n\n33456\nGold\nPhysics\n87000\n\n\n45565\nKatz\nComp. Sci.\n75000\n\n\n58583\nCalifieri\nHistory\n62000\n\n\n76543\nSingh\nFinance\n80000\n\n\n76766\nCrick\nBiology\n72000\n\n\n83821\nBrandt\nComp. Sci.\n92000\n\n\n98345\nKim\nElec. Eng.\n80000\n\n\n\n\n\n\nFrom the instructor relation, find the least salary drawn by any instructor among all the instructors.\n\nSELECT MIN(salary) AS least_salary\nFROM instructor;\n\n\n\n\n\nleast_salary\n\n\n\n\n40000"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#aggregate-functions-3-max",
    "href": "pages/DBMS/w3-revealjs.html#aggregate-functions-3-max",
    "title": "Week 3",
    "section": "Aggregate functions (3): max",
    "text": "Aggregate functions (3): max\n\n\n\n\n\nID\nname\ndept_name\ntot_cred\n\n\n\n\n00128\nZhang\nComp. Sci.\n102\n\n\n12345\nShankar\nComp. Sci.\n32\n\n\n19991\nBrandt\nHistory\n80\n\n\n23121\nChavez\nFinance\n110\n\n\n44553\nPeltier\nPhysics\n56\n\n\n45678\nLevy\nPhysics\n46\n\n\n54321\nWilliams\nComp. Sci.\n54\n\n\n55739\nSanchez\nMusic\n38\n\n\n70557\nSnow\nPhysics\n0\n\n\n76543\nBrown\nComp. Sci.\n58\n\n\n76653\nAoi\nElec. Eng.\n60\n\n\n98765\nBourikas\nElec. Eng.\n98\n\n\n98988\nTanaka\nBiology\n120\n\n\n\n\n\n\nFrom the student relation, find the maximum credits obtained by any student among all the students.\n\nSELECT MAX(tot_cred) AS max_credits\nFROM student;\n\n\n\n\n\nmax_credits\n\n\n\n\n120"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#aggregate-functions-4-count",
    "href": "pages/DBMS/w3-revealjs.html#aggregate-functions-4-count",
    "title": "Week 3",
    "section": "Aggregate functions (4): count",
    "text": "Aggregate functions (4): count\n\n\n\n\n\ncourse_id\nsec_id\nsemester\nyear\nbuilding\nroom_number\ntime_slot_id\n\n\n\n\nBIO-101\n1\nSummer\n2017\nPainter\n514\nB\n\n\nBIO-301\n1\nSummer\n2018\nPainter\n514\nA\n\n\nCS-101\n1\nFall\n2017\nPackard\n101\nH\n\n\nCS-101\n1\nSpring\n2018\nPackard\n101\nF\n\n\nCS-190\n1\nSpring\n2017\nTaylor\n3128\nE\n\n\nCS-190\n2\nSpring\n2017\nTaylor\n3128\nA\n\n\nCS-315\n1\nSpring\n2018\nWatson\n120\nD\n\n\nCS-319\n1\nSpring\n2018\nWatson\n100\nB\n\n\nCS-319\n2\nSpring\n2018\nTaylor\n3128\nC\n\n\nCS-347\n1\nFall\n2017\nTaylor\n3128\nA\n\n\nEE-181\n1\nSpring\n2017\nTaylor\n3128\nC\n\n\nFIN-201\n1\nSpring\n2018\nPackard\n101\nB\n\n\nHIS-351\n1\nSpring\n2018\nPainter\n514\nC\n\n\nMU-199\n1\nSpring\n2018\nPackard\n101\nD\n\n\nPHY-101\n1\nFall\n2017\nWatson\n100\nA\n\n\n\n\n\n\nFrom the section relation, find the number of courses run in each building.\n\nSELECT building, COUNT(course_id) AS course_count\nFROM section\nGROUP BY building;\n\n\n\n\n\nbuilding\ncourse_count\n\n\n\n\nPackard\n4\n\n\nPainter\n3\n\n\nTaylor\n5\n\n\nWatson\n3"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#aggregate-functions-5-sum",
    "href": "pages/DBMS/w3-revealjs.html#aggregate-functions-5-sum",
    "title": "Week 3",
    "section": "Aggregate functions (5): sum",
    "text": "Aggregate functions (5): sum\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-101\nIntro. to Biology\nBiology\n4\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nBIO-399\nComputational Biology\nBiology\n3\n\n\nCS-101\nIntro. to Computer Science\nComp. Sci.\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\nCS-319\nImage Processing\nComp. Sci.\n3\n\n\nCS-347\nDatabase System Concepts\nComp. Sci.\n3\n\n\nEE-181\nIntro. to Digital Systems\nElec. Eng.\n3\n\n\nFIN-201\nInvestment Banking\nFinance\n3\n\n\nHIS-351\nWorld History\nHistory\n3\n\n\nMU-199\nMusic Video Production\nMusic\n3\n\n\nPHY-101\nPhysical Principles\nPhysics\n4\n\n\n\n\n\n\nFrom the course relation, find the total credits offered by each department.\n\nSELECT dept_name, SUM(credits) AS sum_credits\nFROM course\nGROUP BY dept_name;\n\n\n\n\n\ndept_name\nsum_credits\n\n\n\n\nBiology\n11\n\n\nComp. Sci.\n17\n\n\nElec. Eng.\n3\n\n\nFinance\n3\n\n\nHistory\n3\n\n\nMusic\n3\n\n\nPhysics\n4"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#nested-subqueries",
    "href": "pages/DBMS/w3-revealjs.html#nested-subqueries",
    "title": "Week 3",
    "section": "Nested Subqueries",
    "text": "Nested Subqueries\n\nSQL provides a mechanism for nesting of subqueries\nA subquery is a select-from-where expression that is nested within another query\nThe nesting can be done in the following SQL query \\[ \\text{select } A_1, A_2, ..., A_n \\] \\[ \\text{from } r_1, r_2, ..., r_m \\] \\[ \\text{where } P \\] as follows:\n\n\\(A_i\\) can be a subquery that generates a single value\n\\(r_i\\) can be replaced by any valid subquery\n\\(P\\) can be replaced with an expressionm of the form:\n\\(B \\text{ &lt;operation&gt;}\\) (subquery)\nwhere \\(B\\) is an attribute and \\(\\text{&lt;operation&gt;}\\) to be defined later."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#subqueries-in-the-where-clause",
    "href": "pages/DBMS/w3-revealjs.html#subqueries-in-the-where-clause",
    "title": "Week 3",
    "section": "Subqueries in the Where Clause",
    "text": "Subqueries in the Where Clause\n\nTypical use of subqueries is to perform tests:\n\nFor set membership\nFor set comparisons\nFor set cardinality"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#set-membership",
    "href": "pages/DBMS/w3-revealjs.html#set-membership",
    "title": "Week 3",
    "section": "Set Membership",
    "text": "Set Membership\n\nFind courses offered in Fall 2009 and in Spring 2010 (intersect example)\n\n    select distinct course_id\n    from section\n    where semester = 'Fall' and year = 2017 and\n    course_id in (select course_id\n                from section\n                where semester = 'Spring' and year = 2018);\n\n\n\n\n\ncourse_id\n\n\n\n\nCS-347\n\n\nPHY-101"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#set-membership-2",
    "href": "pages/DBMS/w3-revealjs.html#set-membership-2",
    "title": "Week 3",
    "section": "Set Membership (2)",
    "text": "Set Membership (2)\n\nFind the total number of (distinct) students who have taken course sections taught by instructor with ID ‘10101’\n\nselect count(distinct ID)\nfrom takes\nwhere (course_id, sec_id, semester, year) in\n    (select course_id, sec_id, semester, year\n    from teaches\n    where teaches.ID = '10101');\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\ncount(distinct ID)\n\n\n\n\n6"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#set-comparison---some-clause",
    "href": "pages/DBMS/w3-revealjs.html#set-comparison---some-clause",
    "title": "Week 3",
    "section": "Set Comparison - “some” Clause",
    "text": "Set Comparison - “some” Clause\n\nFind the names of instructors with salary greater than that of some (at least one) instructor in the Biology department\n\n    select distinct T.name\n    from instructor T, instructor S\n    where T.salary &gt; S.salary and S.dept_name = 'Biology';\n\nSame query using some clause\n\n    select name\n    from instructor\n    where salary &gt; some (select salary\n                        from instructor\n                        where dept_name = 'Biology');"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#definition-of-some-clause",
    "href": "pages/DBMS/w3-revealjs.html#definition-of-some-clause",
    "title": "Week 3",
    "section": "Definition of “some” Clause",
    "text": "Definition of “some” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) some \\(r \\Leftrightarrow \\exists t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nsome represents existential quantification\n\n(5 &lt; some {0, 5, 6}) = True\n(5 &lt; some {0, 5}) = False\n(5 = some {0, 5}) = True\n(5 \\(\\neq\\) some {0, 5}) = False\n(= some) \\(\\equiv\\) in\nHowever, (\\(\\neq\\) some) \\(\\equiv\\) not in"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#set-comparison---all-clause",
    "href": "pages/DBMS/w3-revealjs.html#set-comparison---all-clause",
    "title": "Week 3",
    "section": "Set Comparison - “all” Clause",
    "text": "Set Comparison - “all” Clause\n\nFind the names of all instructors with salary greater than that of all instructors in the Biology department\n\nselect name\nfrom instructor\nwhere salary &gt; all (select salary\n                    from instructor\n                    where dept_name = 'Biology');"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#definition-of-all-clause",
    "href": "pages/DBMS/w3-revealjs.html#definition-of-all-clause",
    "title": "Week 3",
    "section": "Definition of “all” Clause",
    "text": "Definition of “all” Clause\n\nF \\(\\text{&lt;comp&gt;}\\) all \\(r \\Leftrightarrow \\forall t \\in r\\) such that (F \\(\\text{&lt;comp&gt;}\\) t) where \\(\\text{&lt;comp&gt;}\\) can be: \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\), \\(=\\), \\(\\neq\\)\nall represents universal quantification\n\n(5 &lt; all {0, 5, 6}) = False\n(5 &lt; all {6, 10}) = True\n(5 = all {0, 5}) = False\n(5 \\(\\neq\\) all {4, 6}) = True\n(\\(\\neq\\) all) \\(\\equiv\\) not in\nHowever, (\\(=\\) all) !\\(\\equiv\\) in"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#test-for-empty-relations-exists",
    "href": "pages/DBMS/w3-revealjs.html#test-for-empty-relations-exists",
    "title": "Week 3",
    "section": "Test for Empty Relations: “exists”",
    "text": "Test for Empty Relations: “exists”\n\nThe exists constucrt returns the value true if the argument subquery is non-empty\n\nexists $r r $\nnot exists $r r = $"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#use-of-exists-clause",
    "href": "pages/DBMS/w3-revealjs.html#use-of-exists-clause",
    "title": "Week 3",
    "section": "Use of “exists” clause",
    "text": "Use of “exists” clause\n\nYet another way of specifying the query “Find all courses taught in both the Fall 2009 semester and in the Spring 2010 semester”\n\nselect course_id\nfrom section as S\nwhere semester = 'Fall' and year = 2009 and\nexists (select *\n        from section as T\n        where semester = 'Spring' and year = 2010 and\n        S.course_id = T.course_id);\n\nCorrelation name - variable S in the outer query\nCorrelated subquery - subquery that references the correlation name (the inner query)"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#use-of-not-exists-clause",
    "href": "pages/DBMS/w3-revealjs.html#use-of-not-exists-clause",
    "title": "Week 3",
    "section": "Use of “not exists” clause",
    "text": "Use of “not exists” clause\n\nFind all students who have taken all courses offered in the Biology department.\n\nselect distinct S.ID, S.name\nfrom student as S\nwhere not exists ((select course_id\n                    from course\n                    where dept_name = 'Biology')\n                    except\n                    (select T.course_id\n                    from takes as T\n                    where S.ID = T.ID));\n\nFirst nested query lists all courses offered in Biology\nSecond nested query lists all courses a particular student took\nNote: \\(X-Y = \\emptyset \\Leftrightarrow X \\subseteq Y\\)\nNote: Cannot write this query using \\(=\\) all and its variants"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#test-for-absence-of-duplicate-tuples-unique",
    "href": "pages/DBMS/w3-revealjs.html#test-for-absence-of-duplicate-tuples-unique",
    "title": "Week 3",
    "section": "Test for Absence of Duplicate Tuples: “unique”",
    "text": "Test for Absence of Duplicate Tuples: “unique”\n\nThe unique construct tests whether a subquery has any duplicate tuples in its result\nThe unique construct evaluates to true if the subquery result has no duplicate tuples\nFind all courses that were offered at most once in 2009\n\nselect T.course_id\nfrom course as T\nwhere unique (select R.course_id\n              from section as R\n              where R.course_id = T.course_id\n              and R.year = 2009);"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#subqueries-in-the-from-clause",
    "href": "pages/DBMS/w3-revealjs.html#subqueries-in-the-from-clause",
    "title": "Week 3",
    "section": "Subqueries in the From Clause",
    "text": "Subqueries in the From Clause\n\nSQL allows a subquery expression to be used in the from clause\nFind the average instructors’ salaries of those departments where the average salary is greater than $42,000\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary) as avg_salary\n      from instructor\n      group by dept_name)\nwhere avg_salary &gt; 42000;\n\nNote that we do not need to use the having clause\nAnother way to write the same query is:\n\nselect dept_name, avg_salary\nfrom (select dept_name, avg(salary)\n      from instructor\n      group by dept_name) as dept_avg (dept_name, avg_salary)\nwhere avg_salary &gt; 42000;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#with-clause",
    "href": "pages/DBMS/w3-revealjs.html#with-clause",
    "title": "Week 3",
    "section": "With Clause",
    "text": "With Clause\n\nThe with clause provides a way of defining a temporary relation whose definition is available only to the query in which the with clause occurs\nFind all departments with the maximum budget\n\nwith max_budget(value) as\n    (select max(budget)\n    from department)\nselect department.dept_name\nfrom department, max_budget\nwhere department.budget = max_budget.value;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#complex-queries-using-with-clause",
    "href": "pages/DBMS/w3-revealjs.html#complex-queries-using-with-clause",
    "title": "Week 3",
    "section": "Complex Queries using With Clause",
    "text": "Complex Queries using With Clause\n\nFind all departments where the total salary is greater than the average of the total salary at all departments\n\nwith dept_total(dept_name, value) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name,\ndept_total_avg(value) as\n    (select avg(value)\n    from dept_total)\nselect dept_name\nfrom dept_total, dept_total_avg\nwhere dept_total.value &gt; dept_total_avg.value;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#scalar-subquery",
    "href": "pages/DBMS/w3-revealjs.html#scalar-subquery",
    "title": "Week 3",
    "section": "Scalar Subquery",
    "text": "Scalar Subquery\n\nA scalar subquery is a subquery that returns a single value\nList all departments along with the number of instructors in each department\n\nselect dept_name,\n    (select count(*)\n    from instructor\n    where instructor.dept_name = department.dept_name)\n    as num_instructors\n    from department;\n\nRuntime error if the subquery returns more than one result tuple"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#modification-of-the-database",
    "href": "pages/DBMS/w3-revealjs.html#modification-of-the-database",
    "title": "Week 3",
    "section": "Modification of the Database",
    "text": "Modification of the Database\n\nDeletion of tuples from a given relation\nInsertion of new tuples into a given relation\nUpdating of values in some tuples in a given relation"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#deletion",
    "href": "pages/DBMS/w3-revealjs.html#deletion",
    "title": "Week 3",
    "section": "Deletion",
    "text": "Deletion\n\nDelete all instructors\ndelete from instructor;\nDelete all instructors from the Finance department\ndelete from instructor\nwhere dept_name = 'Finance';\nDelete all tuples in the instructor relation for those instructors associated with a department located in the Watson building\ndelete from instructor\nwhere dept_name in (select dept_name\n                    from department\n                    where building = 'Watson');\nDelete all instructors whose salary is less than the average of all instructors’ salaries\ndelete from instructor\nwhere salary &lt; (select avg(salary)\n                from instructor);\nProblem: as we delete tuples, the average salary changes\nSolution used in SQL:\n\nFirst compute avg(salary) and find all tuples to be deleted\nNext, delete all tuples found above (without recomputing avg or retesting the tuples)"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#insertion",
    "href": "pages/DBMS/w3-revealjs.html#insertion",
    "title": "Week 3",
    "section": "Insertion",
    "text": "Insertion\n\nAdd a new typle to course\ninsert into course\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nor equivalently\ninsert into course (course_id, title, dept_name, credits)\nvalues ('CS-437', 'Database Systems', 'Comp. Sci.', 4);\nAdd a new tuple to student with tot_creds set to null\ninsert into student\nvalues ('3003', 'Green', 'Finance', null);\nAdd all instructors to the student relation with tot_creds set to 0\ninsert into student\nselect ID, name, dept_name, 0\nfrom instructor;\nThe select-from-where statement is evaluated fully before any of its results are inserted into the relation\nOtherwise queries like\ninsert into table1 select * from table1;\nwould result in an infinite loop"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#updates",
    "href": "pages/DBMS/w3-revealjs.html#updates",
    "title": "Week 3",
    "section": "Updates",
    "text": "Updates\n\nIncrease the salary of all instructors whose salary is over $100,00 by 3% and all others by 5%\n\nWith two update statements\nupdate instructor\n    set salary = salary * 1.03\n    where salary &gt; 100000;\nupdate instructor\n    set salary = salary * 1.05\n    where salary &lt;= 100000;\n\nThe order is important\nCan be done better using the case statement"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#case-statement-for-conditional-updates",
    "href": "pages/DBMS/w3-revealjs.html#case-statement-for-conditional-updates",
    "title": "Week 3",
    "section": "Case Statement for Conditional Updates",
    "text": "Case Statement for Conditional Updates\n\nSame query as above using the case statement\nupdate instructor\n    set salary = case\n                when salary &lt;= 100000\n                then salary * 1.05\n                else salary * 1.03\n                end;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#updates-with-scalar-subqueries",
    "href": "pages/DBMS/w3-revealjs.html#updates-with-scalar-subqueries",
    "title": "Week 3",
    "section": "Updates with Scalar Subqueries",
    "text": "Updates with Scalar Subqueries\n\nRecompute and update tot_creds value for all students\nupdate student\nset tot_creds = (select sum(credits)\n                from takes, course\n                where takes.course_id = course.course_id and\n                S.ID = takes.ID and\n                takes.grade &lt;&gt; 'F' and\n                takes.grade is not null);\nSet tot_creds to null for all students who have not taken any courses\nInstead of sum(credits), use:\n    case\n    when sum(credits) is not null then sum(credits)\n    else 0\nend;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#join-relations",
    "href": "pages/DBMS/w3-revealjs.html#join-relations",
    "title": "Week 3",
    "section": "Join Relations",
    "text": "Join Relations\n\nJoin operations take two relations and return as result another relation\nA join operation is a Cartesian product which requires that tuples in the two relations match (under some condition)\nIt also specifies the attributes that are present in the result of the join\nThe join operations are typically used as subquery expressions in the from clause"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#types-of-joins-between-relations",
    "href": "pages/DBMS/w3-revealjs.html#types-of-joins-between-relations",
    "title": "Week 3",
    "section": "Types of Joins between Relations",
    "text": "Types of Joins between Relations\n\nCross join\nInner join\n\nEqui-join\n\nNatural join\n\n\nOuter join\n\nLeft outer join\nRight outer join\nFull outer join\n\nSelf-join"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#cross-join",
    "href": "pages/DBMS/w3-revealjs.html#cross-join",
    "title": "Week 3",
    "section": "Cross Join",
    "text": "Cross Join\n\nCROSS JOIN returns the Cartesian product of rows from tables in the join\n\nExplicit\nselect *\nfrom employee cross join department;\nImplicit\nselect *\nfrom employee, department;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#join-operations---example",
    "href": "pages/DBMS/w3-revealjs.html#join-operations---example",
    "title": "Week 3",
    "section": "Join Operations - Example",
    "text": "Join Operations - Example\n\nRelation course\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\n\n\nCS-190\nGame Design\nComp. Sci.\n4\n\n\nCS-315\nRobotics\nComp. Sci.\n3\n\n\n\n\n\n\nRelation prereq\n\n\n\n\n\n\ncourse_id\nprereq_id\n\n\n\n\nBIO-301\nBIO-101\n\n\nCS-190\nCS-101\n\n\nCS-347\nCS-101\n\n\n\n\n\n\nObserve that\n\nprereq information is missing for course CS-315, and\ncourse information is missing for CS-347"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#inner-join",
    "href": "pages/DBMS/w3-revealjs.html#inner-join",
    "title": "Week 3",
    "section": "Inner Join",
    "text": "Inner Join\n\ncourse inner join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nIf specified as natural, the join is on all attributes with the same name\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#outer-join",
    "href": "pages/DBMS/w3-revealjs.html#outer-join",
    "title": "Week 3",
    "section": "Outer Join",
    "text": "Outer Join\n\nAn extension of the join operation that avoids loss of information\nComputes the join and then adds tuples from one relation that does not match tuples in the other relation to the result of the join\nUses null values, which is None in Python"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#left-outer-join",
    "href": "pages/DBMS/w3-revealjs.html#left-outer-join",
    "title": "Week 3",
    "section": "Left Outer Join",
    "text": "Left Outer Join\n\ncourse left outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#right-outer-join",
    "href": "pages/DBMS/w3-revealjs.html#right-outer-join",
    "title": "Week 3",
    "section": "Right Outer Join",
    "text": "Right Outer Join\n\ncourse right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#joined-relations",
    "href": "pages/DBMS/w3-revealjs.html#joined-relations",
    "title": "Week 3",
    "section": "Joined Relations",
    "text": "Joined Relations\n\nJoin operations take two relations and return as a result another relation\nThese additional operations are typically used as subquery expressions in the from clause\nJoin condition – defines which tuples in the two relations match, and what attributes are present in the result of the join\n  natural\n  on &lt;predicate&gt;\n  using (attr1, attr2, ...)\nJoin type – defines how tuples in each relation that do not match any tuple in the other relation (based on the join condition) are treated\n  inner join\n  left outer join\n  right outer join\n  full outer join"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#full-outer-join",
    "href": "pages/DBMS/w3-revealjs.html#full-outer-join",
    "title": "Week 3",
    "section": "Full Outer Join",
    "text": "Full Outer Join\n\ncourse full outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\nNone\nNone\nNone\nNone\nCS-347\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#joining-relations---examples",
    "href": "pages/DBMS/w3-revealjs.html#joining-relations---examples",
    "title": "Week 3",
    "section": "Joining Relations - Examples",
    "text": "Joining Relations - Examples\n\ncourse inner join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\n\n\n\n\nWhat is the difference between the above (equi-join) and the natural join?\ncourse left outer join prereq on\ncourse.course_id = prereq.course_id\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\ncourse_id_1\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-301\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-190\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\nNone\n\n\n\n\n\n\ncourse natural right outer join prereq\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-347\nNone\nNone\nNone\nCS-101\n\n\n\n\n\n\ncourse full outer join prereq using (course_id)\n\n\n\n\n\n\ncourse_id\ntitle\ndept_name\ncredits\nprereq_id\n\n\n\n\nBIO-301\nGenetics\nBiology\n4\nBIO-101\n\n\nCS-190\nGame Design\nComp. Sci.\n4\nCS-101\n\n\nCS-315\nRobotics\nComp. Sci.\n3\nNone\n\n\nCS-347\nNone\nNone\nNone\nCS-101"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#views",
    "href": "pages/DBMS/w3-revealjs.html#views",
    "title": "Week 3",
    "section": "Views",
    "text": "Views\n\nIn some cases, it is not desirable for all users to see the entire logical model (that is, all the actual relations stored in the database.)\nConsider a person who needs to know an instructors name and department, but not the salary. This person should see a relation described, in SQL, by:\nselect ID, name, dept_name\nfrom instructor;\nA view provides a mechanism to hide certain data from the view of certain users\nAny relation that is not of the conceptual model but is made visible to a user as a “virtual relation” is called a view."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#view-definition",
    "href": "pages/DBMS/w3-revealjs.html#view-definition",
    "title": "Week 3",
    "section": "View Definition",
    "text": "View Definition\n\nA view is defined using the create view statement which has the form\ncreate view v as &lt; query expression &gt;\nwhere &lt; query expression &gt; is any legal SQL expression\nThe view name is represented by v\nOnce a view is defined, the view name can be used to refer to the virtual relation that the view generates\nView definition is not the same as creating a new relation by evaluating the query expression\n\nRather, a view definition causes the saving of an expression; the expression is substituted into queries using the view"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#example-views",
    "href": "pages/DBMS/w3-revealjs.html#example-views",
    "title": "Week 3",
    "section": "Example Views",
    "text": "Example Views\n\nA view of instructors without their salary\ncreate view faculty as\nselect ID, name, dept_name\nfrom instructor;\nA view of all instructors in the Biology department\nselect name\n    from faculty\n    where dept_name = 'Biology';\nCreate a view of department salary totals\ncreate view departments_total_salary(dept_name, total_salary) as\n    select dept_name, sum(salary)\n    from instructor\n    group by dept_name;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#views-defined-using-other-views",
    "href": "pages/DBMS/w3-revealjs.html#views-defined-using-other-views",
    "title": "Week 3",
    "section": "Views Defined Using Other Views",
    "text": "Views Defined Using Other Views\n    create view physics_fall_2009 as\n        select course.course_id, sec_id, building, room_number\n        from course, section\n        where course.course_id = section.course_id\n            and course.dept_name = 'Physics'\n            and section.semester = 'Fall'\n            and section.year = 2009;\n    create view physics_fall_2009_watson as\n        select course_id, room_number\n        from physics_fall_2009\n        where building = 'Watson';"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#view-expansion",
    "href": "pages/DBMS/w3-revealjs.html#view-expansion",
    "title": "Week 3",
    "section": "View Expansion",
    "text": "View Expansion\n\nExpand use of a view in a query/another view\n\n    create view physics_fall_2009_watson as\n        (select course_id, room_number\n        from (select course.course_id, building, room_number\n            from course, section\n            where course.course_id = section.course_id\n                and course.dept_name = 'Physics'\n                and section.semester = 'Fall'\n                and section.year = 2009)\n        where building = 'Watson');\n\nOne view may be used in the expression defining another view\nA view relation \\(v_1\\) is said to depend directly on a view relation \\(v_2\\) if \\(v_2\\) is used in the expression defining \\(v_1\\)\nA view relation \\(v_1\\) is said to depend on view relation \\(v_2\\) if either \\(v_1\\) depends directly on \\(v_2\\) or there is a path of dependencies from \\(v_1\\) to \\(v_2\\)\nA view relation v is said to be recursive if it depends on itself\nA way to define the meaning of views defined in terms of other views\nLet view \\(v_1\\) be defined by an expression \\(e_1\\) that may itself contain uses of view relations\nView expansion of an expression repeats the following replacement step:\nrepeat\n\nFind any view relation \\(v_i\\) in \\(e_1\\)\nReplace the view relation \\(v_i\\) by the expression defining \\(v_i\\)\n\nuntil no more view relations are present in \\(e_1\\)\nAs long as the view definitions are not recursive, this loop will terminate"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#update-of-a-view",
    "href": "pages/DBMS/w3-revealjs.html#update-of-a-view",
    "title": "Week 3",
    "section": "Update of a View",
    "text": "Update of a View\n\nAdd a new tuple to faculty view which we defined earlier\n    insert into faculty values (’30765’, ’Green’, ’Music’);\nThis insertion must be represented by the insertion of the tuple\n  (’30765’, ’Green’, ’Music’, null)\ninto the instructor relation"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#some-updates-cannot-be-translated-uniquely",
    "href": "pages/DBMS/w3-revealjs.html#some-updates-cannot-be-translated-uniquely",
    "title": "Week 3",
    "section": "Some Updates cannot be Translated Uniquely",
    "text": "Some Updates cannot be Translated Uniquely\n\n    create view instructor_info as\n        select ID, name, building\n        from instructor, department\n        where instructor.dept_name = department.dept_name;\n    insert into instructor info values ('69987', 'White', 'Taylor');\n\nwhich department, if multiple departments in Taylor?\nwhat if no department is in Taylor?\n\nMost SQL implementations allow updates only on simple views\n\nThe from clause has only one database relation\nThe select clause contains only attribute names of the relation, and does not have any expressions aggregates, or distinct specification\nAny attribute not listed in the select clause can be set to null\nThe query does not have a group by or having clause"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#and-some-not-at-all",
    "href": "pages/DBMS/w3-revealjs.html#and-some-not-at-all",
    "title": "Week 3",
    "section": "And Some Not at All",
    "text": "And Some Not at All\n\n    create view history_instructors as\n        select *\n        from instructor\n        where dept_name = 'History';\nWhat happens if we insert (’25566’, ’Brown’, ’Biology’, 100000) into history_instructors?"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#materialized-views",
    "href": "pages/DBMS/w3-revealjs.html#materialized-views",
    "title": "Week 3",
    "section": "Materialized Views",
    "text": "Materialized Views\n\nMaterializing a view: create a physical table containing all the tuples in the result of the query defining the view\nIf relations used in the query are updated, the materialized view result becomes out of date\n\nNeed to maintain the view, by updating the view whenever the underlying relations are updated"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#transactions",
    "href": "pages/DBMS/w3-revealjs.html#transactions",
    "title": "Week 3",
    "section": "Transactions",
    "text": "Transactions\n\nUnit of work\nAtomic transaction\n\neither fully executed or rolled back as if it never happened\n\nIsolation from concurrent transactions\nTransactions begin implicitly\n\nEnd by commit work or rollback work\n\nBut default on most databases: each SQL statement commits automatically\n\nCan turn off auto-commit for a session (for example, using API)\nIn SQL:1999, can use: begin atomic … end\n\nNot supported on most databases"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#integrity-constraints",
    "href": "pages/DBMS/w3-revealjs.html#integrity-constraints",
    "title": "Week 3",
    "section": "Integrity Constraints",
    "text": "Integrity Constraints\n\nIntegrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency\n\nA checking account must have a balance greater than Rs. 10,000.00\nA salary of a bank employee must be at least Rs. 250.00 an hour\nA customer must have a (non-null) phone number"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#integrity-constraints-on-a-single-relation",
    "href": "pages/DBMS/w3-revealjs.html#integrity-constraints-on-a-single-relation",
    "title": "Week 3",
    "section": "Integrity Constraints on a Single Relation",
    "text": "Integrity Constraints on a Single Relation\n\nnot null\nprimary key\nunique\ncheck(P), where P is a predicate"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#not-null-and-unique-constraints",
    "href": "pages/DBMS/w3-revealjs.html#not-null-and-unique-constraints",
    "title": "Week 3",
    "section": "Not Null and Unique Constraints",
    "text": "Not Null and Unique Constraints\n\nnot null\n\nDeclare name and budget to be not null\nname varchar(20) not null,\nbudget numeric(12, 2) not null\n\nunique \\((A_1, A_2, ..., A_m)\\)\n\nThe unique specification states that the attributes \\(A_1, A_2, ..., A_m\\) form a candidate key\nCandidate keys are permeitted to be null (unlike primary keys)"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#the-check-clause",
    "href": "pages/DBMS/w3-revealjs.html#the-check-clause",
    "title": "Week 3",
    "section": "The check clause",
    "text": "The check clause\n\ncheck(P), where P is a predicate\nEnsure that semester is one of fall, winter, spring, or summer:\ncreate table section (\n  course_id varchar(8),\n  sec_id varchar(8),\n  semester varchar(6),\n  year numeric(4, 0),\n  building varchar(15),\n  room_number varchar(7),\n  time_slot_id varchar(4),\n  primary key (course_id, sec_id, semester, year),\n  check (semester in ('fall', 'winter', 'spring', 'summer'))\n);"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#referential-integrity",
    "href": "pages/DBMS/w3-revealjs.html#referential-integrity",
    "title": "Week 3",
    "section": "Referential Integrity",
    "text": "Referential Integrity\n\nEnsures that a value that appears in one relation for a given set of attributes also appears for a certain set of attributes in another relation\nExample: If “Biology” is a department name appearing in one of the tuples in the instructor relation, then there exists a tuple in the department relation for “Biology”\nLet A be a set of attributes. Let R and S be two relations that contain attributes A and where A is the primary key of S. A is said to be a foreign key of R if for any values of A appearing in R these values also appear in S"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#cascading-actions-in-referential-integrity",
    "href": "pages/DBMS/w3-revealjs.html#cascading-actions-in-referential-integrity",
    "title": "Week 3",
    "section": "Cascading Actions in Referential Integrity",
    "text": "Cascading Actions in Referential Integrity\n\nWith cascading, you can define the actions that the Database Engine takes when a user tries to delete or update a key to which existing foreign keys point\n    create table course (\n        course_id char(5) primary key,\n        title varchar(20),\n        dept_name varchar(20) references department\n    );\n    create table course (\n        ...\n        dept_name varchar(20),\n        foreign key (dept_name) references department\n            on delete cascade\n            on update cascade,\n        ...\n    );\nAlternative actions to cascade: no action, set null, set default"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#integrity-constraint-violation-during-transactions",
    "href": "pages/DBMS/w3-revealjs.html#integrity-constraint-violation-during-transactions",
    "title": "Week 3",
    "section": "Integrity Constraint Violation During Transactions",
    "text": "Integrity Constraint Violation During Transactions\n\n    create table person (\n        ID char(10),\n        name char(40),\n        mother char(10),\n        father char(10),\n        primary key ID,\n        foreign key father references person,\n        foreign key mother references person)\nHow to insert a tuple without causing constraint violation?\n\nInsert father and mother of a person before inserting person\nOR, Set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be not null)\nOR Defer constraint checking (will discuss later)"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#built-in-data-types-in-sql",
    "href": "pages/DBMS/w3-revealjs.html#built-in-data-types-in-sql",
    "title": "Week 3",
    "section": "Built-in Data Types in SQL",
    "text": "Built-in Data Types in SQL\n\ndate: Dates, containing a (4 digit) year, month and date\n\nExample: date ‘2005-7-27’\n\ntime: Time of day, in hours, minutes and seconds.\n\nExample: time ‘09:00:30’ time ‘09:00:30.75’\n\ntimestamp: date plus time of day\n\nExample: timestamp ‘2005-7-27 09:00:30.75’\n\ninterval: period of time\n\nExample: interval ‘1’ day\nSubtracting a date/time/timestamp value from another gives an interval value\nInterval values can be added to date/time/timestamp values"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#index-creation",
    "href": "pages/DBMS/w3-revealjs.html#index-creation",
    "title": "Week 3",
    "section": "Index Creation",
    "text": "Index Creation\n\n    create table student(ID varchar(5),\n    name varchar(20) not null,\n    dept_name varchar(20),\n    tot cred numeric (3,0) default 0,\n    primary key (ID))\ncreate index studentID index on student(ID)\nIndices are data structures used to speed up access to records with specified values for index attributes\n  select *\n  from student\n  where ID = '12345'\n\nCan be executed by using the index to find the required record, without looking at all records of student"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#user-defined-types",
    "href": "pages/DBMS/w3-revealjs.html#user-defined-types",
    "title": "Week 3",
    "section": "User Defined Types",
    "text": "User Defined Types\n\ncreate type construct in SQL creates user-defined type (alias, like typedef in C)\n  create type Dollars as numeric (12,2) final\n    create table department (\n        dept_name varchar (20),\n        building varchar (15),\n        budget Dollars\n    );"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#domains",
    "href": "pages/DBMS/w3-revealjs.html#domains",
    "title": "Week 3",
    "section": "Domains",
    "text": "Domains\n\ncreate domain construct in SQL-92 creates user-defined domain types\n  create domain person_name char(20) not null\nTypes and domains are similar\nDomains can have constraints, such as not null specified on them\n  create domain degree_level varchar(10)\n  constraint degree_level_test\n  check (value in ('Bachelors', 'Masters', 'Doctorate'));"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#large-object-types",
    "href": "pages/DBMS/w3-revealjs.html#large-object-types",
    "title": "Week 3",
    "section": "Large-Object Types",
    "text": "Large-Object Types\n\nLarge objects (photos, videos, CAD files, etc.) are stored as a large object:\n\nblob: binary large object – object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system)\nclob: character large object – object is a large collection of character data\nWhen a query returns a large object, a pointer is returned rather than the large object itself"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#authorization",
    "href": "pages/DBMS/w3-revealjs.html#authorization",
    "title": "Week 3",
    "section": "Authorization",
    "text": "Authorization\n\nForms of authorization on parts of the database:\n\nRead - allows reading, but not modification of data\nInsert - allows insertion of new data, but not modification of existing data\nUpdate - allows modification, but not deletion of data\nDelete - allows deletion of data\n\nForms of authorization to modify the database schema\n\nIndex - allows creation and deletion of indices\nResources - allows creation of new relations\nAlteration - allows addition or deletion of attributes in a relation\nDrop - allows deletion of relations"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#authorization-specification-in-sql",
    "href": "pages/DBMS/w3-revealjs.html#authorization-specification-in-sql",
    "title": "Week 3",
    "section": "Authorization Specification in SQL",
    "text": "Authorization Specification in SQL\n\nThe grant statement is used to confer authorization\n  grant &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; to &lt;user list&gt;\n\\(\\text{&lt;user list&gt;}\\) is:\n\na user-id\npublic, which allows all valid users the privilege granted\nA role (more on this later)\n\nGranting a privilege on a view does not imply granting any privileges on the underlying relations\nThe grantor of the privilege must already hold the privilege on the specified item (or be the database administrator)"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#privileges-in-sql",
    "href": "pages/DBMS/w3-revealjs.html#privileges-in-sql",
    "title": "Week 3",
    "section": "Privileges in SQL",
    "text": "Privileges in SQL\n\nselect: allows read access to relation, or the ability to query using the view\n\nExample: grant users \\(U_1\\), \\(U_2\\), and \\(U_3\\) select authorization on the instructor relation:\n  grant select on instructor to U1, U2, U3\n\ninsert: the ability to insert tuples\nupdate: the ability to update tuples\ndelete: the ability to delete tuples\nall privileges: used as a short form for all the allowable privileges"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#revoking-authorization-in-sql",
    "href": "pages/DBMS/w3-revealjs.html#revoking-authorization-in-sql",
    "title": "Week 3",
    "section": "Revoking Authorization in SQL",
    "text": "Revoking Authorization in SQL\n\nThe revoke statement is used to revoke authorization\n  revoke &lt;privilege list&gt;\n  on &lt;relation name or view name&gt; from &lt;user list&gt;\nExample:\n  revoke select on branch from U1, U2, U3\n\\(\\text{&lt;privilege-list&gt;}\\) may be all to revoke all privileges the revokee may hold\nIf \\(\\text{&lt;revokee-list&gt;}\\) includes public, all users lose the privilege except those granted it explicitly\nIf the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation\nAll privileges that depend on the privilege being revoked are also revoked"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#roles",
    "href": "pages/DBMS/w3-revealjs.html#roles",
    "title": "Week 3",
    "section": "Roles",
    "text": "Roles\n\n    create role instructor;\n    grant instructor to Amit;\nPrivileges can be granted to roles:\n  grant select on takes to instructor;\nRoles can be granted to users, as well as to other roles\n  create role teaching_assistant;\n  grant teaching_assistant to instructor;\n\nInstructor inherits all privileges of teaching_assistant\n\nChain of roles\n\ncreate role dean;\ngrant instructor to dean;\ngrant dean to Satoshi;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#authorization-on-views",
    "href": "pages/DBMS/w3-revealjs.html#authorization-on-views",
    "title": "Week 3",
    "section": "Authorization on Views",
    "text": "Authorization on Views\n   create view geo_instructor as\n   (select *\n     from instructor\n     where dept_name = ’Geology’);\n     grant select on geo_instructor to geo_staff\n\nSuppose that a geo_staff member issues\n\n   select *\n   from geo_instructor;\n\nWhat if\n\ngeo_staff does not have permissions on instructor?\ncreator of view did not have some permissions on instructor?"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#other-authorization-features",
    "href": "pages/DBMS/w3-revealjs.html#other-authorization-features",
    "title": "Week 3",
    "section": "Other Authorization Features",
    "text": "Other Authorization Features\n\nreferences privilege to create foreign key\n  grant reference (dept_name) on department to Mariano;\n\nwhy is this required?\n\nTransfer of privileges\n\ngrant select on department to Amit with grant option;\nrevoke select on department from Amit, Satoshi cascade;\nrevoke select on department from Amit, Satoshi restrict;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#native-language-query-language",
    "href": "pages/DBMS/w3-revealjs.html#native-language-query-language",
    "title": "Week 3",
    "section": "Native Language ← → Query Language",
    "text": "Native Language ← → Query Language"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#functions-and-procedures",
    "href": "pages/DBMS/w3-revealjs.html#functions-and-procedures",
    "title": "Week 3",
    "section": "Functions and Procedures",
    "text": "Functions and Procedures\n\nFunctions / Procedures and Control Flow Statements were added in SQL:1999\n\nFunctions/Procedures can be written in SQL itself, or in an external programming language (like C, Java)\nFunctions written in an external languages are particularly useful with specialized data types such as images and geometric objects\n\nExample: Functions to check if polygons overlap, or to compare images for similarity\n\nSome database systems support table-valued functions, which can return a relation as a result\n\nSQL:1999 also supports a rich set of imperative constructs, including loops, if-then-else, and assignment\nMany databases have proprietary procedural extensions to SQL that differ from SQL:1999"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#sql-functions",
    "href": "pages/DBMS/w3-revealjs.html#sql-functions",
    "title": "Week 3",
    "section": "SQL Functions",
    "text": "SQL Functions\n\nDefine a function that, given the name of a department, returns the count of the number of instructors in that department:\n    create function dept_count (dept name varchar(20))\n        returns integer\n        begin\n        declare d_count integer;\n            select count (*) into d_count\n            from instructor\n            where instructor.dept_name = dept_name\n        return d_cont;\n        end\nThe function dept count can be used to find the department names and budget of all departments with more that 12 instructors:\n    select dept_name, budget\n    from department\n    where dept_count (dept_name ) &gt; 12"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#sql-functions-2",
    "href": "pages/DBMS/w3-revealjs.html#sql-functions-2",
    "title": "Week 3",
    "section": "SQL Functions (2)",
    "text": "SQL Functions (2)\n\nCompound statement: begin . . . end May contain multiple SQL statements between begin and end.\nreturns – indicates the variable-type that is returned (for example, integer)\nreturn – specifies the values that are to be returned as result of invoking the function\nSQL function are in fact parameterized views that generalize the regular notion of views by allowing parameters"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#table-functions",
    "href": "pages/DBMS/w3-revealjs.html#table-functions",
    "title": "Week 3",
    "section": "Table Functions",
    "text": "Table Functions\n\nFunctions that return a relation as a result added in SQL:2003\nReturn all instructors in a given department:\n  create function instructor_of (dept_name char(20))\n    returns table (\n      ID varchar(5),\n      name varchar(20),\n      dept_name varchar(20)\n      salary numeric(8, 2) )\n    returns table\n      (select ID, name, dept_name, salary\n      from instructor\n      where instructor.dept_name = instructor_of.dept_name)\nUsage\n  select *\n  from table (instructor_of (‘Music’))"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#sql-procedures",
    "href": "pages/DBMS/w3-revealjs.html#sql-procedures",
    "title": "Week 3",
    "section": "SQL Procedures",
    "text": "SQL Procedures\n\nThe dept count function could instead be written as procedure:\n      create procedure dept_count_proc (\n          in dept_name varchar (20), out d_count integer)\n          begin\n              select count(*) into d_count\n              from instructor\n              where instructor.dept_name = dept_count_proc.dept_name\n          end\nProcedures can be invoked either from an SQL procedure or from embedded SQL, using the call statement.\ndeclare d_count integer;\ncall dept_count_proc(‘Physics’, d_count);\nProcedures and functions can be invoked also from dynamic SQL\nSQL:1999 allows overloading - more than one function/procedure of the same name as long as the number of arguments and/or the types of the arguments differ"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#language-constructs-for-procedures-and-functions",
    "href": "pages/DBMS/w3-revealjs.html#language-constructs-for-procedures-and-functions",
    "title": "Week 3",
    "section": "Language Constructs for Procedures and Functions",
    "text": "Language Constructs for Procedures and Functions\n\nSQL supports constructs that gives it almost all the power of a general-purpose programming language.\n\nWarning: Most database systems implement their own variant of the standard syntax\n\nCompound statements: begin . . . end\n\nMay contain multiple SQL statements between begin and end\nLocal variables can be declared within a compound statement"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#language-constructs-2-while-and-repeat",
    "href": "pages/DBMS/w3-revealjs.html#language-constructs-2-while-and-repeat",
    "title": "Week 3",
    "section": "Language Constructs (2): while and repeat",
    "text": "Language Constructs (2): while and repeat\n\nwhile loop\n    while boolean_expression do\n        sequence_of_statements;\n    end while;\nrepeat loop\n    repeat\n        sequence_of_statements;\n    until boolean_expression;\n    end repeat;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#language-constructs-3-for",
    "href": "pages/DBMS/w3-revealjs.html#language-constructs-3-for",
    "title": "Week 3",
    "section": "Language Constructs (3): for",
    "text": "Language Constructs (3): for\n\nfor loop\n\nPermits iteration over all results of a query\n\nFind the budget if all departments:\n    declare n integer default 0;\n    for r as\n      select budget from department\n    do\n      set n = n + r.budget\n    end for;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#language-constructs-4-if-then-else",
    "href": "pages/DBMS/w3-revealjs.html#language-constructs-4-if-then-else",
    "title": "Week 3",
    "section": "Language Constructs (4): if-then-else",
    "text": "Language Constructs (4): if-then-else\n\nConditional statements\n\nif-then-else\ncase\n\nif-then-else statement\n    if boolean_expression then\n        sequence_of_statements;\n    elseif boolean_expression then\n        sequence_of_statements;\n    ...\n    else\n        sequence_of_statements;\n    end if;\nThe if statement supports the use of optional elseif clauses and a default else clause\nExample procedure: registers student after ensuring that classroom capacity is not exceeded\n\nReturns 0 on success and -1 if capacity is exceeded"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#language-constructs-5-simple-case",
    "href": "pages/DBMS/w3-revealjs.html#language-constructs-5-simple-case",
    "title": "Week 3",
    "section": "Language Constructs (5): Simple case",
    "text": "Language Constructs (5): Simple case\n\nSimple case statement\n    case variable\n        when value1 then\n            sequence_of_statements;\n        when value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nThe when clause of the case statement defines the value that when satisfied determines the flow of control"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#language-constructs-6-searched-case",
    "href": "pages/DBMS/w3-revealjs.html#language-constructs-6-searched-case",
    "title": "Week 3",
    "section": "Language Constructs (6): Searched case",
    "text": "Language Constructs (6): Searched case\n\nSearched case statements\n    case\n        when sql_expression = value1 then\n            sequence_of_statements;\n        when sql_expression = value2 then\n            sequence_of_statements;\n        ...\n        else\n            sequence_of_statements;\n    end case;\nAny supported SQL expression can be used here. These expressions can contain references to variables, parameters, special registers, and more."
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#language-constructs-7-exception",
    "href": "pages/DBMS/w3-revealjs.html#language-constructs-7-exception",
    "title": "Week 3",
    "section": "Language Constructs (7): Exception",
    "text": "Language Constructs (7): Exception\n\nSignaling of exception conditions, and declaring handlers for exceptions\n    declare out_of_classroom_seats condition\n    declare exit handler for out_of_classroom_seats\n    begin\n        ...\n        signal out_of_classroom_seats\n        ...\n    end\n\nThe handler here is exit – causes enclosing begin . . . end to be terminate and exit\nOther actions possible on exception"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#external-language-routines",
    "href": "pages/DBMS/w3-revealjs.html#external-language-routines",
    "title": "Week 3",
    "section": "External Language Routines*",
    "text": "External Language Routines*\n\nSQL:1999 allows the definition of functions and procedures in an external / imperative programming language, (Java, C#, C, or C++) which can be invoked from SQL queries\nSuch functions can be more efficient than functions defined in SQL, and computations that cannot be carried out in SQL can be executed by these functions\nDeclaring external language procedures and functions\n    create procedure dept_count_proc(\n            in dept_name varchar(20),\n            out count integer)\n        language C\n        external name ’/usr/avi/bin/dept_count_proc’\n\n    create function dept_count(dept_name varchar(20))\n    returns integer\n        language C\n        external name ‘/usr/avi/bin/dept_count’"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#external-language-routines-2",
    "href": "pages/DBMS/w3-revealjs.html#external-language-routines-2",
    "title": "Week 3",
    "section": "External Language Routines (2)*",
    "text": "External Language Routines (2)*\n\nBenefits of external language functions/procedures:\n\nMore efficient for many operations, and more expressive power\n\nDrawbacks\n\nCode to implement function may need to be loaded into database system and executed in the database system’s address space\n\nRisk of accidental corruption of database structures\nSecurity risk, allowing users access to unauthorized data\n\nThere are alternatives, which give good security at the cost of performance\nDirect execution in the database system’s space is used when efficiency is more important than security"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#external-language-routines-3-security",
    "href": "pages/DBMS/w3-revealjs.html#external-language-routines-3-security",
    "title": "Week 3",
    "section": "External Language Routines (3)*: Security",
    "text": "External Language Routines (3)*: Security\n\nTo deal with security problems, we can do one of the following:\n\nUse sandbox techniques\n\nThat is, use a safe language like Java, which cannot be used to access/damage other parts of the database code\n\nRun external language functions/procedures in a separate process, with no access to the database process’ memory\n\nParameters and results communicated via inter-process communication\n\n\nBoth have performance overheads\nMany database systems support both above approaches as well as direct executing in database system address space"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#trigger",
    "href": "pages/DBMS/w3-revealjs.html#trigger",
    "title": "Week 3",
    "section": "Trigger",
    "text": "Trigger\n\nA trigger defines a set of actions that are performed in response to an insert, update, or delete operation on a specified table\n\nWhen such an SQL operation is executed, the trigger is said to have been activated\nTriggers are optional\nTriggers are defined using the create trigger statement\n\nTriggers can be used\n\nTo enforce data integrity rules via referential constraints and check constraints\nTo cause updates to other tables, automatically generate or transform values for inserted or updated rows, or invoke functions to perform tasks such as issuing alerts\n\nTo design a trigger mechanism, we must:\n\nSpecify the events / (like update, insert, or delete) for the trigger to executed\nSpecify the time (BEFORE or AFTER) of execution\nSpecify the actions to be taken when the trigger executes\n\nSyntax of triggers may vary across systems"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#types-of-triggers-before",
    "href": "pages/DBMS/w3-revealjs.html#types-of-triggers-before",
    "title": "Week 3",
    "section": "Types of Triggers: BEFORE",
    "text": "Types of Triggers: BEFORE\n\nBEFORE triggers\n\nRun before an update, or insert\nValues that are being updated or inserted can be modified before the database is actually modified. You can use triggers that run before an update or insert to:\n\nCheck or modify values before they are actually updated or inserted in the database\n\nUseful if user-view and internal database format differs\n\nRun other non-database operations coded in user-defined functions\n\n\nBEFORE DELETE triggers\n\nRun before a delete\n\nChecks values (a raises an error, if necessary)"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#types-of-triggers-2-after",
    "href": "pages/DBMS/w3-revealjs.html#types-of-triggers-2-after",
    "title": "Week 3",
    "section": "Types of Triggers (2): AFTER",
    "text": "Types of Triggers (2): AFTER\n\nAFTER triggers\n\nRun before an update, insert, or delete\nYou can use triggers that run after an update or insert to:\n\nUpdate data in other tables\n\nUseful for maintain relationships between data or keep audit trail\n\nCheck against other data in the table or in other tables\n\nUseful to ensure data integrity when referential integrity constraints aren’t appropriate, or\nwhen table check constraints limit checking to the current table only\n\nRun non-database operations coded in user-defined functions\n\nUseful when issuing alerts or to update information outside the database"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#row-level-and-statement-level-triggers",
    "href": "pages/DBMS/w3-revealjs.html#row-level-and-statement-level-triggers",
    "title": "Week 3",
    "section": "Row Level and Statement Level Triggers",
    "text": "Row Level and Statement Level Triggers\nThere are two types of triggers based on the level at which the triggers are applied:\n\nRow level triggers are executed whenever a row is affected by the event on which the trigger is defined.\n\nLet Employee be a table with 100 rows. Suppose an update statement is executed to increase the salary of each employee by 10%. Any row level update trigger configured on the table Employee will affect all the 100 rows in the table during this update.\n\nStatement level triggers perform a single action for all rows affected by a statement, instead of executing a separate action for each affected row.\n\nUsed for each statement instead of for each row\nUses referencing old table or referencing new table to refer to temporary tables called transition tables containing the affected rows\nCan be more efficient when dealing with SQL statements that update a large number of rows"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#triggering-events-and-actions-in-sql",
    "href": "pages/DBMS/w3-revealjs.html#triggering-events-and-actions-in-sql",
    "title": "Week 3",
    "section": "Triggering Events and Actions in SQL",
    "text": "Triggering Events and Actions in SQL\n\nTriggering event can be an insert, delete or update\nTriggers on update can be restricted to specific attributes\n\nFor example, after update of grade on takes\n\nValues of attributes before and after an update can be referenced\n\nreferencing old row as : for deletes and updates\nreferencing new row as : for inserts and updates\n\nTriggers can be activated before an event, which can serve as extra constraints. For example, convert blank grades to null.\n  create trigger setnull_trigger before update of takes\n  referencing new row as nrow\n  for each row\n  when (nrow.grade = ‘ ‘)\n    begin atomic\n      set nrow.grade = null;\n    end;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#triggering-to-maintain-credits_earned-value",
    "href": "pages/DBMS/w3-revealjs.html#triggering-to-maintain-credits_earned-value",
    "title": "Week 3",
    "section": "Triggering to Maintain credits_earned value",
    "text": "Triggering to Maintain credits_earned value\n  create trigger credits_earned after update of grade on takes\n  referencing new row as nrow\n  referencing old row as orow\n  for each row\n  when nrow.grade &lt;&gt; 'F' and nrow.grade is not null and\n       (orow.grade = 'F' or orow.grade is null)\n    begin atomic\n      update student\n      set tot_cred = tot_cred + \n          (select credits\n          from course\n          where course.course_id = nrow.course_id)\n      where student.ID = nrow.ID;\n    end;"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#how-to-use-triggers",
    "href": "pages/DBMS/w3-revealjs.html#how-to-use-triggers",
    "title": "Week 3",
    "section": "How to use triggers?",
    "text": "How to use triggers?\n\nThe optimal use of DML triggers is for short, simple, and easy to maintain write operations that act largely independent of an applications business logic.\nTypical and recommended uses of triggers include:\n\nLogging changes to a history table\nAuditing users and their actions against sensitive tables\nAdding additional values to a table that may not be available to an application (due to security restrictions or other limitations), such as:\n\nLogin/user name\nTime an operation occurs\nServer/database name\n\nSimple validation"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#how-not-to-use-triggers",
    "href": "pages/DBMS/w3-revealjs.html#how-not-to-use-triggers",
    "title": "Week 3",
    "section": "How not to use triggers?",
    "text": "How not to use triggers?\n\nTriggers are like Lays: Once you pop, you can’t stop\nOne of the greatest challenges for architects and developers is to ensure that\n\ntriggers are used only as needed, and\nto not allow them to become a one-size-fits-all solution for any data needs that happen to come along\n\nAdding triggers is often seen as faster and easier than adding code to an application, but the cost of doing so is compounded over time with each added line of code"
  },
  {
    "objectID": "pages/DBMS/w3-revealjs.html#how-to-use-triggers-2",
    "href": "pages/DBMS/w3-revealjs.html#how-to-use-triggers-2",
    "title": "Week 3",
    "section": "How to use triggers? (2)",
    "text": "How to use triggers? (2)\n\nTriggers can become dangerous when:\n\nThere are too many\nTrigger code becomes complex\nTriggers go cross-server - across databases over network\nTriggers call triggers\nRecursive triggers are set to ON. This database-level setting is set to off by default\nFunctions, stored procedures, or views are in triggers\nIteration occurs\n\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#review-of-mad-i",
    "href": "pages/MAD-2/w1-revealjs.html#review-of-mad-i",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of MAD-I",
    "text": "Review of MAD-I\n\nWhat is an app (at least in our context):\n\nAn application or program used for interacting with a computing system\nAllow the user to perform some tasks useful to them\n\nComponents:\n\nBackend: Store data, processing logic, relation between data elements etc.\nFrontend: User-facing views, abstract for machine interaction\nNaturally implies a client-server or request-response type of architecture\n\nWhy Web:\n\nClose to universal platform with clear client-server architecture\nLow barrier to entry - trivial to implement simple pages and interaction\nHigh degree of flexibility - possible to implement highly complex systems"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#review-of-the-web-application-development-model",
    "href": "pages/MAD-2/w1-revealjs.html#review-of-the-web-application-development-model",
    "title": "Modern Application Development - II — Week 1",
    "section": "Review of the Web Application Development Model",
    "text": "Review of the Web Application Development Model\n\nPresentation - HTML for semantic content, CSS for styling\nLogic - Backend logic highly flexible - we used Python with Flask\nApplication architecture:\n\nModel - View - Controller. Good compromise between understandability and flexibility\n\nSystem architecture:\n\nREST principles + sessions - how to build stateful applications over stateless protocols\nAPIs: separate data from view\nRESTful? APIs - useful for basic understanding, but not strict adherence to REST\n\nOthers:\n\nSecurity, Validation, Logins and RBAC, database and frontend choices etc."
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#moving-forward",
    "href": "pages/MAD-2/w1-revealjs.html#moving-forward",
    "title": "Modern Application Development - II — Week 1",
    "section": "Moving Forward",
    "text": "Moving Forward\n\nAdvanced Frontend Development\n\nExploring JavaScript and how to use it\nJavaScript, APIs, Markup - the JAMStack\nVueJS as a candidate frontend framework\n\nOther topics of interest\n\nAsynchronous messaging, Email\nMobile / Standalone apps, PWA/SPA\nPerformance measurement, benchmarking, optimization\nAlternatives to REST\netc."
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#origins",
    "href": "pages/MAD-2/w1-revealjs.html#origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Origins",
    "text": "Origins\n\nOriginally created in 1995 as scripting language for Netscape Navigator\nIntended as “glue” language\n\nStick modules from other languages together\nNot really meant for much code\n\nPrimarily meant to assist “applets” in Java - hence JavaScript\n\nTrademark issues, name changes, …\n\nIssues:\n\nSlow\nLimited capability"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#power",
    "href": "pages/MAD-2/w1-revealjs.html#power",
    "title": "Modern Application Development - II — Week 1",
    "section": "Power",
    "text": "Power\n\nGlue was useful, but…\nThen Google Maps, Google Suggest etc. (~ 2005)\n\nPan around map, zoom in/out seamlessly - fluid user interface:\nLoad only what is needed!\n\nDescribed and Named Ajax - Garrett 2005\n\nAsynchronous Javascript and XML\n\nAllowed true “web applications” that behave like desktop applications\nEvolved considerably since then\n\nMuch more on this approach moving forward"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#standardization",
    "href": "pages/MAD-2/w1-revealjs.html#standardization",
    "title": "Modern Application Development - II — Week 1",
    "section": "Standardization",
    "text": "Standardization\n\nMove beyond Netscape needed\nECMA (European Computer Manufacturers Association) - standard 262\nSubsequently called ECMAScript\n\nAvoid trademark issues with Java\n\nIn practice:\n\nLanguage standard called ECMAScript (versions)\nImplementation and use: JavaScript\n\nSignificant changes in ES6 - 2015\n\nYearly releases since then\n“Feature readiness” oriented approach"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#what-version-to-use",
    "href": "pages/MAD-2/w1-revealjs.html#what-version-to-use",
    "title": "Modern Application Development - II — Week 1",
    "section": "What version to use?",
    "text": "What version to use?\n\nES6 has most features of modern languages (modules, scoping, class etc.)\nSome older browsers may not support all of this\nPossible approaches:\n\nIgnore old browsers and ask user to upgrade\nPackage browser along with application - useful for limited cases, like VSCode (Electron apps)\nPolyfills: include libraries that emulate newer functionality for older browsers\nCompilers: BabelJS - convert new code to older compatible versions\n\nBackend\n\nNode.js, Deno: directly use JS as a scripting language like Python"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#implications-of-js-origins",
    "href": "pages/MAD-2/w1-revealjs.html#implications-of-js-origins",
    "title": "Modern Application Development - II — Week 1",
    "section": "Implications of JS Origins",
    "text": "Implications of JS Origins\n\nEase of use given priority over performance (to start with)\nHighly tolerant of errors - fail silently\n\nDebugging difficult!\nStrict mode: “use strict”;\n\nAmbiguous syntax variants\n\nAutomatic semicolon insertion\nObject literals vs Code blocks {}\nFunction: statement or expression? Impacts parsing\n\nLimited IO support: errors “logged” to “console”\nClosely integrates with presentation layer: DOM APIs\nAsynchronous processing and the Event Loop - very powerful!"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#using-js",
    "href": "pages/MAD-2/w1-revealjs.html#using-js",
    "title": "Modern Application Development - II — Week 1",
    "section": "Using JS",
    "text": "Using JS\n\nNot originally meant for direct scripting\n\nUsually not run from command line like Python for instance\n\nNeed HTML file to load the JS as a script\n\nRequires browser to serve the files\nLinks and script tags etc.\nMay not directly work when loaded as a file\n\nNodeJS allows execution from command line"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#dom",
    "href": "pages/MAD-2/w1-revealjs.html#dom",
    "title": "Modern Application Development - II — Week 1",
    "section": "DOM",
    "text": "DOM\n\nDocument Object Model\n\nStructure of the document shown on the browser\n\nDOM can be manipulated through JS APIs\nOne of the most powerful aspects of JavaScript\nInput: clicks, textboxes, mouseover, …\nOutput: text, colours/styles, drawing, …"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#references",
    "href": "pages/MAD-2/w1-revealjs.html#references",
    "title": "Modern Application Development - II — Week 1",
    "section": "References",
    "text": "References\n\nExploring JavaScript - exploringjs.com\n\ndetailed reference material, focused on language, not frontend or GUI - very up to date\n\nMozilla Developer Network\n\nseveral examples and compatibility hints\n\nLearn JavaScript Online - interactive tutorial\n\nUtilities\n\nBabelJS - Compiler converts new JS to older compatible forms\nJS Console - interactive console to try out code\nRepl.it - complete application development"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#basic-frontend-usage",
    "href": "pages/MAD-2/w1-revealjs.html#basic-frontend-usage",
    "title": "Modern Application Development - II — Week 1",
    "section": "Basic Frontend Usage",
    "text": "Basic Frontend Usage\n\nFrontend JavaScript: must be invoked from HTML page\n\nIn context of a “Document”\nwill not execute if loaded directly\n\nScripting language - no compilation step\nLoosely structured - no specific header, body etc."
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#identifiers---the-words-of-the-language",
    "href": "pages/MAD-2/w1-revealjs.html#identifiers---the-words-of-the-language",
    "title": "Modern Application Development - II — Week 1",
    "section": "Identifiers - the words of the language",
    "text": "Identifiers - the words of the language\nReserved words:\n`await` `break` `case` `catch` `class` `const` `continue` `debugger` `default` `delete` `do` `else` `export` `extends` `finally` `for` `function` `if` `import` `in` `instanceof` `let` `new` `return` `static` `super` `switch` `this` `throw` `try` `typeof` `var` `void` `while` `with` `yield`\nLiterals (values):\n`true` `false` `null`\nOthers to avoid\n`enum` `implements` `package` `protected` `interface` `private` `public` `Infinity` `NaN` `undefined` `async`"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#statements-and-expressions",
    "href": "pages/MAD-2/w1-revealjs.html#statements-and-expressions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Statements and Expressions",
    "text": "Statements and Expressions\n\n\n\nStatements:\n\nPiece of code that can be executed\n    if ( ... ) {\n        // do something\n    }\nStandalone operation or side effects\n\n\n\n\nExpressions:\n\nPiece of code that can be executed to obtain a value to be returned\n    x = 10;\n    \"Hello world\"\nAnywhere you need a “value” - function argument, math expression etc."
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#data-types",
    "href": "pages/MAD-2/w1-revealjs.html#data-types",
    "title": "Modern Application Development - II — Week 1",
    "section": "Data Types",
    "text": "Data Types\n\nPrimitive data types: built into the language\n\nundefined, null, boolean, number, string (+bigint, symbol)\n\nObjects:\n\nCompound pieces of data\n\nFunctions:\n\nCan be handled like objects\nObjects can have functions: methods\nFunctions can have objects???"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#strings",
    "href": "pages/MAD-2/w1-revealjs.html#strings",
    "title": "Modern Application Development - II — Week 1",
    "section": "Strings",
    "text": "Strings\n\nSource code is expected to be in Unicode\n\nmost engines expect UTF-16 encoding\n\nString functions like length can give surprising results on non-ASCII words\nCan have variables in other languages!\n\nBut best avoided… keep readability in mind"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#non-values",
    "href": "pages/MAD-2/w1-revealjs.html#non-values",
    "title": "Modern Application Development - II — Week 1",
    "section": "Non-Values",
    "text": "Non-Values\n\nundefined\n\nUsually implies not initialized\nDefault unknown state\n\nnull\n\nExplicitly set to a non-value\n\n\nVery similar and may be used interchangeably in most places - keep context in mind when using for clarity of code"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#operators-and-comparisons",
    "href": "pages/MAD-2/w1-revealjs.html#operators-and-comparisons",
    "title": "Modern Application Development - II — Week 1",
    "section": "Operators and Comparisons",
    "text": "Operators and Comparisons\n\nAddition, subtraction etc.\n\nNumbers, Strings\n\nCoercion\n\nConvert to similar type where operation is defined\nCan lead to problems - needs care\n\nComparison:\n\nLoose equality: == tries to coerce\nStrict equality: === no coercion\n\nImportant for iteration, conditions"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#variables-and-scoping",
    "href": "pages/MAD-2/w1-revealjs.html#variables-and-scoping",
    "title": "Modern Application Development - II — Week 1",
    "section": "Variables and Scoping",
    "text": "Variables and Scoping\n\nAny non-reserved identifier can be used as a “placeholder” or “variable”\nScope:\n\nShould the variable be visible everywhere in all scripts or only in a specific area?\nNamespaces and limiting scope\n\nlet, const are used for declaring variables\n\nUnlike Python, variables MUST be declared\nUnlike C, their type need NOT be declared\nvar was originally used for declaring variables, but has function level scope - avoid"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#let-and-const",
    "href": "pages/MAD-2/w1-revealjs.html#let-and-const",
    "title": "Modern Application Development - II — Week 1",
    "section": "let and const",
    "text": "let and const\n\nconst : declares an immutable object\n\nValue cannot be changed once assigned\nBut only within scope\n\nlet: variable that can be updated\n\nindex variable in for loops\ngeneral variables"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#control-flow",
    "href": "pages/MAD-2/w1-revealjs.html#control-flow",
    "title": "Modern Application Development - II — Week 1",
    "section": "Control Flow",
    "text": "Control Flow\n\nConditional execution:\n\nif , else\n\nIteration\n\nfor , while\n\nChange in flow\n\nbreak, continue\n\nChoice\n\nswitch"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#functions",
    "href": "pages/MAD-2/w1-revealjs.html#functions",
    "title": "Modern Application Development - II — Week 1",
    "section": "Functions",
    "text": "Functions\n\nReusable block of code\nCan take parameters or arguments and perform computation\nFunctions are themselves objects that can be assigned!"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#function-notation",
    "href": "pages/MAD-2/w1-revealjs.html#function-notation",
    "title": "Modern Application Development - II — Week 1",
    "section": "Function Notation",
    "text": "Function Notation\n\n\nRegular declaration\n    function add(x, y)\n    {\n    return x + y;\n    }\n    // Statement\n\nNamed variable\n    let add =\n    function(x, y) {\n    return x + y;\n    }\n    // Expression\n\nArrow function\n    let add =\n    (x, y) =&gt; x + y;\n\n    // Expression"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#anonymous-functions-and-iifes",
    "href": "pages/MAD-2/w1-revealjs.html#anonymous-functions-and-iifes",
    "title": "Modern Application Development - II — Week 1",
    "section": "Anonymous Functions and IIFEs",
    "text": "Anonymous Functions and IIFEs\n    let x = function() { return \"hello\"} // Anonymous bound\n\n    (function() { return \"hello\"})() // Declare and invoke\nWhy? Older JS versions did not have good scoping rules. - Avoid IIFEs in modern code - poor readability"
  },
  {
    "objectID": "pages/MAD-2/w1-revealjs.html#interaction",
    "href": "pages/MAD-2/w1-revealjs.html#interaction",
    "title": "Modern Application Development - II — Week 1",
    "section": "Interaction",
    "text": "Interaction\n\nconsole.log is very limited\n\nvariants for error logging etc.\nBut mostly useful only for limited form of debugging - not production use\n\nBut JS was designed for document manipulation!\nInputs from DOM: mouse, text, clicks\nOutputs to DOM: manipulation of text, colours etc.\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#basic-arrays",
    "href": "pages/MAD-2/w2-revealjs.html#basic-arrays",
    "title": "Modern Application Development II - Week 2",
    "section": "Basic Arrays",
    "text": "Basic Arrays\n\nCollection of objects of any type\n\nCan even be a mix of types (numbers, strings, objects, functions, etc.)\n\nElement access\nLength property\nHoles\nIteration"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#iteration",
    "href": "pages/MAD-2/w2-revealjs.html#iteration",
    "title": "Modern Application Development II - Week 2",
    "section": "Iteration",
    "text": "Iteration\n\nGo over all elements in a collection\nConcepts:\n\nIterable: an object whose contents can be accessed sequentially\nIterator: pointer to the next element in the collection\n\nIterable objects:\n\nArrays\nStrings\nMaps\nSets\nBrowser DOM - tree structure\n\nObjects: Object.keys(obj), Object.values(obj), Object.entries(obj) - helper functions"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#iterations-and-transformations",
    "href": "pages/MAD-2/w2-revealjs.html#iterations-and-transformations",
    "title": "Modern Application Development II - Week 2",
    "section": "Iterations and Transformations",
    "text": "Iterations and Transformations\n\nFunctions that take functions as arguments/input\nmap, filter, find\n\nApply a callback function over each element in the collection\n\nElements of functional programming: create a transformation chain\n\nCallback: important concept - a function that is passed as an argument to another function, to be called back for some purpose"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#other-collections",
    "href": "pages/MAD-2/w2-revealjs.html#other-collections",
    "title": "Modern Application Development II - Week 2",
    "section": "Other Collections",
    "text": "Other Collections\n\nMaps: proper dictionary-like objects\nWeakMaps\nSets"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#destructuring",
    "href": "pages/MAD-2/w2-revealjs.html#destructuring",
    "title": "Modern Application Development II - Week 2",
    "section": "Destructuring",
    "text": "Destructuring\n\nSimple syntax to split an array into multiple variables\nEasier to pass and collect arguments etc.\nAlso works with objects"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#generators",
    "href": "pages/MAD-2/w2-revealjs.html#generators",
    "title": "Modern Application Development II - Week 2",
    "section": "Generators",
    "text": "Generators\n\nFunctions that yield values one at a time\nComputed iterables\nDynamically generate iterators"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#modules",
    "href": "pages/MAD-2/w2-revealjs.html#modules",
    "title": "Modern Application Development II - Week 2",
    "section": "Modules",
    "text": "Modules\n\nCollect related functions, objects, values together\n“export” values for use by other scripts\n“import” values from other scripts, packages"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#ways-of-implementing",
    "href": "pages/MAD-2/w2-revealjs.html#ways-of-implementing",
    "title": "Modern Application Development II - Week 2",
    "section": "Ways of implementing",
    "text": "Ways of implementing\n\nscript - directly include script inside browser\nCommonJS - introduced for server-side modules\n\nsynchronous load: server blocks till module is loaded\n\nAMD - asynchronous module definition\n\nused for browser-side modules\n\n\nECMAScript 6 and above:\n\nES6 modules\n\nBoth servers and browsers\nAsynchronous loading"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#npm",
    "href": "pages/MAD-2/w2-revealjs.html#npm",
    "title": "Modern Application Development II - Week 2",
    "section": "npm",
    "text": "npm\n\nNode Package Manager\nNode:\n\ncommand line interface for JS\nMainly used for backend code, can also be used for testing\n\nnpm can also be used to package modules for frontend\n\n“Bundle” managers - webpack, rollup, etc."
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#objects",
    "href": "pages/MAD-2/w2-revealjs.html#objects",
    "title": "Modern Application Development II - Week 2",
    "section": "Objects",
    "text": "Objects\n\nEverything in JavaScript is an object\nObject literals\n\nAssign values to named parameters in an object\n\nObject methods\n\nAssign functions that can be called on the object\n\nSpecial variable this - refers to the object itself\nFunction methods\n\ncall(), apply(), bind()\n\nObject.keys(), values(), entries()\n\nuse as dictionary\niterators"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#prototype-based-inheritance",
    "href": "pages/MAD-2/w2-revealjs.html#prototype-based-inheritance",
    "title": "Modern Application Development II - Week 2",
    "section": "Prototype based inheritance",
    "text": "Prototype based inheritance\n\nObjects can have a “prototype”\nAutomatically inherit properties and methods of parent object\nSingle inheritance track"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#class",
    "href": "pages/MAD-2/w2-revealjs.html#class",
    "title": "Modern Application Development II - Week 2",
    "section": "Class",
    "text": "Class\n\nBetter syntax - still prototype based inheritance\nconstructor must explicitly call super()\nMultiple inheritance of Mixins"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#function-calls",
    "href": "pages/MAD-2/w2-revealjs.html#function-calls",
    "title": "Modern Application Development II - Week 2",
    "section": "Function calls",
    "text": "Function calls\n\n\n\nFunction is like a “branch”\n\nbut must save present state so we can return\n\nCall stack:\n\nKeep track of chain of functions called up to now\nPop back up out of the stack\n\n\n\n\nmain() on stack - current - calls f()\nf() goes on stack - calls g()\ng() goes on stack - calls h()\nh() goes on stack - executes\nreturn from h -&gt; pop into g\nreturn from g -&gt; pop into f\nreturn from f -&gt; pop into main"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#call-stack",
    "href": "pages/MAD-2/w2-revealjs.html#call-stack",
    "title": "Modern Application Development II - Week 2",
    "section": "Call Stack",
    "text": "Call Stack\nExplanatory video\nVisualize the call stack"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#event-loop-and-task-queue",
    "href": "pages/MAD-2/w2-revealjs.html#event-loop-and-task-queue",
    "title": "Modern Application Development II - Week 2",
    "section": "Event Loop and Task Queue",
    "text": "Event Loop and Task Queue\n\nTask Queue: store next task to be executed\n\nTasks are pushed into the queue by events (clicks, input, network etc.)\n\nEvent loop:\n\nWait for call stack to be empty\nPop next task from queue and push onto stack, start executing\n\nRun-to-completion\n\nGuarantee from JavaScript runtime\nEach task will run to completion before next task is picked up"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#blocking-the-browser",
    "href": "pages/MAD-2/w2-revealjs.html#blocking-the-browser",
    "title": "Modern Application Development II - Week 2",
    "section": "Blocking the browser",
    "text": "Blocking the browser\nhttps://exploringjs.com/impatient-js/ch_async-js.html#how-to-avoid-blocking-the-javascript-process"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#why-callbacks",
    "href": "pages/MAD-2/w2-revealjs.html#why-callbacks",
    "title": "Modern Application Development II - Week 2",
    "section": "Why callbacks?",
    "text": "Why callbacks?\n\nLong running code\n\nWill block execution till it finishes\n\nPush long running code into a separate “thread” or “task”\n\nLet main code proceed\nCall back when task is done"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#example-reading-files---synchronous",
    "href": "pages/MAD-2/w2-revealjs.html#example-reading-files---synchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - synchronous",
    "text": "Example: reading files - synchronous\nconst fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('file.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#example-reading-files---asynchronous",
    "href": "pages/MAD-2/w2-revealjs.html#example-reading-files---asynchronous",
    "title": "Modern Application Development II - Week 2",
    "section": "Example: reading files - asynchronous",
    "text": "Example: reading files - asynchronous\nconst fs = require('fs');\n\nfs.readFile('file.txt', 'utf8', (err, data) =&gt; {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#asynchronous-code",
    "href": "pages/MAD-2/w2-revealjs.html#asynchronous-code",
    "title": "Modern Application Development II - Week 2",
    "section": "Asynchronous Code",
    "text": "Asynchronous Code\n\nVery powerful - allows JS to have high performance even though it is single-threaded\nCan be difficult to comprehend\n\nFocus on using async libraries and functions before writing your own\n\nPromises, async function calls, etc.\n\nImportant and useful concepts\nDeferred for now"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#json",
    "href": "pages/MAD-2/w2-revealjs.html#json",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON",
    "text": "JSON\n\nObject Notation - for serialization, communication\nNotation is frozen\n\nMeans even problem cases will remain (trailing “.” could ve useful but will not be used)\n\nUsage through JSON API"
  },
  {
    "objectID": "pages/MAD-2/w2-revealjs.html#json-api",
    "href": "pages/MAD-2/w2-revealjs.html#json-api",
    "title": "Modern Application Development II - Week 2",
    "section": "JSON API",
    "text": "JSON API\n\nGlobal namespace object JSON\nMain methods:\n\nJSON.stringify()\nJSON.parse()\n\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#what-is-the-frontend",
    "href": "pages/MAD-2/w3-revealjs.html#what-is-the-frontend",
    "title": "Modern Application Development II - Week 3",
    "section": "What is the frontend?",
    "text": "What is the frontend?\n\nUser-facing part of the application\n\nUser Interface (UI) and User Experience (UX)\n\nRequirements\n\nAvoid complex logic - application logic should be in the backend\nNo data storage\nWork with stateless nature of HTTP\n\nDesirable\n\nAesthetically pleasing\nResponsive - no lag/latency\nAdaptive - different screens"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#programming-styles",
    "href": "pages/MAD-2/w3-revealjs.html#programming-styles",
    "title": "Modern Application Development II - Week 3",
    "section": "Programming Styles",
    "text": "Programming Styles\n\nImperative: sequence of actions to achieve final result\n\nDraw boxes for navigation, main text, fill in text, wait for clicks etc.\nFunctions for each step, composition of functions\n\nDeclarative: specify desired result\n\nCompiler/Interpreter knows how to achieve result\nFunction integration automated"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#state",
    "href": "pages/MAD-2/w3-revealjs.html#state",
    "title": "Modern Application Development II - Week 3",
    "section": "State?",
    "text": "State?\n\nInternal details of system: memory\nReproducibility\n\nGiven a “system state”, the system should always respond the same way to input\n\nComplexity\n\nAny non-trivial application needs internal state"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#system-state",
    "href": "pages/MAD-2/w3-revealjs.html#system-state",
    "title": "Modern Application Development II - Week 3",
    "section": "System State",
    "text": "System State\n\nComplete database of amazon.in, flipkart.com\n\nStocks of available items, prices, logged in/register users, etc.\n\nAll news articles ever published on toi.com, thehindu.com, bbc.com\nAll students, courses, marks, certificates, etc. for NPTEL\n\nTypically huge, but comprehensive\n\nCompletely independent of the user interface/frontend!"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#application-state",
    "href": "pages/MAD-2/w3-revealjs.html#application-state",
    "title": "Modern Application Development II - Week 3",
    "section": "Application State",
    "text": "Application State\nApplication:\n\nSystem as seen by an individual user/session\nIncludes interactivity, session management\n\nExamples:\n\nShopping cart, user preferences, theme\nFollowed news items, recommendations\nDashboard displays"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#ui-state-ephemeral-state",
    "href": "pages/MAD-2/w3-revealjs.html#ui-state-ephemeral-state",
    "title": "Modern Application Development II - Week 3",
    "section": "UI State (Ephemeral State)",
    "text": "UI State (Ephemeral State)\nUI:\n\nPart of application actually seen/intereacted with\nEphemeral - “lasting for a very short time” (term used by Flutter)\n\nExamples:\n\nLoading icons\nCurrently selected tab in multi-tab document/page"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#application-and-ui-management",
    "href": "pages/MAD-2/w3-revealjs.html#application-and-ui-management",
    "title": "Modern Application Development II - Week 3",
    "section": "Application and UI management",
    "text": "Application and UI management\n\nHTTP is stateless\nHow to convey state between client and server?\n\nClient maintains state - sends requests to server for specific items\nServer maintains state - only specific requests allowed to client"
  },
  {
    "objectID": "pages/MAD-2/w3-revealjs.html#example-tic-tac-toe",
    "href": "pages/MAD-2/w3-revealjs.html#example-tic-tac-toe",
    "title": "Modern Application Development II - Week 3",
    "section": "Example: Tic-Tac-Toe",
    "text": "Example: Tic-Tac-Toe\n\nWhat to display on screen?\nWho determines the display?\nHow should user input be collected and processed?\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#relational-algebra",
    "href": "pages/DBMS/w4-revealjs.html#relational-algebra",
    "title": "Week 4",
    "section": "Relational Algebra",
    "text": "Relational Algebra\n\nRelational algebra is a procedural query language which takes relations as input and returns relation as output.\nIt was created by Edgar F. Codd at IBM in 1970.\nSix basic operators of relational algebra are:\n\nSelect (\\(\\sigma\\))\nProject (\\(\\Pi\\))\nUnion (\\(\\cup\\))\nSet Difference (\\(-\\))\nCartesian Product (\\(\\times\\))\nRename (\\(\\rho\\))"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#select-operation",
    "href": "pages/DBMS/w4-revealjs.html#select-operation",
    "title": "Week 4",
    "section": "Select Operation",
    "text": "Select Operation\n\nNotation: \\(\\sigma_{p}(r)\\)\n\\(p\\) is called the selection predicate\nDefinition: \\[\n  \\sigma_{p}(r) = \\{t \\mid t \\in r \\text{ and } p(t) \\}\n  \\]\nwhere \\(p\\) is a formula in propositional calculus consisting of terms connected by: \\(\\land\\) (and), \\(\\lor\\) (or), and \\(\\lnot\\) (not).\nEach term is one of:\n&lt; attribute &gt; op &lt; attribute &gt; or &lt; constant &gt;\nwhere op is one of: \\(=\\), \\(\\neq\\), \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\)\n\nSelect Example\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nα\nβ\n5\n7\n\n\nβ\nβ\n12\n3\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\\[\nr\n\\]\n\n\n\n\n\nA\nB\nC\nD\n\n\n\n\nα\nα\n1\n7\n\n\nβ\nβ\n23\n10\n\n\n\n\n\n\\[\n\\sigma_{A=B\\wedge D&gt;5}(r)\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#project-operation",
    "href": "pages/DBMS/w4-revealjs.html#project-operation",
    "title": "Week 4",
    "section": "Project Operation",
    "text": "Project Operation\n\nNotation: \\(\\Pi_{A_1, A_2, \\ldots, A_k}(r)\\)\nwhere \\(A_1, A_2, \\ldots, A_k\\) are attributes of relation \\(r\\)\nThe result is defined as the relation of \\(k\\) columns obtained by deleting columns other than \\(A_1, A_2, \\ldots, A_k\\) from \\(r\\)\nDuplicate rows are automatically eliminated, since the result is a set\n\nProject Example\n\n\n\n\n\nA\nB\nC\n\n\n\n\nα\n10\n1\n\n\nα\n20\n1\n\n\nβ\n30\n1\n\n\nβ\n40\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\n\n\n\nA\nC\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\n\\Pi_{A, C}(r)\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#union-operation",
    "href": "pages/DBMS/w4-revealjs.html#union-operation",
    "title": "Week 4",
    "section": "Union Operation",
    "text": "Union Operation\n\nNotation: \\(r \\cup s\\)\nDefined as: \\(r \\cup s = \\{t \\mid t \\in r \\text{ or } t \\in s \\}\\)\nFor \\(r \\cup s\\) to be valid\n\n\\(r\\) and \\(s\\) must have the same arity (same number of attributes)\nThe attribute domains must be compatible (same type)\n\n\nUnion Example\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\nβ\n3\n\n\n\n\n\n\n\\[\nr \\cup s\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#difference-operation",
    "href": "pages/DBMS/w4-revealjs.html#difference-operation",
    "title": "Week 4",
    "section": "Difference Operation",
    "text": "Difference Operation\n\nNotation: \\(r - s\\)\nDefined as: \\(r - s = \\{t \\mid t \\in r \\text{ and } t \\notin s \\}\\)\nSet differences must be taken between compatible relations\n\n\\(r\\) and \\(s\\) must have the same arity\nThe attribute domains must be compatible\n\n\nDifference Example\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n1\n\n\n\n\n\n\\[\nr - s\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#intersection-operation",
    "href": "pages/DBMS/w4-revealjs.html#intersection-operation",
    "title": "Week 4",
    "section": "Intersection Operation",
    "text": "Intersection Operation\n\nNotation: \\(r \\cap s\\)\nDefined as: \\(r \\cap s = \\{t \\mid t \\in r \\text{ and } t \\in s \\}\\)\nAssume:\n\n\\(r\\), \\(s\\) have the same arity\nAttributes of \\(r\\) and \\(s\\) are compatible\n\nNote: \\(r \\cap s = r - (r - s)\\)\n\nIntersection Example\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nα\n2\n\n\nβ\n1\n\n\n\n\n\n\\[\nr\n\\]\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\nβ\n3\n\n\n\n\n\n\\[\ns\n\\]\n\n\n\n\n\nA\nB\n\n\n\n\nα\n2\n\n\n\n\n\n\\[\nr \\cap s\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#cartesian-product-operation",
    "href": "pages/DBMS/w4-revealjs.html#cartesian-product-operation",
    "title": "Week 4",
    "section": "Cartesian-Product Operation",
    "text": "Cartesian-Product Operation\n\nNotation: \\(r \\times s\\)\nDefined as: \\(r \\times s = \\{t_1, t_2 \\mid t_1 \\in r \\text{ and } t_2 \\in s \\}\\)\nAssume that attributes of \\(r\\) and \\(s\\) are disjoint (no common attributes)\nIf attributes are not disjoint, use rename operation to make them disjoint\n\nCartesian-Product Example\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\n\n\n\nC\nD\nE\n\n\n\n\nα\n10\na\n\n\nβ\n10\na\n\n\nβ\n20\nb\n\n\nγ\n10\nb\n\n\n\n\n\n\\[\ns\n\\]\n\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nα\n1\nα\n10\na\n\n\nα\n1\nβ\n10\na\n\n\nα\n1\nβ\n20\nb\n\n\nα\n1\nγ\n10\nb\n\n\nβ\n2\nα\n10\na\n\n\nβ\n2\nβ\n10\na\n\n\nβ\n2\nβ\n20\nb\n\n\nβ\n2\nγ\n10\nb\n\n\n\n\n\n\\[\nr \\times s\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#rename-operation",
    "href": "pages/DBMS/w4-revealjs.html#rename-operation",
    "title": "Week 4",
    "section": "Rename Operation",
    "text": "Rename Operation\n\nAllows us to name, and therefore to refer to, the result of a relational-algebra expression\nAllows us to refer to a relation by more than one name\nExample:\n\\(\\rho_{X}(E)\\)\nreturns the relation \\(E\\) under the name \\(X\\)\nIf a relational-algebra expression \\(E\\) has arity \\(n\\), then \\[\n  \\rho_{X(A_1, A_2, \\ldots, A_n)}(E)\n  \\] returns the result of the expression \\(E\\) under the name \\(X\\), and with the attributes renamed to \\[\n  A_1, A_2, \\ldots, A_n\n  \\]\n\nRename Example\n\n\n\n\n\nA\nB\n\n\n\n\nα\n1\n\n\nβ\n2\n\n\n\n\n\n\\[\nr\n\\]\n\n\n\n\n\nr.A\nr.B\ns.A\ns.B\n\n\n\n\nα\n1\nα\n1\n\n\nα\n1\nβ\n2\n\n\nβ\n2\nα\n1\n\n\nβ\n2\nβ\n2\n\n\n\n\n\n\\[\nr \\times \\rho_{s}(r)\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#division-operation",
    "href": "pages/DBMS/w4-revealjs.html#division-operation",
    "title": "Week 4",
    "section": "Division Operation",
    "text": "Division Operation\n\nThe division operation is applied to two relations\n\\(R(Z) \\div S(X)\\), where \\(X\\) is a subset of \\(Z\\). Let \\(Y = Z - X\\) (hence \\(Z = X \\cup Y\\)); that is, let \\(Y\\) be the set of attributes of \\(R\\) that are not in \\(S\\)\nThe result of the division operation is a relation \\(T(Y)\\) that includes a tuple \\(t\\) if tuples \\(t_R\\) appear in \\(R\\) with \\(t_R[Y] = t\\), and with\n\n\\(t_R[X] = t_S\\) for all tuples \\(t_S\\) in \\(S\\)\n\nFor a tuple \\(t\\) to appear in the result \\(T\\) of the division operation, the values in \\(t\\) must appear in \\(R\\) with all possible combinations of values in \\(S\\)\nDivision is a derived operation, and can be expressed in terms of the basic operations of relational algebra\n\\(r \\div s \\equiv \\Pi_{R - S}(r) - \\Pi_{R - S}(r)((\\Pi_{R - S}(r) \\times s) - \\Pi_{R-S,S}(r))\\)\n\nDivision Examples\nExample 1\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\\[\nR\n\\]\n\n\n\n\n\nSubject\n\n\n\n\nProlog\n\n\n\n\n\n\\[\nS\n\\]\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\nLewis\n\n\n\n\n\n\\[\nR \\mid S\n\\]\nExample 2\n\n\n\n\n\nLecturer\nModule\n\n\n\n\nBrown\nCompilers\n\n\nBrown\nDatabases\n\n\nGreen\nProlog\n\n\nGreen\nDatabases\n\n\nLewis\nProlog\n\n\nSmith\nDatabases\n\n\n\n\n\n\\[\nR\n\\]\n\n\n\n\n\nSubject\n\n\n\n\nDatabases\n\n\nProlog\n\n\n\n\n\n\\[\nS\n\\]\n\n\n\n\n\nLecturer\n\n\n\n\nGreen\n\n\n\n\n\n\\[\nR \\mid S\n\\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#predicate-logic",
    "href": "pages/DBMS/w4-revealjs.html#predicate-logic",
    "title": "Week 4",
    "section": "Predicate Logic",
    "text": "Predicate Logic\nPredicate Logic or Predicate Calculus is an extension of Propositional Logic or Boolean Algebra.\nIt adds the concept of predicates and quantifiers to better capture the meaning of statements that cannot be adequately expressed using propositional logic.\nTuple Relational Calculus and Domain Relational Calculus are based on Predicate Calculus."
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#predicate",
    "href": "pages/DBMS/w4-revealjs.html#predicate",
    "title": "Week 4",
    "section": "Predicate",
    "text": "Predicate\n\nConsider the statement, “\\(x\\) is greater than 3”. It has two parts. The first part, the variable \\(x\\), is the subject of the statement. The second part, “is greater than 3”, is the predicate. It refers to a property that the subject of the statement can have.\nThe statement “\\(x\\) is greater than 3” can be denoted by \\(P(x)\\) where \\(P\\) denotes the predicate “is greater than 3” and \\(x\\) is the variable.\nThe predicate \\(P\\) can be considered as a function. It tells the truth value of the statement \\(P(x)\\) at \\(x\\). Once a value has been assigned to the variable \\(x\\), the statement \\(P(x)\\) becomes a proposition and has a truth or false value.\nIn general, a statement involving \\(n\\) variables \\(x_1, x_2, x_3, \\ldots , x_n\\) and a predicate \\(P\\) can be denoted by \\(P(x_1, x_2, x_3, \\ldots , x_n)\\). Here \\(P\\) is also referred to as n-place predicate or a \\(n\\)-ary predicate."
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#quantifiers",
    "href": "pages/DBMS/w4-revealjs.html#quantifiers",
    "title": "Week 4",
    "section": "Quantifiers",
    "text": "Quantifiers\nIn predicate logic, predicates are used alongside quantifiers to express the extent to which a predicate is true over a range of elements. Using quantifiers to create such propositions is called quantification. There are two types of quantifiers:\n\nUniversal Quantifier\nExistential Quantifier"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#universal-quantifier",
    "href": "pages/DBMS/w4-revealjs.html#universal-quantifier",
    "title": "Week 4",
    "section": "Universal Quantifier",
    "text": "Universal Quantifier\nUniversal Quantification: Mathematical statements sometimes assert that a property is true for all the values of a variable in a particular domain, called the domain of discourse\n\nSuch a statement is expressed using universal quantification.\nThe universal quantification of \\(P(x)\\) for a particular domain is the proposition that asserts that \\(P(x)\\) is true for all values of \\(x\\) in this domain\nThe domain is very important here since it decides the possible values of \\(x\\)\nFormally, The universal quantification of \\(P(x)\\) is the statement “\\(P(x)\\) for all values of \\(x\\) in the domain”\nThe notation \\(\\forall P(x)\\) denotes the universal quantification of \\(P(x)\\). Here \\(\\forall\\) is called the universal quantifier. \\(\\forall P(x)\\) is read as “for all \\(x\\) \\(P(x)\\)”.\nExample: Let \\(P(x)\\) be the statement “\\(x + 2 &gt; x\\)”. What is the truth value of the statement \\(\\forall x P(x)\\)?\nSolution: As \\(x + 2\\) is greater than \\(x\\) for any real number, so \\(P(x) \\equiv T\\) for all \\(x\\) or \\(\\forall x P(x) \\equiv T\\)"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#existential-quantifier",
    "href": "pages/DBMS/w4-revealjs.html#existential-quantifier",
    "title": "Week 4",
    "section": "Existential Quantifier",
    "text": "Existential Quantifier\nExistential Quantification: Some mathematical statements assert that there is an element with a certain property. Such statements are expressed by existential quantification. Existential quantification can be used to form a proposition that is true if and only if \\(P(x)\\) is true for at least one value of \\(x\\) in the domain.\n\nFormally, the existential quantification of \\(P(x)\\) is the statement “There exists an element \\(x\\) in the domain such that \\(P(x)\\)”.\nThe notation \\(\\exists P(x)\\) denotes the existential quantification of \\(P(x)\\). Here \\(\\exists\\) is called the existential quantifier. \\(\\exists P(x)\\) is read as “There is at least one \\(x\\) such that \\(P(x)\\)”.\nExample: Let \\(P(x)\\) be the statement “\\(x^2 = 4\\)”. What is the truth value of the statement \\(\\exists x P(x)\\)?\nSolution: The statement \\(x^2 = 4\\) is true for \\(x = 2\\) and \\(x = -2\\). So, \\(\\exists x\\) \\(P(x) \\equiv T\\)"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#tuple-relational-calculus",
    "href": "pages/DBMS/w4-revealjs.html#tuple-relational-calculus",
    "title": "Week 4",
    "section": "Tuple Relational Calculus",
    "text": "Tuple Relational Calculus\nTRC is a non-procedural query language, where each query is of the form\n\\[\n\\{t \\mid P(t)\\}\n\\]\nwhere \\(t =\\) resulting tuples, \\(P(t) =\\) known as predicate and these are the conditions that are used to fetch \\(t\\). \\(P(t)\\) may have various conditions connected by logical connectives like AND (\\(\\land\\)), OR (\\(\\lor\\)), and NOT (\\(\\lnot\\)).\nIt also uses quantifiers: \\(\\exists t \\in r(Q(t)) =\\) “there exists” a tuple \\(t\\) in relation \\(r\\) such that \\(Q(t)\\) is true. \\(\\forall t \\in r(Q(t)) =\\) “for all” tuples \\(t\\) in relation \\(r\\), \\(Q(t)\\) is true."
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#predicate-calculus-formula",
    "href": "pages/DBMS/w4-revealjs.html#predicate-calculus-formula",
    "title": "Week 4",
    "section": "Predicate Calculus Formula",
    "text": "Predicate Calculus Formula\n\nSet of attributes and constants\nSet of comparison operators: (\\(=\\), \\(\\neq\\), \\(&lt;\\), \\(\\leq\\), \\(&gt;\\), \\(\\geq\\))\nSet of logical connectives: and (\\(\\land\\)), or(\\(\\lor\\)), not (\\(\\lnot\\))\nImplication (\\(\\implies\\)) : \\(x \\implies y\\), if \\(x\\) then \\(y\\)\nSet of quantifiers:\n\n\\(\\exists t \\in r(Q(t)) \\equiv\\) “there exists” a tuple \\(t\\) in relation \\(r\\) such that \\(Q(t)\\) is true.\n\\(\\forall t \\in r(Q(t)) \\equiv\\) \\(Q\\) is true “for all” tuples \\(t\\) in relation \\(r\\)\n\n\nTRC Example\n\nStudent\n\n\nFname\nLname\nAge\nCourse\n\n\n\n\nDavid\nSharma\n27\nDBMS\n\n\nAaron\nLilly\n17\nJava\n\n\nSahil\nKhan\n19\nPython\n\n\nSachin\nRao\n20\nDBMS\n\n\nVarun\nGeorge\n23\nJava\n\n\nSimi\nVerma\n22\nJava\n\n\n\nObtain the first name of students whose age is greater than 21.\nSolution:\n\\[\n  \\{t.Fname \\mid Student(t) \\land t.Age &gt; 21\\}\n  \\] \\[\n  \\{t.Fname \\mid t \\in Student \\land t.Age &gt; 21\\}\n  \\] \\[\n  \\{t \\mid \\exists s \\in Student(s.Age &gt; 21 \\land t.Fname = s.Fname)\\}\n  \\]"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#safety-of-expressions",
    "href": "pages/DBMS/w4-revealjs.html#safety-of-expressions",
    "title": "Week 4",
    "section": "Safety of Expressions",
    "text": "Safety of Expressions\n\nIt is possible to write tuple calculus expressions that generate infinite relations\nFor example, \\(\\{t \\mid \\lnot t \\in r\\}\\) results in an infinite relation if the domain of any attribute of relation \\(r\\) is infinite\nTo guard against the problem, we restrict the set of allowable expressions to safe expressions\nAn expression \\(\\{t \\mid P(t)\\}\\) in the tuple relational calculus is safe if every component of \\(t\\) appears in one of the relations, tuples, or constants that appear in \\(P\\).\n\nNOTE: this is more than just a syntax condition\nE.g. \\(\\{t \\mid t[A] = 5 \\lor \\text{true}\\}\\) is not safe — it defines an infinite set with attribute values that do not appear in any relation or tuples or constants in \\(P\\)"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#domain-relational-calculus",
    "href": "pages/DBMS/w4-revealjs.html#domain-relational-calculus",
    "title": "Week 4",
    "section": "Domain Relational Calculus",
    "text": "Domain Relational Calculus\n\nA non-procedural query language equivalent in power to tuple relational calculus\nEach query is of the form\n\\[\n  \\{&lt; x_1, x_2, \\ldots, x_n &gt; \\mid P(x_1, x_2, \\ldots, x_n)\\}\n  \\]\n\n\\(x_1, x_2, \\ldots, x_n\\) represent domain variables\n\\(P\\) represents a formula similar to that of the predicate calculus"
  },
  {
    "objectID": "pages/DBMS/w4-revealjs.html#equivalence-of-relational-algebra-tuple-relational-calculus-and-domain-relational-calculus",
    "href": "pages/DBMS/w4-revealjs.html#equivalence-of-relational-algebra-tuple-relational-calculus-and-domain-relational-calculus",
    "title": "Week 4",
    "section": "Equivalence of Relational Algebra, Tuple Relational Calculus, and Domain Relational Calculus",
    "text": "Equivalence of Relational Algebra, Tuple Relational Calculus, and Domain Relational Calculus\nSelect Operation\n\\(R = (A, B)\\)\n\nRelational Algebra: \\(\\sigma_{A = 5}(r)\\)\nTuple Relational Calculus: \\(\\{t \\mid t \\in r \\land A = 5\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a, b &gt; \\mid &lt;a, b&gt; \\in r \\land a = 5\\}\\)\n\nProject Operation\n\\(R = (A, B)\\)\n\nRelational Algebra: \\(\\Pi_{A}(r)\\)\nTuple Relational Calculus: \\(\\{t \\mid t \\exists p \\in r(t[A]=p[A])\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a &gt; \\mid \\exists b(&lt;a, b&gt; \\in r)\\}\\)\n\nCombining Operations\n\\(R = (A, B)\\)\n\nRelational Algebra: \\(\\Pi_{A}(\\sigma_{B = 5}(r))\\)\nTuple Relational Calculus: \\(\\{t \\mid \\exists p \\in r(t[A] = p[A] \\land p[B] = 5)\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a &gt; \\mid \\exists b(&lt;a, b&gt; \\in r \\land b = 5)\\}\\)\n\nUnion\n\\(R = (A, B, C)\\), \\(S = (A, B, C)\\)\n\nRelational Algebra: \\(r \\cup s\\)\nTuple Relational Calculus: \\(\\{t \\mid t \\in r \\lor t \\in s\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\lor &lt;a, b, c&gt; \\in s\\}\\)\n\nSet Difference\n\\(R = (A, B, C)\\), \\(S = (A, B, C)\\)\n\nRelational Algebra: \\(r - s\\)\nTuple Relational Calculus: \\(\\{t \\mid t \\in r \\land t \\notin s\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\land &lt;a, b, c&gt; \\notin s\\}\\)\n\nIntersection\n\\(R = (A, B, C)\\), \\(S = (A, B, C)\\)\n\nRelational Algebra: \\(r \\cap s\\)\nTuple Relational Calculus: \\(\\{t \\mid t \\in r \\land t \\in s\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a, b, c &gt; \\mid &lt;a, b, c&gt; \\in r \\land &lt;a, b, c&gt; \\in s\\}\\)\n\nCartesian/Cross Product\n\\(R = (A, B)\\), \\(S = (C, D)\\)\n\nRelational Algebra: \\(r \\times s\\)\nTuple Relational Calculus: \\(\\{t \\mid \\exists p \\in r \\exists q \\in s(t[A] = p[A] \\land t[B] = p[B] \\land t[C] = q[C] \\land t[D] = q[D])\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a, b, c, d &gt; \\mid (&lt;a, b&gt; \\in r \\land &lt;c, d&gt; \\in s)\\}\\)\n\nNatural Join\n\\(R = (A, B, C, D)\\), \\(S = (B, D, E)\\)\n\nRelational Algebra: \\(r \\bowtie s\\) \\[\n\\Pi_{r.A, r.B, r.C, r.D, s.E}(\\sigma_{r.B = s.B \\land r.D = s.D}(r \\times s))\n\\]\nTuple Relational Calculus: \\(\\{t \\mid \\exists p \\in r \\exists q \\in s(t[A] = p[A] \\land t[B] = p[B] \\land t[C] = p[C] \\land t[D] = p[D] \\land t[E] = q[E] \\land p[B] = q[B] \\land p[D]=q[D])\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a, b, c, d, e &gt; \\mid &lt;a, b, c, d&gt; \\in r \\land &lt;b, d, e&gt; \\in s\\}\\)\n\nDivision\n\\(R = (A, B)\\), \\(S = (B)\\)\n\nRelational Algebra: \\(r \\div s\\)\nTuple Relational Calculus: \\(\\{t \\mid \\exists p \\in r(\\forall q \\in s(p[B] = q[B] \\implies t[A] = p[A]))\\}\\)\nDomain Relational Calculus: \\(\\{&lt; a &gt; \\mid &lt; a &gt; \\in r \\land \\forall &lt;b&gt;(&lt; b &gt; \\in s \\implies &lt; a, b &gt; \\in r)\\}\\)\n\n\n\n\nComplete notes"
  },
  {
    "objectID": "pages/Stats2/Quiz2_keyconcepts.html",
    "href": "pages/Stats2/Quiz2_keyconcepts.html",
    "title": "Key concepts in Statistics-II from Week 5 to Week 8",
    "section": "",
    "text": "The CDF F_Y of Y = g(X), where X is a continuous random variable with PDF f_X, is given by: F_y(y) = P(Y \\leq y) = P(g(X) \\leq y) = P(X \\in \\{x:g(x) \\leq y\\})\n\nTo evaluate the above probability,\n\nConvert the subset A_y = \\{x:g(x) \\leq y\\} into intervals in real line\nFind the probability of X falling in the interval\nF_Y(y) = P(X \\in A_y) = \\int_{A_y} f_X(x) dx\n\n\nFor monotonic, differentiable functions Y=g(X) only, the PDF of Y is given by: f_Y(y) = \\frac{1}{\\left | g'(g^{-1}(y)) \\right|} \\cdot f_X(g^{-1}(y)) \n\nTranslation: Y=X+a f_Y(y) = f_X(y-a)\nScaling: Y=aX f_Y(y) = \\frac{1}{|a|} f_X(\\frac{y}{a})\nAffine: Y=aX+b f_Y(y) = \\frac{1}{|a|} f_X(\\frac{y-b}{a})\n\nAffine transformation of normal distributions\n\nX \\sim N(0,1) (Standard normal) f_X(x) = \\frac{1}{\\sqrt{2\\pi}} e^{-x^2/2}\n\nY = \\sigma X + \\mu f_Y(y) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{-(y-\\mu)^2/2\\sigma^2}\n\nY \\sim N(\\mu, \\sigma^2)\n\n\nX \\sim N(\\mu, \\sigma^2)\n\nY=\\frac{X-\\mu}{\\sigma} \\sim N(0,1)\n\n\n\n\n\n\n\n\n\nResult\n\n\n\nAffine transformation of a normal random variable is also a normal random variable.",
    "crumbs": [
      "Statistics-II",
      "Key concepts in Statistics-II from Week 5 to Week 8"
    ]
  },
  {
    "objectID": "pages/Stats2/Quiz2_keyconcepts.html#functions-of-a-continuous-random-variable",
    "href": "pages/Stats2/Quiz2_keyconcepts.html#functions-of-a-continuous-random-variable",
    "title": "Quiz 2 - Key Concepts",
    "section": "",
    "text": "The CDF F_Y of Y = g(X), where X is a continuous random variable with PDF f_X, is given by: F_y(y) = P(Y \\leq y) = P(g(X) \\leq y) = P(X \\in \\{x:g(x) \\leq y\\})\n\nTo evaluate the above probability,\n\nConvert the subset A_y = \\{x:g(x) \\leq y\\} into intervasl in real line\nFind the probability of X falling in the interval\nF_Y(y) = P(X \\in A_y) = \\int_{A_y} f_X(x) dx\n\n\nFor monotonic, differentiable functions Y=g(X) only, the PDF of Y is given by: f_Y(y) = \\frac{1}{\\left | g'(g^{-1}(y)) \\right|} \\cdot f_X(g^{-1}(y)) \n\nTranslation: Y=X+a has f_Y(y) = f_X(y-a)\nScaling: Y=aX has f_Y(y) = \\frac{1}{|a|} f_X(\\frac{y}{a})\nAffine: Y=aX+b has f_Y(y) = \\frac{1}{|a|} f_X(\\frac{y-b}{a})\n\nAffine transformation of normal distributions\n\nX \\sim N(0,1)"
  },
  {
    "objectID": "pages/Stats2/Quiz2_keyconcepts.html#lecture-5.1-functions-of-a-continuous-random-variable",
    "href": "pages/Stats2/Quiz2_keyconcepts.html#lecture-5.1-functions-of-a-continuous-random-variable",
    "title": "Key concepts in Statistics-II from Week 5 to Week 8",
    "section": "",
    "text": "The CDF F_Y of Y = g(X), where X is a continuous random variable with PDF f_X, is given by: F_y(y) = P(Y \\leq y) = P(g(X) \\leq y) = P(X \\in \\{x:g(x) \\leq y\\})\n\nTo evaluate the above probability,\n\nConvert the subset A_y = \\{x:g(x) \\leq y\\} into intervals in real line\nFind the probability of X falling in the interval\nF_Y(y) = P(X \\in A_y) = \\int_{A_y} f_X(x) dx\n\n\nFor monotonic, differentiable functions Y=g(X) only, the PDF of Y is given by: f_Y(y) = \\frac{1}{\\left | g'(g^{-1}(y)) \\right|} \\cdot f_X(g^{-1}(y)) \n\nTranslation: Y=X+a f_Y(y) = f_X(y-a)\nScaling: Y=aX f_Y(y) = \\frac{1}{|a|} f_X(\\frac{y}{a})\nAffine: Y=aX+b f_Y(y) = \\frac{1}{|a|} f_X(\\frac{y-b}{a})\n\nAffine transformation of normal distributions\n\nX \\sim N(0,1) (Standard normal) f_X(x) = \\frac{1}{\\sqrt{2\\pi}} e^{-x^2/2}\n\nY = \\sigma X + \\mu f_Y(y) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{-(y-\\mu)^2/2\\sigma^2}\n\nY \\sim N(\\mu, \\sigma^2)\n\n\nX \\sim N(\\mu, \\sigma^2)\n\nY=\\frac{X-\\mu}{\\sigma} \\sim N(0,1)\n\n\n\n\n\n\n\n\n\nResult\n\n\n\nAffine transformation of a normal random variable is also a normal random variable.",
    "crumbs": [
      "Statistics-II",
      "Key concepts in Statistics-II from Week 5 to Week 8"
    ]
  },
  {
    "objectID": "pages/Stats2/Quiz2_keyconcepts.html#lecture-5.2-expectations-of-continuous-random-variable",
    "href": "pages/Stats2/Quiz2_keyconcepts.html#lecture-5.2-expectations-of-continuous-random-variable",
    "title": "Key concepts in Statistics-II from Week 5 to Week 8",
    "section": "Lecture 5.2: Expectations of continuous random variable",
    "text": "Lecture 5.2: Expectations of continuous random variable",
    "crumbs": [
      "Statistics-II",
      "Key concepts in Statistics-II from Week 5 to Week 8"
    ]
  },
  {
    "objectID": "pages/PDSA/analysis_of_algorithms.html",
    "href": "pages/PDSA/analysis_of_algorithms.html",
    "title": "Analysis of Algorithms",
    "section": "",
    "text": "Two main factors to consider when measuring the performance of an algorithm are:\n\nRunning time - how long does the algorithm take to run?\nSpace requirements - how much memory does the algorithm use?\n\nTime depends on the processing power, which is impossible to change for the given hardware. Also, enhancements in the hardware has very limited impact at a practical level.\nStorage space is limited by the amount of memory available on the machine. This is easier to upgrade than processing power, but still has limitations.\nTherefore, when measuring the performance of an algorithm, we focus on the time rather than space.",
    "crumbs": [
      "PDSA",
      "Analysis of Algorithms"
    ]
  },
  {
    "objectID": "pages/PDSA/analysis_of_algorithms.html#measuring-performance-of-algorithms",
    "href": "pages/PDSA/analysis_of_algorithms.html#measuring-performance-of-algorithms",
    "title": "Analysis of Algorithms",
    "section": "",
    "text": "Two main factors to consider when measuring the performance of an algorithm are:\n\nRunning time - how long does the algorithm take to run?\nSpace requirements - how much memory does the algorithm use?\n\nTime depends on the processing power, which is impossible to change for the given hardware. Also, enhancements in the hardware has very limited impact at a practical level.\nStorage space is limited by the amount of memory available on the machine. This is easier to upgrade than processing power, but still has limitations.\nTherefore, when measuring the performance of an algorithm, we focus on the time rather than space.",
    "crumbs": [
      "PDSA",
      "Analysis of Algorithms"
    ]
  },
  {
    "objectID": "pages/PDSA/analysis_of_algorithms.html#input-size",
    "href": "pages/PDSA/analysis_of_algorithms.html#input-size",
    "title": "Analysis of Algorithms",
    "section": "Input size",
    "text": "Input size\n\nThe time taken by an algorithm to run is dependent on the size of the input data.\nMeasure time efficiency as a function of the input size\n\nInput size n\nRunning time t(n)\n\nDifferent algorithms may have different time complexities for the same input size.\n\nFor example, if we are arranging a given list of numbers in ascending order, and the list is already sorted, the time taken by the algorithm will be less than if the list is in descending order.\n\n\n\nWhat is the input size for an algorithm?\n\nTypically, the input size is the number of elements in the input data.\nFor numerical algorithms, the input size is the number of digits in the input data.\n\nSame as \\log_{b}n where b is the base of the number system.\n\n\n\n\nWhich input size to consider?\n\nIdeally, we want an input that is representative of the typical data that the algorithm will process, and that will give us a good idea of the algorithm’s average performance.\n\nHowever, “average” is difficult to define and compute.\nAverage over what? All possible inputs? All possible distributions of inputs? - Not practical.\n\nTherefore, we often consider the worst-case input size.\n\nIt is the input which forces the algorithm to take the longest time.\nIt is easier to compute than the average case.\nUpper bound for worst-case input guarantees good performance for all inputs.",
    "crumbs": [
      "PDSA",
      "Analysis of Algorithms"
    ]
  },
  {
    "objectID": "pages/PDSA/analysis_of_algorithms.html#measuring-running-time",
    "href": "pages/PDSA/analysis_of_algorithms.html#measuring-running-time",
    "title": "Analysis of Algorithms",
    "section": "Measuring running time",
    "text": "Measuring running time\n\nAnalysis should be independent of the hardware and software environment.\nRunning time is measured in terms of the number of basic operations performed by the algorithm.\nTypical basic operations include:\n\nAssign a value to a variable - a = 5\nCompare two values - if a &gt; b\n\nExchange a pair of values?\n\n\n(x,y)=(y,x)\n\nt=x\nx=y\ny=t\n\n\n\nIf we ignore constants, focus on orders of magnitude, both are within a factor of 3. Therefore, we can consider them as a single basic operation.\n\nWe do not need to be extremely precise about defining basic operations.",
    "crumbs": [
      "PDSA",
      "Analysis of Algorithms"
    ]
  },
  {
    "objectID": "pages/PDSA/analysis_of_algorithms.html#orders-of-magnitude",
    "href": "pages/PDSA/analysis_of_algorithms.html#orders-of-magnitude",
    "title": "Analysis of Algorithms",
    "section": "Orders of magnitude",
    "text": "Orders of magnitude\n\nWhen comparing t(n), focus on the order of magnitude\n\nIgnore constants factors.\n\nFocus on the asymptotic complexity of the algorithm\n\nHow does the running time grow as the input size increases?\nWhat happens in the limit as n becomes large/approaches infinity?\n\nTypical growth functions\n\nIs t(n) proportional to \\log n, …, n^2, n^3, …, 2^n?\n\nNote: \\log n means \\log_{2}n by default.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInput size\n\\log n\nn\nn \\log n\nn^2\nn^3\n2^n\nn!\n\n\n\n\n10\n3.3\n10\n33\n100\n1000\n1000\n10^6\n\n\n100\n6.6\n100\n660\n10^4\n10^6\n10^{30}\n10^{157}\n\n\n1000\n10\n1000\n10^4\n10^6\n10^9\n-\n-\n\n\n10^4\n13\n10^4\n10^5\n10^8\n10^{12}\n-\n-\n\n\n10^5\n17\n10^5\n10^6\n10^{10}\n-\n-\n-\n\n\n10^6\n20\n10^6\n10^7\n10^{12}\n-\n-\n-\n\n\n10^7\n23\n10^7\n10^8\n-\n-\n-\n-\n\n\n10^8\n27\n10^8\n10^9\n-\n-\n-\n-\n\n\n10^9\n30\n10^9\n10^{10}\n-\n-\n-\n-\n\n\n10^{10}\n33\n10^{10}\n10^{11}\n-\n-\n-\n-\n\n\n\n\nThe table above shows the growth of different functions as the input size increases.\nHow do we compare functions with respect to orders of magnitude?\n\n\nUpper bounds\n\nf(x) is said to be O(g(x)) if we can find constants c and x_0 such that c \\cdot g(x) is an upper bound for f(x) for x beyond x_0\nf(x) \\leq cg(x) for every x \\geq x_0\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n100n+5 is O(n^2)\n\n100n+5 \\leq 100n+n=101n, for n \\geq 5\n101n \\leq 101n^2\nChoose n_0=5 and c=101\n\nAlternatively\n\n100n+5 \\leq 100n +5n =105n, for n \\geq 1\n105n \\leq 105n^2\nChoose n_0=1 and c=105\n\nChoice of c and n_0 is not unique\n100n^2 + 20n +5 is O(n^2)\n\n100n^2 + 20n +5 \\leq 100n^2 + 20n^2 +5n^2, for n \\geq 1\n100n^2 + 20n^2 +5n^2 \\leq 125n^2, for n \\geq 1\nChoose n_0=1 and c=125\n\nWhat matters is the highest term\n\n20n+5 is dominated by 100n^2\n\nn^3 is not O(n^2)\n\nNo matter what c we choose, cn^2 will be dominated by n^3 for n \\geq c\n\n\n\n\nUseful properties of O notation\n\nIf f_{1}(n) is O(g_{1}(n)) and f_{2}(n) is O(g_{2}(n)), then f_{1}(n)+f_{2}(n) is O(\\max(g_{1}(n),g_{2}(n)))\nProof\n\nf_{1}(n) \\leq c_{1}g_{1}(n) for n \\geq n_{1}\nf_{2}(n) \\leq c_{2}g_{2}(n) for n \\geq n_{2}\nLet c_{3} = \\max(c_{1},c_{2}), n_{3} = \\max(n_{1},n_{2})\nFor n \\geq n_{3}, f_{1}(n)+f_{2}(n)\n\n\\leq c_{1}g_{1}(n)+c_{2}g_{2}(n)\n\\leq c_{3}g_{1}(n)+c_{3}g_{2}(n)\n\\leq 2c_{3}(\\max(g_{1}(n),g_{2}(n)))\n\n\nAlgorithm has two phases\n\nPhase A takes time O(g_{A}(n))\nPhase B takes time O(g_{B}(n))\n\nAlgorithm as a whole takes time \\max(O(g_{A}(n),g_{B}(n)))\nLeast efficient phase is the upper bound for the whole algorithm\n\n\n\n\nLower bounds\n\nf(x) is said to be \\Omega(g(x)) if we can find constants c and x_0 such that c \\cdot g(x) is a lower bound for f(x) for x beyond x_0\n\nf(x) \\geq cg(x) for every x \\geq x_0\n\nn^3 is \\Omega(n^2)\n\nn^3 &gt; n^2 for all n, so n_0=1, c=1\n\nTypically we establish lower bounds for a problem rather than an individual algorithm\n\nIf we sort a list by comparing elements and swapping them, we require \\Omega(n \\log n) comparisons\nThis is independent of the sorting algorithm\n\n\n\n\nTight bounds\n\nf(x) is said to be \\Theta(g(x)) if f(x) is both O(g(x)) and \\Omega(g(x))\n\nFind constants c_1, c_2, x_0 such that c_{1}g(x) \\leq f(x) \\leq c_{2}g(x) for every x \\geq x_0\n\n\\frac{n(n-1)}{2} is \\Theta(n^2)\n\nUpper bound\n\n\\frac{n(n-1)}{2} = \\frac{n^2}{2} - \\frac{n}{2} \\leq \\frac{n^2}{2} for all n \\geq 0\n\nLower bound\n\n\\frac{n(n-1)}{2} = \\frac{n^2}{2} - \\frac{n}{2} \\geq \\frac{n^2}{2} - (\\frac{n}{2} \\times \\frac{n}{2}) \\geq \\frac{n^2}{4} for n \\geq 2\n\nChoose n_0 = 2, c_1 = \\frac{1}{4}, c_2 = \\frac{1}{2}",
    "crumbs": [
      "PDSA",
      "Analysis of Algorithms"
    ]
  },
  {
    "objectID": "pages/PDSA/analysis_of_algorithms.html#calculating-time-complexity---examples",
    "href": "pages/PDSA/analysis_of_algorithms.html#calculating-time-complexity---examples",
    "title": "Analysis of Algorithms",
    "section": "Calculating time complexity - Examples",
    "text": "Calculating time complexity - Examples\n\nExample 1 - Find the maximum element in a list\n\n\n\nInput size is the length of the list\nSingle loop scans all elements\nAlways takes n steps\nOverall time is O(n)\n\n\ndef maxElement(L):\n    maxval = L[0]\n    for i in range(len(L)):\n        if L[i] &gt; maxval:\n            maxval = L[i]\n    return maxval\n\n\n\n\nExample 2 - Check whether a list contains duplicates\n\n\n\nInput size is the length of the list\nNested loop scans all pairs of elements\nA duplicate may be found in the very first iteration\nWorst case - no duplicates, both loops run fully\nTime is (n-1)+(n-2)+...+1=\\frac{n(n-1)}{2}\nOverall time is O(n^2)\n\n\ndef noDuplicates(L):\n    for i in range(len(L)):\n        for j in range(i+1, len(L)):\n            if L[i] == L[j]:\n                return False\n    return True\n\n\n\n\nExample 3 - Matrix multiplication\n\n\n\nMatrix is represented as a list of lists\n\n\\begin{pmatrix}1 & 2 & 3\\\\4 & 5 & 6\\end{pmatrix}\n[[1, 2, 3], [4, 5, 6]]\n\nInput matrices have size m \\times n, n \\times p\nOutput matrix is m \\times p\nThree nested loops\nOverall time is O(mnp) - O(n^3) if both are n \\times n\n\n\ndef matrixMultiply(A, B):\n    (m, n, p) = (len(A), len(B), len(B[0]))\n    C = [[0 for i in range(p)]\n            for j in range(m)]\n    for i in range(m):\n        for j in range(p):\n            for k in range(n):\n                C[i][j] = C[i][j] + A[i][k] * B[k][j]\n    return C\n\n\n\n\nExample 4 - Number of bits in binary representation of a number\n\n\n\n\\log n steps for n to reach 1\nFor number theoretic problems, input size is number of digits\nThis algorithm is linear in input size\n\n\ndef numberOfBits(n):\n    count = 1\n    while n &gt; 1:\n        count += 1\n        n = n // 2\n    return count\n\n\n\n\nExample 5 - Towers of Hanoi\n\nThree pegs A, B, C\nMove n disks from A to B, use C as transit peg\nNever place a larger disk on a smaller one\nRecursive solution\n\nMove n-1 disks from A to C, use B as transit peg\nMove the largest disk from A to B\nMove n-1 disks from C to B, use A as transit peg\n\nRecurrence\n\nM(n) - number of moves to transfer n disks\nM(1) = 1\nM(n) = M(n-1) + 1 + M(n-1) = 2M(n-1)+1\n\nUnwind and solve \\begin{aligned}\n    M(n) & =\\ 2M( n-1) +1\\\\\n     & =\\ 2( 2M( n-2) +1) +1=\\ 2^{2} M( n-2) +( 2+1)\\\\\n     & =\\ 2^{2}( 2M( n-3) +1) +( 2+1) =\\ 2^{3} M( n-3) \\ +\\ ( 4+2+1)\\\\\n     & \\dotsc \\\\\n     & =\\ 2^{k} M( n-k) +\\left( 2^{k} -1\\right)\\\\\n     & \\dotsc \\\\\n     & =\\ 2^{n-1} M( 1) +\\left( 2^{n-1} -1\\right)\\\\\n     & =\\ 2^{n-1} +2^{n-1} -1\\\\\n     & =\\ 2^{n} -1\n    \\end{aligned}",
    "crumbs": [
      "PDSA",
      "Analysis of Algorithms"
    ]
  },
  {
    "objectID": "pages/PDSA/binary_search.html",
    "href": "pages/PDSA/binary_search.html",
    "title": "Binary Search",
    "section": "",
    "text": "Is a value v present in a list l?\nNaive search: check each element in the list\nInput size is n, the number of elements in the list\nWorst case scenario: v is not in the list\nWorst-case time complexity is O(n)\n\n\ndef naivesearch(v, l):\n    for x in l:\n        if v == x:\n            return True\n    return False"
  },
  {
    "objectID": "pages/PDSA/binary_search.html#searching-in-a-list",
    "href": "pages/PDSA/binary_search.html#searching-in-a-list",
    "title": "Binary Search",
    "section": "",
    "text": "Is a value v present in a list l?\nNaive search: check each element in the list\nInput size is n, the number of elements in the list\nWorst case scenario: v is not in the list\nWorst-case time complexity is O(n)\n\n\ndef naivesearch(v, l):\n    for x in l:\n        if v == x:\n            return True\n    return False"
  },
  {
    "objectID": "pages/PDSA/binary_search.html#searching-in-a-sorted-list",
    "href": "pages/PDSA/binary_search.html#searching-in-a-sorted-list",
    "title": "Binary Search",
    "section": "Searching in a sorted list",
    "text": "Searching in a sorted list\n\n\n\nIf the list is sorted in ascending order, we can do better.\nCompare v with the midpoint of the list.\n\nIf v is equal to the midpoint, the value is found.\nIf v is less than the midpoint, search the left half.\nIf v is greater than the midpoint, search the right half.\nRepeat the process until the value is found or the list is empty.\n\n\n\ndef binarysearch(v, l):\n    if l == []:\n        return False\n    m = len(l) // 2\n    if v == l[m]:\n        return True\n    if v &lt; l[m]:\n        return binarysearch(v, l[:m])\n    else:\n        return binarysearch(v, l[m+1:])"
  },
  {
    "objectID": "pages/PDSA/binary_search.html#binary-search",
    "href": "pages/PDSA/binary_search.html#binary-search",
    "title": "Binary Search",
    "section": "Binary search",
    "text": "Binary search\n\nHow long does it take to search for a value in a list of size n?\n\nIn the worst case, the list is halved at each step.\nThe number of steps is the number of times we can halve n before reaching 1, which is O(\\log n)\n\nCalculating T(n) - the time to search in a list of size n\n\nIdentify the basic operation: the comparison v == l[m]\n\nLet the time taken to perform the basic operation be T(1)=1\n\nRecurrence relation: T(n) = T(\\frac{n}{2}) + 1\n\nSolve by “unwinding” \n\\begin{aligned}\n  T(n) &= T(\\frac{n}{2}) + 1 \\\\\n  &=\\ (T(\\frac{n}{4}) + 1) + 1 =\\ T\\left(\\frac{n}{2^2}\\right) + \\underbrace{1 + 1}_{2} \\\\\n  &=\\ \\dotsc \\\\\n  &=\\ T\\left(\\frac{n}{2^k}\\right) + \\underbrace{1 +\\dots + 1}_{k} \\\\\n  &=\\ T(1) + k, \\text{ for } \\ k = \\log n \\\\\n  &=\\ 1 + \\log n = O(\\log n) \\\\\n  \\end{aligned}\n\n\n\nAn alternate calculation using the Master Theorem for Divide-and-Conquer Recurrences\n\nIdentify the Basic Operation: v == l[m]\nDetermine the Number of Subproblems and Their Size:\n\nEach recursive call splits the list in half.\nThe size of each subproblem is approximately half the size of the original problem: \\frac{n}{2}.\n\nForm the Recurrence Relation:\n\nThe recurrence relation for the running time T(n) of binary search can be written as: \nT(n) = T\\left(\\frac{n}{2}\\right) + O(1)\n\nHere, T(\\frac{n}{2}) represents the time complexity of searching in a sublist of size \\frac{n}{2}, and O(1) is the time complexity of the basic operation (comparison).\n\nSolve the Recurrence Relation:\n\nThis type of recurrence relation is a common form and can be solved using the @master-theorem.\n\n\n\n\n\n\n\n\nMaster Theorem\n\n\n\n\n\nThe Master Theorem applies to recurrences of the form: \nT(n) = aT\\left(\\frac{n}{b}\\right) + f(n)\n where:\n\na \\geq 1 is the number of subproblems in the recursion.\n\\frac{n}{b} is the size of each subproblem.\nf(n) is the cost outside the recursive calls, which includes the time to divide the problem and combine the results of the subproblems.\n\nAccording to the Master Theorem:\n\nIf f(n) = O(n^c) where c &lt; \\log_b{a}, then T(n) = O(n^{\\log_b{a}}).\nIf f(n) = O(n^c) where c = \\log_b{a}, then T(n) = O(n^{\\log_b{a}} \\log{n}).\nIf f(n) = O(n^c) where c &gt; \\log_b{a}, then T(n) = O(f(n)).\n\n\n\n\n\nFor binary search: - a = 1, b = 2, \\log_b{a} = \\log_2{1} = 0. - ( f(n) = O(1) ), which is ( O(n^0) ).\nHere, ( c = 0 ) and ( _b{a} = 0 ), so they are equal. Therefore, according to the Master Theorem, ( T(n) = O(n^0 ) = O() ).\n\n\nConclusion\nThe time complexity of the recursive binary search is ( O() )."
  },
  {
    "objectID": "pages/PDSA/binary_search.html#an-alternate-calculation-using-the-master-theorem-for-divide-and-conquer-recurrences",
    "href": "pages/PDSA/binary_search.html#an-alternate-calculation-using-the-master-theorem-for-divide-and-conquer-recurrences",
    "title": "Binary Search",
    "section": "An alternate calculation using the Master Theorem for Divide-and-Conquer Recurrences",
    "text": "An alternate calculation using the Master Theorem for Divide-and-Conquer Recurrences\n\nIdentify the Basic Operation: v == l[m]\nDetermine the Number of Subproblems and Their Size:\n\nEach recursive call splits the list in half.\nThe size of each subproblem is approximately half the size of the original problem: \\frac{n}{2}.\n\nForm the Recurrence Relation:\n\nThe recurrence relation for the running time T(n) of binary search can be written as: \nT(n) = T\\left(\\frac{n}{2}\\right) + O(1)\n\nHere, T(\\frac{n}{2}) represents the time complexity of searching in a sublist of size \\frac{n}{2}, and O(1) is the time complexity of the basic operation (comparison).\n\nSolve the Recurrence Relation:\n\nThis type of recurrence relation is a common form and can be solved using the @master-theorem.\n\n\n\n\n\n\n\n\nMaster Theorem\n\n\n\n\n\nThe Master Theorem applies to recurrences of the form: \nT(n) = aT\\left(\\frac{n}{b}\\right) + f(n)\n where:\n\na \\geq 1 is the number of subproblems in the recursion.\n\\frac{n}{b} is the size of each subproblem.\nf(n) is the cost outside the recursive calls, which includes the time to divide the problem and combine the results of the subproblems.\n\nAccording to the Master Theorem:\n\nIf f(n) = O(n^c) where c &lt; \\log_b{a}, then T(n) = O(n^{\\log_b{a}}).\nIf f(n) = O(n^c) where c = \\log_b{a}, then T(n) = O(n^{\\log_b{a}} \\log{n}).\nIf f(n) = O(n^c) where c &gt; \\log_b{a}, then T(n) = O(f(n)).\n\n\n\n\n\nFor binary search: - a = 1, b = 2, \\log_b{a} = \\log_2{1} = 0. - ( f(n) = O(1) ), which is ( O(n^0) ).\nHere, ( c = 0 ) and ( _b{a} = 0 ), so they are equal. Therefore, according to the Master Theorem, ( T(n) = O(n^0 ) = O() ).\n\nConclusion\nThe time complexity of the recursive binary search is ( O() )."
  },
  {
    "objectID": "pages/PDSA/binarysearch.html",
    "href": "pages/PDSA/binarysearch.html",
    "title": "Binary Search",
    "section": "",
    "text": "Is a value v present in a list l?\nNaive search: check each element in the list\nInput size is n, the number of elements in the list\nWorst case scenario: v is not in the list\nWorst-case time complexity is O(n)\n\n\ndef naivesearch(v, l):\n    for x in l:\n        if v == x:\n            return True\n    return False",
    "crumbs": [
      "PDSA",
      "Binary Search"
    ]
  },
  {
    "objectID": "pages/PDSA/binarysearch.html#searching-in-a-list",
    "href": "pages/PDSA/binarysearch.html#searching-in-a-list",
    "title": "Binary Search",
    "section": "",
    "text": "Is a value v present in a list l?\nNaive search: check each element in the list\nInput size is n, the number of elements in the list\nWorst case scenario: v is not in the list\nWorst-case time complexity is O(n)\n\n\ndef naivesearch(v, l):\n    for x in l:\n        if v == x:\n            return True\n    return False",
    "crumbs": [
      "PDSA",
      "Binary Search"
    ]
  },
  {
    "objectID": "pages/PDSA/binarysearch.html#searching-in-a-sorted-list",
    "href": "pages/PDSA/binarysearch.html#searching-in-a-sorted-list",
    "title": "Binary Search",
    "section": "Searching in a sorted list",
    "text": "Searching in a sorted list\n\n\n\nIf the list is sorted in ascending order, we can do better.\nCompare v with the midpoint of the list.\n\nIf v is equal to the midpoint, the value is found.\nIf v is less than the midpoint, search the left half.\nIf v is greater than the midpoint, search the right half.\nRepeat the process until the value is found or the list is empty.\n\n\n\ndef binarysearch(v, l):\n    if l == []:\n        return False\n    m = len(l) // 2\n    if v == l[m]:\n        return True\n    if v &lt; l[m]:\n        return binarysearch(v, l[:m])\n    else:\n        return binarysearch(v, l[m+1:])",
    "crumbs": [
      "PDSA",
      "Binary Search"
    ]
  },
  {
    "objectID": "pages/PDSA/binarysearch.html#binary-search",
    "href": "pages/PDSA/binarysearch.html#binary-search",
    "title": "Binary Search",
    "section": "Binary search",
    "text": "Binary search\n\nHow long does it take to search for a value in a list of size n?\n\nIn the worst case, the list is halved at each step.\nThe number of steps is the number of times we can halve n before reaching 1, which is O(\\log n)\n\nCalculating T(n) - the time to search in a list of size n\n\nIdentify the basic operation: the comparison v == l[m]\n\nLet the time taken to perform the basic operation be T(1)=1\n\nRecurrence relation: T(n) = T(\\frac{n}{2}) + 1\n\nSolve by “unwinding” \n\\begin{aligned}\n  T(n) &= T(\\frac{n}{2}) + 1 \\\\\n  &=\\ (T(\\frac{n}{4}) + 1) + 1 =\\ T\\left(\\frac{n}{2^2}\\right) + \\underbrace{1 + 1}_{2} \\\\\n  &=\\ \\dotsc \\\\\n  &=\\ T\\left(\\frac{n}{2^k}\\right) + \\underbrace{1 +\\dots + 1}_{k} \\\\\n  &=\\ T(1) + k, \\text{ for } \\ k = \\log n \\\\\n  &=\\ 1 + \\log n = O(\\log n) \\\\\n  \\end{aligned}\n\n\n\nAn alternate calculation using the Master Theorem for Divide-and-Conquer Recurrences\n\nIdentify the Basic Operation: v == l[m]\nDetermine the Number of Subproblems and Their Size:\n\nEach recursive call splits the list in half.\nThe size of each subproblem is approximately half the size of the original problem: \\frac{n}{2}.\n\nForm the Recurrence Relation:\n\nThe recurrence relation for the running time T(n) of binary search can be written as: \nT(n) = T\\left(\\frac{n}{2}\\right) + O(1)\n\nHere, T(\\frac{n}{2}) represents the time complexity of searching in a sublist of size \\frac{n}{2}, and O(1) is the time complexity of the basic operation (comparison).\n\nSolve the Recurrence Relation:\n\nThis type of recurrence relation is a common form and can be solved using the Master Theorem1.\n\n\n\n\n\n\n\n\nMaster Theorem\n\n\n\nThe Master Theorem applies to recurrences of the form: \nT(n) = aT\\left(\\frac{n}{b}\\right) + f(n)\n where:\n\na \\geq 1 is the number of subproblems in the recursion.\n\\frac{n}{b} is the size of each subproblem.\nf(n) is the cost outside the recursive calls, which includes the time to divide the problem and combine the results of the subproblems.\n\nAccording to the Master Theorem:\n\nIf f(n) = O(n^c) where c &lt; \\log_b{a}, then T(n) = O(n^{\\log_b{a}}).\nIf f(n) = O(n^c) where c = \\log_b{a}, then T(n) = O(n^{\\log_b{a}} \\log{n}).\nIf f(n) = O(n^c) where c &gt; \\log_b{a}, then T(n) = O(f(n)).\n\n\n\n\nFor binary search\n\na=1 (one subproblem)\nb=2 (each subproblem is half the size of the original problem)\n\\log_b{a} = \\log_2{1} = 0\nf(n) = O(1) (constant time for the basic operation), is O(n^0)\nHere, c = 0 = \\log_b{a}, so the second case of the Master Theorem applies.\n\nT(n) = O(n^0 \\log{n}) = O(\\log{n}).",
    "crumbs": [
      "PDSA",
      "Binary Search"
    ]
  },
  {
    "objectID": "pages/PDSA/binarysearch.html#conclusion",
    "href": "pages/PDSA/binarysearch.html#conclusion",
    "title": "Binary Search",
    "section": "Conclusion",
    "text": "Conclusion\n\nThe time complexity of binary search is O(\\log n).",
    "crumbs": [
      "PDSA",
      "Binary Search"
    ]
  },
  {
    "objectID": "pages/PDSA/binarysearch.html#footnotes",
    "href": "pages/PDSA/binarysearch.html#footnotes",
    "title": "Binary Search",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCormen, T. H., Leiserson, C. E., Rivest, R. L., Stein, C. Introduction to Algorithms, Fourth Edition. MIT Press, 2022. Sections 4.5 (The master method for solving recurrences) and 4.6 (Proof of the continuous master theorem), pp. 101–115.↩︎",
    "crumbs": [
      "PDSA",
      "Binary Search"
    ]
  }
]